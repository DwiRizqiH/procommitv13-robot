
AVRASM ver. 2.1.30  D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm Thu Nov 23 13:32:37 2023

D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1083): warning: Register r4 already defined by the .DEF directive
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1084): warning: Register r5 already defined by the .DEF directive
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1085): warning: Register r6 already defined by the .DEF directive
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1086): warning: Register r7 already defined by the .DEF directive
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1087): warning: Register r8 already defined by the .DEF directive
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1088): warning: Register r9 already defined by the .DEF directive
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1089): warning: Register r10 already defined by the .DEF directive
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1090): warning: Register r11 already defined by the .DEF directive
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1091): warning: Register r13 already defined by the .DEF directive
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1092): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.40 Advanced
                 ;(C) Copyright 1998-2020 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Release
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 11,059200 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Mode 1
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _hitung=R4
                 	.DEF _hitung_msb=R5
                 	.DEF _nadc7=R6
                 	.DEF _nadc7_msb=R7
                 	.DEF _i=R8
                 	.DEF _i_msb=R9
                 	.DEF _k=R10
                 	.DEF _k_msb=R11
                 	.DEF _pos_servo1=R13
                 	.DEF _pos_servo2=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 015f 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0a03 	JMP  _timer0_comp_isr
000016 940c 09e5 	JMP  _timer0_ovf_isr
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 0000
000034 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 _0x6:
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1134): warning: .cseg .db misalignment - padding zero byte
000035 000a      	.DB  0xA
                 _0x7:
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1136): warning: .cseg .db misalignment - padding zero byte
000036 0064      	.DB  0x64
                 _0x8:
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1138): warning: .cseg .db misalignment - padding zero byte
000037 00c8      	.DB  0xC8
                 _0x9:
000038 ff60      	.DB  0x60,0xFF
                 _0xA:
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1142): warning: .cseg .db misalignment - padding zero byte
000039 00c8      	.DB  0xC8
                 _0xB:
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1144): warning: .cseg .db misalignment - padding zero byte
00003a 00dc      	.DB  0xDC
                 _0xC:
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1146): warning: .cseg .db misalignment - padding zero byte
00003b 0050      	.DB  0x50
                 _0xD:
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1148): warning: .cseg .db misalignment - padding zero byte
00003c 00a0      	.DB  0xA0
                 _0xE:
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1150): warning: .cseg .db misalignment - padding zero byte
00003d 00aa      	.DB  0xAA
                 _0xF:
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1152): warning: .cseg .db misalignment - padding zero byte
00003e 0005      	.DB  0x5
                 _0x10:
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1154): warning: .cseg .db misalignment - padding zero byte
00003f 0055      	.DB  0x55
                 _0x0:
000040 6425
000041 6425
000042 6425
000043 6425      	.DB  0x25,0x64,0x25,0x64,0x25,0x64,0x25,0x64
000044 6425
000045 6425
000046 6425
000047 4200      	.DB  0x25,0x64,0x25,0x64,0x25,0x64,0x0,0x42
000048 6361
000049 2061
00004a 694c
00004b 656e      	.DB  0x61,0x63,0x61,0x20,0x4C,0x69,0x6E,0x65
00004c 7300
00004d 6e65
00004e 6f73
00004f 3a72      	.DB  0x0,0x73,0x65,0x6E,0x73,0x6F,0x72,0x3A
000050 6425
000051 3d20
000052 2520
000053 2064      	.DB  0x25,0x64,0x20,0x3D,0x20,0x25,0x64,0x20
000054 0020
000055 6142
000056 6163
000057 4220      	.DB  0x20,0x0,0x42,0x61,0x63,0x61,0x20,0x42
000058 6361
000059 676b
00005a 6f72
00005b 6e75      	.DB  0x61,0x63,0x6B,0x67,0x72,0x6F,0x75,0x6E
00005c 0064
00005d 6543
00005e 746e
00005f 7265      	.DB  0x64,0x0,0x43,0x65,0x6E,0x74,0x65,0x72
000060 5020
000061 696f
000062 746e
000063 2020      	.DB  0x20,0x50,0x6F,0x69,0x6E,0x74,0x20,0x20
000064 2020
000065 7300
000066 6e65
000067 6f73      	.DB  0x20,0x20,0x0,0x73,0x65,0x6E,0x73,0x6F
000068 3a72
000069 6425
00006a 2d20
00006b 3e2d      	.DB  0x72,0x3A,0x25,0x64,0x20,0x2D,0x2D,0x3E
00006c 2520
00006d 2064
00006e 0020
00006f 6425      	.DB  0x20,0x25,0x64,0x20,0x20,0x0,0x25,0x64
000070 2020
000071 0020
000072 654d
000073 756e      	.DB  0x20,0x20,0x20,0x0,0x4D,0x65,0x6E,0x75
000074 4300
000075 6c61
000076 6269
000077 6172      	.DB  0x0,0x43,0x61,0x6C,0x69,0x62,0x72,0x61
000078 6974
000079 6e6f
00007a 5200
00007b 6e75      	.DB  0x74,0x69,0x6F,0x6E,0x0,0x52,0x75,0x6E
00007c 4220
00007d 746f
00007e 5300
00007f 6e65      	.DB  0x20,0x42,0x6F,0x74,0x0,0x53,0x65,0x6E
000080 2073
000081 6157
000082 6e72
000083 0061      	.DB  0x73,0x20,0x57,0x61,0x72,0x6E,0x61,0x0
000084 6f4d
000085 6f74
000086 0072
000087 7542      	.DB  0x4D,0x6F,0x74,0x6F,0x72,0x0,0x42,0x75
000088 7474
000089 6e6f
00008a 4300
00008b 7061      	.DB  0x74,0x74,0x6F,0x6E,0x0,0x43,0x61,0x70
00008c 7469
00008d 4300
00008e 696c
00008f 6b63      	.DB  0x69,0x74,0x0,0x43,0x6C,0x69,0x63,0x6B
000090 3220
000091 7420
000092 206f
000093 7473      	.DB  0x20,0x32,0x20,0x74,0x6F,0x20,0x73,0x74
000094 7261
000095 0074
000096 7552
000097 6e6e      	.DB  0x61,0x72,0x74,0x0,0x52,0x75,0x6E,0x6E
000098 6e69
000099 2e67
00009a 2e2e
00009b 4d00      	.DB  0x69,0x6E,0x67,0x2E,0x2E,0x2E,0x0,0x4D
00009c 7061
00009d 4220
00009e 7269
00009f 0075      	.DB  0x61,0x70,0x20,0x42,0x69,0x72,0x75,0x0
0000a0 6c43
0000a1 6369
0000a2 206b
0000a3 2032      	.DB  0x43,0x6C,0x69,0x63,0x6B,0x20,0x32,0x20
0000a4 6f74
0000a5 7320
0000a6 6c65
0000a7 6365      	.DB  0x74,0x6F,0x20,0x73,0x65,0x6C,0x65,0x63
0000a8 0074
0000a9 614d
0000aa 2070
0000ab 654d      	.DB  0x74,0x0,0x4D,0x61,0x70,0x20,0x4D,0x65
0000ac 6172
0000ad 0068
0000ae 6554
0000af 7473      	.DB  0x72,0x61,0x68,0x0,0x54,0x65,0x73,0x74
0000b0 4d20
0000b1 746f
0000b2 726f
0000b3 2b00      	.DB  0x20,0x4D,0x6F,0x74,0x6F,0x72,0x0,0x2B
0000b4 3031
0000b5 2030
0000b6 312b
0000b7 3030      	.DB  0x31,0x30,0x30,0x20,0x2B,0x31,0x30,0x30
0000b8 2d00
0000b9 3031
0000ba 2030
0000bb 312d      	.DB  0x0,0x2D,0x31,0x30,0x30,0x20,0x2D,0x31
0000bc 3030
0000bd 2b00
0000be 3031
0000bf 2030      	.DB  0x30,0x30,0x0,0x2B,0x31,0x30,0x30,0x20
0000c0 312d
0000c1 3030
0000c2 2d00
0000c3 3031      	.DB  0x2D,0x31,0x30,0x30,0x0,0x2D,0x31,0x30
0000c4 2030
0000c5 312b
0000c6 3030
0000c7 4300      	.DB  0x30,0x20,0x2B,0x31,0x30,0x30,0x0,0x43
0000c8 696c
0000c9 6b63
0000ca 3120
0000cb 7420      	.DB  0x6C,0x69,0x63,0x6B,0x20,0x31,0x20,0x74
0000cc 206f
0000cd 7865
0000ce 7469
0000cf 7400      	.DB  0x6F,0x20,0x65,0x78,0x69,0x74,0x0,0x74
0000d0 6d6f
0000d1 6f62
0000d2 206c
0000d3 203d      	.DB  0x6F,0x6D,0x62,0x6F,0x6C,0x20,0x3D,0x20
0000d4 2031
0000d5 2020
0000d6 2020
0000d7 7400      	.DB  0x31,0x20,0x20,0x20,0x20,0x20,0x0,0x74
0000d8 6d6f
0000d9 6f62
0000da 206c
0000db 203d      	.DB  0x6F,0x6D,0x62,0x6F,0x6C,0x20,0x3D,0x20
0000dc 2032
0000dd 2020
0000de 2020
0000df 7400      	.DB  0x32,0x20,0x20,0x20,0x20,0x20,0x0,0x74
0000e0 6d6f
0000e1 6f62
0000e2 206c
0000e3 203d      	.DB  0x6F,0x6D,0x62,0x6F,0x6C,0x20,0x3D,0x20
0000e4 2033
0000e5 2020
0000e6 2020
0000e7 7400      	.DB  0x33,0x20,0x20,0x20,0x20,0x20,0x0,0x74
0000e8 6d6f
0000e9 6f62
0000ea 206c
0000eb 203d      	.DB  0x6F,0x6D,0x62,0x6F,0x6C,0x20,0x3D,0x20
0000ec 2034
0000ed 2020
0000ee 2020
0000ef 5700      	.DB  0x34,0x20,0x20,0x20,0x20,0x20,0x0,0x57
0000f0 7261
0000f1 616e
0000f2 003a
0000f3 7845      	.DB  0x61,0x72,0x6E,0x61,0x3A,0x0,0x45,0x78
0000f4 7469
0000f5 6e69
0000f6 2e67
0000f7 2e2e      	.DB  0x69,0x74,0x69,0x6E,0x67,0x2E,0x2E,0x2E
0000f8 5400
0000f9 7365
0000fa 2074
0000fb 6143      	.DB  0x0,0x54,0x65,0x73,0x74,0x20,0x43,0x61
0000fc 6970
0000fd 0074
0000fe 6143
0000ff 6970      	.DB  0x70,0x69,0x74,0x0,0x43,0x61,0x70,0x69
000100 3a74
000101 3e20
000102 3c20
000103 4300      	.DB  0x74,0x3A,0x20,0x3E,0x20,0x3C,0x0,0x43
000104 7061
000105 7469
000106 203a
000107 203c      	.DB  0x61,0x70,0x69,0x74,0x3A,0x20,0x3C,0x20
000108 003e
000109 6143
00010a 6970
00010b 3a74      	.DB  0x3E,0x0,0x43,0x61,0x70,0x69,0x74,0x3A
00010c 5c20
00010d 002f
00010e 6143
00010f 6970      	.DB  0x20,0x5C,0x2F,0x0,0x43,0x61,0x70,0x69
000110 3a74
000111 2f20
000112 005c
000113 6f48      	.DB  0x74,0x3A,0x20,0x2F,0x5C,0x0,0x48,0x6F
000114 646c
000115 3120
000116 7420
000117 206f      	.DB  0x6C,0x64,0x20,0x31,0x20,0x74,0x6F,0x20
000118 7865
000119 7469
00011a 5800
00011b 0044      	.DB  0x65,0x78,0x69,0x74,0x0,0x58,0x44,0x0
00011c 2020
00011d 2020
00011e 4c20
00011f 4745      	.DB  0x20,0x20,0x20,0x20,0x20,0x4C,0x45,0x47
000120 4f49
000121 204e
000122 2020
000123 2020      	.DB  0x49,0x4F,0x4E,0x20,0x20,0x20,0x20,0x20
000124 2000
000125 414d
000126 204e
000127 2034      	.DB  0x0,0x20,0x4D,0x41,0x4E,0x20,0x34,0x20
000128 4f4a
000129 424d
00012a 4e41
00012b 2047      	.DB  0x4A,0x4F,0x4D,0x42,0x41,0x4E,0x47,0x20
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1215): warning: .cseg .db misalignment - padding zero byte
00012c 0000      	.DB  0x0
                 _0x2040060:
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1217): warning: .cseg .db misalignment - padding zero byte
00012d 0001      	.DB  0x1
                 _0x2040000:
00012e 4e2d
00012f 4e41
000130 4900
000131 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1220): warning: .cseg .db misalignment - padding zero byte
000132 0000      	.DB  0x0
                 _0x2060003:
000133 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000134 0004      	.DW  0x04
000135 0004      	.DW  0x04
000136 0066      	.DW  __REG_VARS*2
                 
000137 0001      	.DW  0x01
000138 0295      	.DW  _kp
000139 006a      	.DW  _0x6*2
                 
00013a 0001      	.DW  0x01
00013b 0297      	.DW  _kd
00013c 006c      	.DW  _0x7*2
                 
00013d 0001      	.DW  0x01
00013e 0299      	.DW  _SPEED
00013f 006e      	.DW  _0x8*2
                 
000140 0002      	.DW  0x02
000141 029b      	.DW  _MIN_SPEED
000142 0070      	.DW  _0x9*2
                 
000143 0001      	.DW  0x01
000144 029d      	.DW  _MAX_SPEED
000145 0072      	.DW  _0xA*2
                 
000146 0001      	.DW  0x01
000147 02a7      	.DW  _maxHijau
000148 0074      	.DW  _0xB*2
                 
000149 0001      	.DW  0x01
00014a 02a9      	.DW  _maxKuning
00014b 0076      	.DW  _0xC*2
                 
00014c 0001      	.DW  0x01
00014d 02ab      	.DW  _maxMerah
00014e 0078      	.DW  _0xD*2
                 
00014f 0001      	.DW  0x01
000150 02ad      	.DW  _minHijau
000151 007a      	.DW  _0xE*2
                 
000152 0001      	.DW  0x01
000153 02af      	.DW  _minKuning
000154 007c      	.DW  _0xF*2
                 
000155 0001      	.DW  0x01
000156 02b1      	.DW  _minMerah
000157 007e      	.DW  _0x10*2
                 
000158 0001      	.DW  0x01
000159 02b5      	.DW  __seed_G102
00015a 025a      	.DW  _0x2040060*2
                 
00015b 0002      	.DW  0x02
00015c 02b9      	.DW  __base_y_G103
00015d 0266      	.DW  _0x2060003*2
                 
                 _0xFFFFFFFF:
00015e 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00015f 94f8      	CLI
000160 27ee      	CLR  R30
000161 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000162 e0f1      	LDI  R31,1
000163 bffb      	OUT  GICR,R31
000164 bfeb      	OUT  GICR,R30
000165 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000166 e1f8      	LDI  R31,0x18
000167 bdf1      	OUT  WDTCR,R31
000168 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000169 e08d      	LDI  R24,(14-2)+1
00016a e0a2      	LDI  R26,2
00016b 27bb      	CLR  R27
                 __CLEAR_REG:
00016c 93ed      	ST   X+,R30
00016d 958a      	DEC  R24
00016e f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00016f e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000170 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000171 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000172 93ed      	ST   X+,R30
000173 9701      	SBIW R24,1
000174 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000175 e6e8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000176 e0f2      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000177 9185      	LPM  R24,Z+
000178 9195      	LPM  R25,Z+
000179 9700      	SBIW R24,0
00017a f061      	BREQ __GLOBAL_INI_END
00017b 91a5      	LPM  R26,Z+
00017c 91b5      	LPM  R27,Z+
00017d 9005      	LPM  R0,Z+
00017e 9015      	LPM  R1,Z+
00017f 01bf      	MOVW R22,R30
000180 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000181 9005      	LPM  R0,Z+
000182 920d      	ST   X+,R0
000183 9701      	SBIW R24,1
000184 f7e1      	BRNE __GLOBAL_INI_LOOP
000185 01fb      	MOVW R30,R22
000186 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000187 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000188 bfed      	OUT  SPL,R30
000189 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00018a bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00018b e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00018c e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00018d 940c 0a04 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                    .equ __lcd_port=0x18 ;PORTB
                 ; 0000 002F #endasm
                 ;unsigned char read_adc(unsigned char adc_input)
                 ; 0000 0036 {
                 
                 	.CSEG
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 0037 ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
00018f 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
000190 81e8      	LD   R30,Y
000191 66e0      	ORI  R30,LOW(0x60)
000192 b9e7      	OUT  0x7,R30
                 ; 0000 0038 // Start the AD conversion
                 ; 0000 0039 ADCSRA|=0x40;
000193 9a36      	SBI  0x6,6
                 ; 0000 003A // Wait for the AD conversion to complete
                 ; 0000 003B while ((ADCSRA & 0x10)==0);
                 _0x3:
000194 9b34      	SBIS 0x6,4
000195 cffe      	RJMP _0x3
                 ; 0000 003C ADCSRA|=0x10;
000196 9a34      	SBI  0x6,4
                 ; 0000 003D return ADCH;
000197 b1e5      	IN   R30,0x5
000198 9621      	ADIW R28,1
000199 9508      	RET
                 ; 0000 003E }
                 ; .FEND
                 ;int hitung = 0;
                 ;unsigned int nadc7 = 0;
                 ;char buff[33];
                 ;int i, k;
                 ;unsigned char pos_servo1, pos_servo2, a;
                 ;int count_btn = 0;
                 ;int count_child_btn = 0;
                 ;bool isChildSelect = false;
                 ;bool isTestTombol = false;
                 ;eeprom int garis[7], back[7], tengah[7];
                 ;char sen[7];
                 ;int sensor;
                 ;int error = 0;
                 ;int lastError = 0;
                 ;int kp = 10;
                 
                 	.DSEG
                 ;int kd = 100;
                 ;int SPEED = 200;
                 ;int MIN_SPEED = -160;
                 ;int MAX_SPEED = 200;
                 ;int count = 0;
                 ;int second = 0;
                 ;int positionD = 0;
                 ;int mapMirror = 0; // 0 - map/lintasan bagian biru, 1 - map/lintasan bagian mera ...
                 ;int maxHijau = 220;
                 ;int maxKuning = 80;
                 ;int maxMerah = 160;
                 ;int minHijau = 170;
                 ;int minKuning = 5;
                 ;int minMerah = 85;
                 ;void delay(int ms)
                 ; 0000 0060 {
                 
                 	.CSEG
                 _delay:
                 ; .FSTART _delay
                 ;delay_ms(ms);
00019a 93ba      	ST   -Y,R27
00019b 93aa      	ST   -Y,R26
                 ;	ms -> Y+0
00019c 81a8      	LD   R26,Y
00019d 81b9      	LDD  R27,Y+1
00019e 940e 10ca 	CALL _delay_ms
0001a0 c33c      	RJMP _0x20C000E
                 ; .FEND
                 ;void lcd_kedip(int ulangi)
                 ;for(i = 0; i < ulangi; i++)
                 ;	ulangi -> Y+0
                 ;lampu=0;
                 ;delay_ms(100);
                 ;lampu=1;
                 ;delay_ms(100);
                 ;void konvert_logic()
                 ; 0000 0061 {
                 _konvert_logic:
                 ; .FSTART _konvert_logic
                 ;for(i = 0; i < 7; i++)
0001a1 2488      	CLR  R8
0001a2 2499      	CLR  R9
                 _0x19:
0001a3 940e 0d76 	CALL SUBOPT_0x0
0001a5 f4d4      	BRGE _0x1A
                 ;if(read_adc(i) > tengah[i]) {
0001a6 940e 0d7b 	CALL SUBOPT_0x1
0001a8 17ea      	CP   R30,R26
0001a9 07fb      	CPC  R31,R27
0001aa f434      	BRGE _0x1B
                 ;sen[i]=1;
0001ab e8a8      	LDI  R26,LOW(_sen)
0001ac e0b2      	LDI  R27,HIGH(_sen)
0001ad 0da8      	ADD  R26,R8
0001ae 1db9      	ADC  R27,R9
0001af e0e1      	LDI  R30,LOW(1)
0001b0 c00a      	RJMP _0x17D
                 ;else if(read_adc(i) < tengah[i]) {
                 _0x1B:
0001b1 940e 0d7b 	CALL SUBOPT_0x1
0001b3 17ae      	CP   R26,R30
0001b4 07bf      	CPC  R27,R31
0001b5 f434      	BRGE _0x1D
                 ;sen[i]=0;
0001b6 e8a8      	LDI  R26,LOW(_sen)
0001b7 e0b2      	LDI  R27,HIGH(_sen)
0001b8 0da8      	ADD  R26,R8
0001b9 1db9      	ADC  R27,R9
0001ba e0e0      	LDI  R30,LOW(0)
                 _0x17D:
0001bb 93ec      	ST   X,R30
                 _0x1D:
0001bc 01f4      	MOVW R30,R8
0001bd 9631      	ADIW R30,1
0001be 014f      	MOVW R8,R30
0001bf cfe3      	RJMP _0x19
                 _0x1A:
0001c0 9508      	RET
                 ; .FEND
                 ;void logika()
                 _logika:
                 ; .FSTART _logika
                 ;sensor = (sen[6] * 64) + (sen[5] * 32) + (sen[4] * 16) + (sen[3] * 8) + (sen[2]  ...
                +
0001c1 91a0 028e+LDS R26 , _sen + ( 6 )
                 	__GETB2MN _sen,6
0001c3 e4e0      	LDI  R30,LOW(64)
0001c4 9fea      	MUL  R30,R26
0001c5 01b0      	MOVW R22,R0
                +
0001c6 91a0 028d+LDS R26 , _sen + ( 5 )
                 	__GETB2MN _sen,5
0001c8 e2e0      	LDI  R30,LOW(32)
0001c9 940e 0d8b 	CALL SUBOPT_0x2
                +
0001cb 91a0 028c+LDS R26 , _sen + ( 4 )
                 	__GETB2MN _sen,4
0001cd e1e0      	LDI  R30,LOW(16)
0001ce 940e 0d8b 	CALL SUBOPT_0x2
                +
0001d0 91a0 028b+LDS R26 , _sen + ( 3 )
                 	__GETB2MN _sen,3
0001d2 e0e8      	LDI  R30,LOW(8)
0001d3 940e 0d8b 	CALL SUBOPT_0x2
                +
0001d5 91a0 028a+LDS R26 , _sen + ( 2 )
                 	__GETB2MN _sen,2
0001d7 e0e4      	LDI  R30,LOW(4)
0001d8 940e 0d8b 	CALL SUBOPT_0x2
                +
0001da 91a0 0289+LDS R26 , _sen + ( 1 )
                 	__GETB2MN _sen,1
0001dc e0e2      	LDI  R30,LOW(2)
0001dd 940e 0d8b 	CALL SUBOPT_0x2
0001df 91a0 0288 	LDS  R26,_sen
0001e1 e0e1      	LDI  R30,LOW(1)
0001e2 9fea      	MUL  R30,R26
0001e3 01f0      	MOVW R30,R0
0001e4 0fe6      	ADD  R30,R22
0001e5 1ff7      	ADC  R31,R23
0001e6 93e0 028f 	STS  _sensor,R30
0001e8 93f0 0290 	STS  _sensor+1,R31
0001ea 9508      	RET
                 ; .FEND
                 ;void cek_sensor()
                 _cek_sensor:
                 ; .FSTART _cek_sensor
                 ;konvert_logic();
0001eb dfb5      	RCALL _konvert_logic
                 ;logika();
0001ec dfd4      	RCALL _logika
0001ed 9508      	RET
                 ; .FEND
                 ;void display_sensor()
                 _display_sensor:
                 ; .FSTART _display_sensor
                 ;konvert_logic();
0001ee dfb2      	RCALL _konvert_logic
                 ;lcd_gotoxy(9, 0);
0001ef e0e9      	LDI  R30,LOW(9)
0001f0 940e 0d90 	CALL SUBOPT_0x3
                 ;sprintf(buff, "%d%d%d%d%d%d%d", sen[0] , sen[1] , sen[2], sen[3], sen[4], sen[5] ...
0001f2 940e 0d94 	CALL SUBOPT_0x4
                +
0001f4 e8e0     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0001f5 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0001f6 93fa      	ST   -Y,R31
0001f7 93ea      	ST   -Y,R30
0001f8 91e0 0288 	LDS  R30,_sen
0001fa 940e 0d99 	CALL SUBOPT_0x5
                +
0001fc 91e0 0289+LDS R30 , _sen + ( 1 )
                 	__GETB1MN _sen,1
0001fe 940e 0d99 	CALL SUBOPT_0x5
                +
000200 91e0 028a+LDS R30 , _sen + ( 2 )
                 	__GETB1MN _sen,2
000202 940e 0d99 	CALL SUBOPT_0x5
                +
000204 91e0 028b+LDS R30 , _sen + ( 3 )
                 	__GETB1MN _sen,3
000206 940e 0d99 	CALL SUBOPT_0x5
                +
000208 91e0 028c+LDS R30 , _sen + ( 4 )
                 	__GETB1MN _sen,4
00020a 940e 0d99 	CALL SUBOPT_0x5
                +
00020c 91e0 028d+LDS R30 , _sen + ( 5 )
                 	__GETB1MN _sen,5
00020e 940e 0d99 	CALL SUBOPT_0x5
                +
000210 91e0 028e+LDS R30 , _sen + ( 6 )
                 	__GETB1MN _sen,6
000212 940e 0d99 	CALL SUBOPT_0x5
000214 e18c      	LDI  R24,28
000215 940e 0c20 	CALL _sprintf
000217 96a0      	ADIW R28,32
                 ;lcd_puts(buff);
000218 c2e1      	RJMP _0x20C000D
                 ; .FEND
                 ;void scan_garis()
                 _scan_garis:
                 ; .FSTART _scan_garis
                 ;for (i = 0; i < 7; i++)
000219 2488      	CLR  R8
00021a 2499      	CLR  R9
                 _0x1F:
00021b 940e 0d76 	CALL SUBOPT_0x0
00021d f4d4      	BRGE _0x20
                 ;garis[i] = read_adc(i);
00021e 940e 0d9f 	CALL SUBOPT_0x6
000220 0fea      	ADD  R30,R26
000221 1ffb      	ADC  R31,R27
000222 93ff      	PUSH R31
000223 93ef      	PUSH R30
000224 2da8      	MOV  R26,R8
000225 df69      	RCALL _read_adc
000226 91af      	POP  R26
000227 91bf      	POP  R27
000228 940e 0da5 	CALL SUBOPT_0x7
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Baca Line");
                +
00022a e8af     +LDI R26 , LOW ( 2 * _0x0 + ( 15 ) )
00022b e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 15 ) )
                 	__POINTW2FN _0x0,15
00022c 940e 0daa 	CALL SUBOPT_0x8
                 ;lcd_gotoxy(0, 1);
                 ;sprintf(buff, "sensor:%d = %d  ", i, garis[i]);
00022e 940e 0db2 	CALL SUBOPT_0x9
000230 940e 0d9f 	CALL SUBOPT_0x6
000232 940e 0dbc 	CALL SUBOPT_0xA
                 ;lcd_puts(buff);
                 ;lampu = 0;
                 ;delay_ms(10);
                 ;lampu = 1;
000234 01f4      	MOVW R30,R8
000235 9631      	ADIW R30,1
000236 014f      	MOVW R8,R30
000237 cfe3      	RJMP _0x1F
                 _0x20:
000238 9508      	RET
                 ; .FEND
                 ;void scan_back()
                 _scan_back:
                 ; .FSTART _scan_back
                 ;for (i = 0; i < 7; i++)
000239 2488      	CLR  R8
00023a 2499      	CLR  R9
                 _0x26:
00023b 940e 0d76 	CALL SUBOPT_0x0
00023d f4d4      	BRGE _0x27
                 ;back[i] = read_adc(i);
00023e 940e 0dd3 	CALL SUBOPT_0xB
000240 0fea      	ADD  R30,R26
000241 1ffb      	ADC  R31,R27
000242 93ff      	PUSH R31
000243 93ef      	PUSH R30
000244 2da8      	MOV  R26,R8
000245 df49      	RCALL _read_adc
000246 91af      	POP  R26
000247 91bf      	POP  R27
000248 940e 0da5 	CALL SUBOPT_0x7
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Baca Background");
                +
00024a eaaa     +LDI R26 , LOW ( 2 * _0x0 + ( 42 ) )
00024b e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 42 ) )
                 	__POINTW2FN _0x0,42
00024c 940e 0daa 	CALL SUBOPT_0x8
                 ;lcd_gotoxy(0, 1);
                 ;sprintf(buff, "sensor:%d = %d  ", i, back[i]);
00024e 940e 0db2 	CALL SUBOPT_0x9
000250 940e 0dd3 	CALL SUBOPT_0xB
000252 940e 0dbc 	CALL SUBOPT_0xA
                 ;lcd_puts(buff);
                 ;lampu = 0;
                 ;delay_ms(10);
                 ;lampu = 1;
000254 01f4      	MOVW R30,R8
000255 9631      	ADIW R30,1
000256 014f      	MOVW R8,R30
000257 cfe3      	RJMP _0x26
                 _0x27:
000258 9508      	RET
                 ; .FEND
                 ;void hit_tengah()
                 _hit_tengah:
                 ; .FSTART _hit_tengah
                 ;for (i = 0; i < 7; i++)
000259 2488      	CLR  R8
00025a 2499      	CLR  R9
                 _0x2D:
00025b 940e 0d76 	CALL SUBOPT_0x0
00025d f00c      	BRLT PC+2
00025e c040      	RJMP _0x2E
                 ;tengah[i] = (back[i] + garis[i]) / 2;
00025f 01f4      	MOVW R30,R8
000260 e1ac      	LDI  R26,LOW(_tengah)
000261 e0b0      	LDI  R27,HIGH(_tengah)
000262 0fee      	LSL  R30
000263 1fff      	ROL  R31
000264 0fea      	ADD  R30,R26
000265 1ffb      	ADC  R31,R27
000266 01bf      	MOVW R22,R30
000267 940e 0dd3 	CALL SUBOPT_0xB
000269 940e 0dd9 	CALL SUBOPT_0xC
00026b 010f      	MOVW R0,R30
00026c 940e 0d9f 	CALL SUBOPT_0x6
00026e 940e 0dd9 	CALL SUBOPT_0xC
000270 01d0      	MOVW R26,R0
000271 0fae      	ADD  R26,R30
000272 1fbf      	ADC  R27,R31
000273 e0e2      	LDI  R30,LOW(2)
000274 e0f0      	LDI  R31,HIGH(2)
000275 940e 0f96 	CALL __DIVW21
000277 01db      	MOVW R26,R22
000278 940e 0fc6 	CALL __EEPROMWRW
                 ;lcd_gotoxy(0, 0);
00027a e0e0      	LDI  R30,LOW(0)
00027b 940e 0d90 	CALL SUBOPT_0x3
                 ;lcd_putsf("Center Point    ");
                +
00027d ebaa     +LDI R26 , LOW ( 2 * _0x0 + ( 58 ) )
00027e e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 58 ) )
                 	__POINTW2FN _0x0,58
00027f 940e 0daa 	CALL SUBOPT_0x8
                 ;lcd_gotoxy(0, 1);
                 ;sprintf(buff, "sensor:%d --> %d  ", i, tengah[i]);
                +
000281 eceb     +LDI R30 , LOW ( 2 * _0x0 + ( 75 ) )
000282 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 75 ) )
                 	__POINTW1FN _0x0,75
000283 93fa      	ST   -Y,R31
000284 93ea      	ST   -Y,R30
000285 01f4      	MOVW R30,R8
000286 940e 0dde 	CALL SUBOPT_0xD
000288 01f4      	MOVW R30,R8
000289 e1ac      	LDI  R26,LOW(_tengah)
00028a e0b0      	LDI  R27,HIGH(_tengah)
00028b 0fee      	LSL  R30
00028c 1fff      	ROL  R31
00028d 940e 0dd9 	CALL SUBOPT_0xC
00028f 940e 0dde 	CALL SUBOPT_0xD
000291 e088      	LDI  R24,8
000292 940e 0c20 	CALL _sprintf
000294 962c      	ADIW R28,12
                 ;lcd_puts(buff);
000295 e6a0      	LDI  R26,LOW(_buff)
000296 e0b2      	LDI  R27,HIGH(_buff)
000297 940e 0d0f 	CALL _lcd_puts
                 ;lampu = 0;
000299 98c3      	CBI  0x18,3
                 ;lampu = 1;
00029a 9ac3      	SBI  0x18,3
00029b 01f4      	MOVW R30,R8
00029c 9631      	ADIW R30,1
00029d 014f      	MOVW R8,R30
00029e cfbc      	RJMP _0x2D
                 _0x2E:
00029f 9508      	RET
                 ; .FEND
                 ;void cekdatasensor()
                 ;for (i = 0; i < 7; i++)
                 ;lcd_gotoxy(0, 0);
                 ;sprintf(buff, " %d  ", garis[i]);
                 ;lcd_puts(buff);
                 ;lcd_gotoxy(10, 0);
                 ;sprintf(buff, " %d  ", back[i]);
                 ;lcd_puts(buff);
                 ;lcd_gotoxy(0, 1);
                 ;sprintf(buff, " %d  ", tengah[i]);
                 ;lcd_puts(buff);
                 ;lcd_gotoxy(10, 1);
                 ;sprintf(buff, " %d  ", read_adc(i));
                 ;lcd_puts(buff);
                 ;delay_ms(200);
                 ;void maju(unsigned char ki, unsigned char ka)
                 ; 0000 0062 {
                 _maju:
                 ; .FSTART _maju
                 ;pwmka = ka;
0002a0 940e 0de3 	CALL SUBOPT_0xE
                 ;	ki -> Y+1
                 ;	ka -> Y+0
                 ;pwmki = ki;
                 ;PORTD.2 = 1;
0002a2 9a92      	SBI  0x12,2
                 ;PORTD.3 = 0;
0002a3 9893      	CBI  0x12,3
                 ;PORTD.6 = 0;
0002a4 9896      	CBI  0x12,6
                 ;PORTD.7 = 1;
0002a5 9a97      	SBI  0x12,7
0002a6 c236      	RJMP _0x20C000E
                 ; .FEND
                 ;void mundur(unsigned char ki, unsigned char ka)
                 _mundur:
                 ; .FSTART _mundur
                 ;pwmka = ka;
0002a7 940e 0de3 	CALL SUBOPT_0xE
                 ;	ki -> Y+1
                 ;	ka -> Y+0
                 ;pwmki = ki;
                 ;PORTD.2 = 0;
0002a9 9892      	CBI  0x12,2
                 ;PORTD.3 = 1;
0002aa 9a93      	SBI  0x12,3
                 ;PORTD.6 = 1;
0002ab 9a96      	SBI  0x12,6
                 ;PORTD.7 = 0;
0002ac 9897      	CBI  0x12,7
0002ad c22f      	RJMP _0x20C000E
                 ; .FEND
                 ;void kanan(unsigned char ki, unsigned char ka)
                 _kanan:
                 ; .FSTART _kanan
                 ;pwmka = ka;
0002ae 940e 0de3 	CALL SUBOPT_0xE
                 ;	ki -> Y+1
                 ;	ka -> Y+0
                 ;pwmki = ki;
                 ;PORTD.2 = 0;
0002b0 9892      	CBI  0x12,2
                 ;PORTD.3 = 1;
0002b1 9a93      	SBI  0x12,3
                 ;PORTD.6 = 0;
0002b2 9896      	CBI  0x12,6
                 ;PORTD.7 = 1;
0002b3 9a97      	SBI  0x12,7
0002b4 c228      	RJMP _0x20C000E
                 ; .FEND
                 ;void kiri(unsigned char ki, unsigned char ka)
                 _kiri:
                 ; .FSTART _kiri
                 ;pwmka = ka;
0002b5 940e 0de3 	CALL SUBOPT_0xE
                 ;	ki -> Y+1
                 ;	ka -> Y+0
                 ;pwmki = ki;
                 ;PORTD.2 = 1;
0002b7 9a92      	SBI  0x12,2
                 ;PORTD.3 = 0;
0002b8 9893      	CBI  0x12,3
                 ;PORTD.6 = 1;
0002b9 9a96      	SBI  0x12,6
                 ;PORTD.7 = 0;
0002ba 9897      	CBI  0x12,7
0002bb c221      	RJMP _0x20C000E
                 ; .FEND
                 ;void setMotor(int ki, int ka)
                 _setMotor:
                 ; .FSTART _setMotor
                 ;if (ki > 0)
0002bc 93ba      	ST   -Y,R27
0002bd 93aa      	ST   -Y,R26
                 ;	ki -> Y+2
                 ;	ka -> Y+0
0002be 81aa      	LDD  R26,Y+2
0002bf 81bb      	LDD  R27,Y+2+1
0002c0 940e 0fdf 	CALL __CPW02
0002c2 f41c      	BRGE _0x56
                 ;PORTD.2 = 1;
0002c3 9a92      	SBI  0x12,2
                 ;PORTD.3 = 0;
0002c4 9893      	CBI  0x12,3
                 ;else
0002c5 c008      	RJMP _0x5B
                 _0x56:
                 ;PORTD.2 = 0;
0002c6 9892      	CBI  0x12,2
                 ;PORTD.3 = 1;
0002c7 9a93      	SBI  0x12,3
                 ;ki = abs(ki);
0002c8 81aa      	LDD  R26,Y+2
0002c9 81bb      	LDD  R27,Y+2+1
0002ca 940e 0c75 	CALL _abs
0002cc 83ea      	STD  Y+2,R30
0002cd 83fb      	STD  Y+2+1,R31
                 _0x5B:
                 ;pwmki = ki;
0002ce 81ea      	LDD  R30,Y+2
0002cf 81fb      	LDD  R31,Y+2+1
0002d0 bdfb      	OUT  0x2A+1,R31
0002d1 bdea      	OUT  0x2A,R30
                 ;if (ka > 0)
0002d2 940e 0ded 	CALL SUBOPT_0xF
0002d4 f41c      	BRGE _0x60
                 ;PORTD.7 = 1;
0002d5 9a97      	SBI  0x12,7
                 ;PORTD.6 = 0;
0002d6 9896      	CBI  0x12,6
                 ;else
0002d7 c008      	RJMP _0x65
                 _0x60:
                 ;PORTD.7 = 0;
0002d8 9897      	CBI  0x12,7
                 ;PORTD.6 = 1;
0002d9 9a96      	SBI  0x12,6
                 ;ka = abs(ka);
0002da 81a8      	LD   R26,Y
0002db 81b9      	LDD  R27,Y+1
0002dc 940e 0c75 	CALL _abs
0002de 83e8      	ST   Y,R30
0002df 83f9      	STD  Y+1,R31
                 _0x65:
                 ;pwmka = ka;
0002e0 81e8      	LD   R30,Y
0002e1 81f9      	LDD  R31,Y+1
0002e2 bdf9      	OUT  0x28+1,R31
0002e3 bde8      	OUT  0x28,R30
0002e4 c1df      	RJMP _0x20C000F
                 ; .FEND
                 ;void rem(int nilai_rem)
                 _rem:
                 ; .FSTART _rem
                 ;PORTD .4 = 1;
0002e5 93ba      	ST   -Y,R27
0002e6 93aa      	ST   -Y,R26
                 ;	nilai_rem -> Y+0
0002e7 9a94      	SBI  0x12,4
                 ;PORTD .5 = 1;
0002e8 9a95      	SBI  0x12,5
                 ;PORTD .2 = 0;
0002e9 9892      	CBI  0x12,2
                 ;PORTD .3 = 0;
0002ea 9893      	CBI  0x12,3
                 ;PORTD .6 = 0;
0002eb 9896      	CBI  0x12,6
                 ;PORTD .7 = 0;
0002ec 9897      	CBI  0x12,7
                 ;delay_ms(nilai_rem);
0002ed 81a8      	LD   R26,Y
0002ee 81b9      	LDD  R27,Y+1
0002ef 940e 10ca 	CALL _delay_ms
0002f1 c1eb      	RJMP _0x20C000E
                 ; .FEND
                 ;void maju_delay(int kec, int lama)
                 _maju_delay:
                 ; .FSTART _maju_delay
                 ;maju(kec, kec);
0002f2 93ba      	ST   -Y,R27
0002f3 93aa      	ST   -Y,R26
                 ;	kec -> Y+2
                 ;	lama -> Y+0
0002f4 81ea      	LDD  R30,Y+2
0002f5 93ea      	ST   -Y,R30
0002f6 81ab      	LDD  R26,Y+3
0002f7 dfa8      	RCALL _maju
                 ;delay(lama);
0002f8 940e 0df2 	CALL SUBOPT_0x10
0002fa c1c9      	RJMP _0x20C000F
                 ; .FEND
                 ;void pilihSpeed(int kec)
                 _pilihSpeed:
                 ; .FSTART _pilihSpeed
                 ;kp = kec * 0.15;
0002fb 93ba      	ST   -Y,R27
0002fc 93aa      	ST   -Y,R26
                 ;	kec -> Y+0
0002fd 940e 0df6 	CALL SUBOPT_0x11
                +
0002ff e9aa     +LDI R26 , LOW ( 0x3E19999A )
000300 e9b9     +LDI R27 , HIGH ( 0x3E19999A )
000301 e189     +LDI R24 , BYTE3 ( 0x3E19999A )
000302 e39e     +LDI R25 , BYTE4 ( 0x3E19999A )
                 	__GETD2N 0x3E19999A
000303 940e 107c 	CALL __MULF12
000305 e9a5      	LDI  R26,LOW(_kp)
000306 e0b2      	LDI  R27,HIGH(_kp)
000307 940e 0dfd 	CALL SUBOPT_0x12
                 ;kd = kec * 0.6;
000309 940e 0df6 	CALL SUBOPT_0x11
                +
00030b e9aa     +LDI R26 , LOW ( 0x3F19999A )
00030c e9b9     +LDI R27 , HIGH ( 0x3F19999A )
00030d e189     +LDI R24 , BYTE3 ( 0x3F19999A )
00030e e39f     +LDI R25 , BYTE4 ( 0x3F19999A )
                 	__GETD2N 0x3F19999A
00030f 940e 107c 	CALL __MULF12
000311 e9a7      	LDI  R26,LOW(_kd)
000312 e0b2      	LDI  R27,HIGH(_kd)
000313 940e 0dfd 	CALL SUBOPT_0x12
                 ;SPEED = kec;
000315 81e8      	LD   R30,Y
000316 81f9      	LDD  R31,Y+1
000317 93e0 0299 	STS  _SPEED,R30
000319 93f0 029a 	STS  _SPEED+1,R31
                 ;MIN_SPEED = -(kec * 0.75);
00031b 940e 0df6 	CALL SUBOPT_0x11
                +
00031d e0a0     +LDI R26 , LOW ( 0x3F400000 )
00031e e0b0     +LDI R27 , HIGH ( 0x3F400000 )
00031f e480     +LDI R24 , BYTE3 ( 0x3F400000 )
000320 e39f     +LDI R25 , BYTE4 ( 0x3F400000 )
                 	__GETD2N 0x3F400000
000321 940e 107c 	CALL __MULF12
000323 940e 0fe3 	CALL __ANEGF1
000325 e9ab      	LDI  R26,LOW(_MIN_SPEED)
000326 e0b2      	LDI  R27,HIGH(_MIN_SPEED)
000327 940e 0dfd 	CALL SUBOPT_0x12
                 ;MAX_SPEED = kec;
000329 81e8      	LD   R30,Y
00032a 81f9      	LDD  R31,Y+1
00032b 93e0 029d 	STS  _MAX_SPEED,R30
00032d 93f0 029e 	STS  _MAX_SPEED+1,R31
00032f c1ad      	RJMP _0x20C000E
                 ; .FEND
                 ;void maju_cari_garis()
                 ;maju(180, 182);
                 ;cek_sensor(); // 0b01000000)!=0b00000000)
                 ;while ((sensor & 0b00000001) != 0b00000000)
                 ;cek_sensor();
                 ;rem(100);
                 ;void parkir()
                 _parkir:
                 ; .FSTART _parkir
                 ;lampu = 0;
000330 98c3      	CBI  0x18,3
                 ;while (1)
                 _0x7B:
                 ;rem(100);
000331 940e 0e02 	CALL SUBOPT_0x13
000333 cffd      	RJMP _0x7B
                 ; .FEND
                 ;void scan(int kec)
                 _scan:
                 ; .FSTART _scan
                 ;int rateError;
                 ;int moveVal, moveLeft, moveRight;
                 ;pilihSpeed(kec);
000334 93ba      	ST   -Y,R27
000335 93aa      	ST   -Y,R26
000336 9722      	SBIW R28,2
000337 940e 0f53 	CALL __SAVELOCR6
                 ;	kec -> Y+8
                 ;	rateError -> R16,R17
                 ;	moveVal -> R18,R19
                 ;	moveLeft -> R20,R21
                 ;	moveRight -> Y+6
000339 85a8      	LDD  R26,Y+8
00033a 85b9      	LDD  R27,Y+8+1
00033b dfbf      	RCALL _pilihSpeed
                 ;sensor = sensor & 0b01111111;
00033c 940e 0e06 	CALL SUBOPT_0x14
00033e 77ef      	ANDI R30,LOW(0x7F)
00033f 70f0      	ANDI R31,HIGH(0x7F)
000340 93e0 028f 	STS  _sensor,R30
000342 93f0 0290 	STS  _sensor+1,R31
                 ;switch (sensor) //  1=kiri 8=kanan
000344 940e 0e06 	CALL SUBOPT_0x14
                 ;{               //  7......1
                 ;case 0b00000001:
000346 30e1      	CPI  R30,LOW(0x1)
000347 e0a0      	LDI  R26,HIGH(0x1)
000348 07fa      	CPC  R31,R26
000349 f419      	BRNE _0x81
                 ;error = -6;
00034a efea      	LDI  R30,LOW(65530)
00034b efff      	LDI  R31,HIGH(65530)
00034c c056      	RJMP _0x17E
                 ;break; // DOMINAN KANAN
                 ;case 0b00000011:
                 _0x81:
00034d 30e3      	CPI  R30,LOW(0x3)
00034e e0a0      	LDI  R26,HIGH(0x3)
00034f 07fa      	CPC  R31,R26
000350 f419      	BRNE _0x82
                 ;error = -5;
000351 efeb      	LDI  R30,LOW(65531)
000352 efff      	LDI  R31,HIGH(65531)
000353 c04f      	RJMP _0x17E
                 ;break;
                 ;case 0b00000010:
                 _0x82:
000354 30e2      	CPI  R30,LOW(0x2)
000355 e0a0      	LDI  R26,HIGH(0x2)
000356 07fa      	CPC  R31,R26
000357 f419      	BRNE _0x83
                 ;error = -4;
000358 efec      	LDI  R30,LOW(65532)
000359 efff      	LDI  R31,HIGH(65532)
00035a c048      	RJMP _0x17E
                 ;break;
                 ;case 0b00000110:
                 _0x83:
00035b 30e6      	CPI  R30,LOW(0x6)
00035c e0a0      	LDI  R26,HIGH(0x6)
00035d 07fa      	CPC  R31,R26
00035e f419      	BRNE _0x84
                 ;error = -3;
00035f efed      	LDI  R30,LOW(65533)
000360 efff      	LDI  R31,HIGH(65533)
000361 c041      	RJMP _0x17E
                 ;break;
                 ;case 0b00000100:
                 _0x84:
000362 30e4      	CPI  R30,LOW(0x4)
000363 e0a0      	LDI  R26,HIGH(0x4)
000364 07fa      	CPC  R31,R26
000365 f419      	BRNE _0x85
                 ;error = -2;
000366 efee      	LDI  R30,LOW(65534)
000367 efff      	LDI  R31,HIGH(65534)
000368 c03a      	RJMP _0x17E
                 ;break;
                 ;case 0b00001100:
                 _0x85:
000369 30ec      	CPI  R30,LOW(0xC)
00036a e0a0      	LDI  R26,HIGH(0xC)
00036b 07fa      	CPC  R31,R26
00036c f419      	BRNE _0x86
                 ;error = -1;
00036d efef      	LDI  R30,LOW(65535)
00036e efff      	LDI  R31,HIGH(65535)
00036f c033      	RJMP _0x17E
                 ;break;
                 ;case 0b00001000:
                 _0x86:
000370 30e8      	CPI  R30,LOW(0x8)
000371 e0a0      	LDI  R26,HIGH(0x8)
000372 07fa      	CPC  R31,R26
000373 f431      	BRNE _0x87
                 ;error = 0;
000374 e0e0      	LDI  R30,LOW(0)
000375 93e0 0291 	STS  _error,R30
000377 93e0 0292 	STS  _error+1,R30
                 ;break;
000379 c02d      	RJMP _0x80
                 ;case 0b00011000:
                 _0x87:
00037a 31e8      	CPI  R30,LOW(0x18)
00037b e0a0      	LDI  R26,HIGH(0x18)
00037c 07fa      	CPC  R31,R26
00037d f419      	BRNE _0x88
                 ;error = 1;
00037e e0e1      	LDI  R30,LOW(1)
00037f e0f0      	LDI  R31,HIGH(1)
000380 c022      	RJMP _0x17E
                 ;break;
                 ;case 0b00010000:
                 _0x88:
000381 31e0      	CPI  R30,LOW(0x10)
000382 e0a0      	LDI  R26,HIGH(0x10)
000383 07fa      	CPC  R31,R26
000384 f419      	BRNE _0x89
                 ;error = 2;
000385 e0e2      	LDI  R30,LOW(2)
000386 e0f0      	LDI  R31,HIGH(2)
000387 c01b      	RJMP _0x17E
                 ;break;
                 ;case 0b00110000:
                 _0x89:
000388 33e0      	CPI  R30,LOW(0x30)
000389 e0a0      	LDI  R26,HIGH(0x30)
00038a 07fa      	CPC  R31,R26
00038b f419      	BRNE _0x8A
                 ;error = 3;
00038c e0e3      	LDI  R30,LOW(3)
00038d e0f0      	LDI  R31,HIGH(3)
00038e c014      	RJMP _0x17E
                 ;break;
                 ;case 0b00100000:
                 _0x8A:
00038f 32e0      	CPI  R30,LOW(0x20)
000390 e0a0      	LDI  R26,HIGH(0x20)
000391 07fa      	CPC  R31,R26
000392 f419      	BRNE _0x8B
                 ;error = 4;
000393 e0e4      	LDI  R30,LOW(4)
000394 e0f0      	LDI  R31,HIGH(4)
000395 c00d      	RJMP _0x17E
                 ;break;
                 ;case 0b01100000:
                 _0x8B:
000396 36e0      	CPI  R30,LOW(0x60)
000397 e0a0      	LDI  R26,HIGH(0x60)
000398 07fa      	CPC  R31,R26
000399 f419      	BRNE _0x8C
                 ;error = 5;
00039a e0e5      	LDI  R30,LOW(5)
00039b e0f0      	LDI  R31,HIGH(5)
00039c c006      	RJMP _0x17E
                 ;break;
                 ;case 0b01000000:
                 _0x8C:
00039d 34e0      	CPI  R30,LOW(0x40)
00039e e0a0      	LDI  R26,HIGH(0x40)
00039f 07fa      	CPC  R31,R26
0003a0 f431      	BRNE _0x80
                 ;error = 6;
0003a1 e0e6      	LDI  R30,LOW(6)
0003a2 e0f0      	LDI  R31,HIGH(6)
                 _0x17E:
0003a3 93e0 0291 	STS  _error,R30
0003a5 93f0 0292 	STS  _error+1,R31
                 ;break; // DOMINAN KIRI
                 _0x80:
                 ;rateError = error - lastError;
0003a7 91a0 0293 	LDS  R26,_lastError
0003a9 91b0 0294 	LDS  R27,_lastError+1
0003ab 91e0 0291 	LDS  R30,_error
0003ad 91f0 0292 	LDS  R31,_error+1
0003af 1bea      	SUB  R30,R26
0003b0 0bfb      	SBC  R31,R27
0003b1 018f      	MOVW R16,R30
                 ;lastError = error;
0003b2 91e0 0291 	LDS  R30,_error
0003b4 91f0 0292 	LDS  R31,_error+1
0003b6 93e0 0293 	STS  _lastError,R30
0003b8 93f0 0294 	STS  _lastError+1,R31
                 ;moveVal = (int)(error * kp) + (rateError * kd);
0003ba 91e0 0295 	LDS  R30,_kp
0003bc 91f0 0296 	LDS  R31,_kp+1
0003be 91a0 0291 	LDS  R26,_error
0003c0 91b0 0292 	LDS  R27,_error+1
0003c2 940e 0f7e 	CALL __MULW12
0003c4 01bf      	MOVW R22,R30
0003c5 91e0 0297 	LDS  R30,_kd
0003c7 91f0 0298 	LDS  R31,_kd+1
0003c9 01d8      	MOVW R26,R16
0003ca 940e 0f7e 	CALL __MULW12
0003cc 0fe6      	ADD  R30,R22
0003cd 1ff7      	ADC  R31,R23
0003ce 019f      	MOVW R18,R30
                 ;moveLeft = SPEED + moveVal;
0003cf 91a0 0299 	LDS  R26,_SPEED
0003d1 91b0 029a 	LDS  R27,_SPEED+1
0003d3 0fea      	ADD  R30,R26
0003d4 1ffb      	ADC  R31,R27
0003d5 01af      	MOVW R20,R30
                 ;moveRight = SPEED - moveVal;
0003d6 91e0 0299 	LDS  R30,_SPEED
0003d8 91f0 029a 	LDS  R31,_SPEED+1
0003da 1be2      	SUB  R30,R18
0003db 0bf3      	SBC  R31,R19
0003dc 83ee      	STD  Y+6,R30
0003dd 83ff      	STD  Y+6+1,R31
                 ;if (moveLeft > MAX_SPEED)
0003de 940e 0e0b 	CALL SUBOPT_0x15
0003e0 17e4      	CP   R30,R20
0003e1 07f5      	CPC  R31,R21
0003e2 f424      	BRGE _0x8E
                 ;moveLeft = MAX_SPEED;
                +
0003e3 9140 029d+LDS R20 , 0 + ( _MAX_SPEED )
0003e5 9150 029e+LDS R21 , 0 + ( _MAX_SPEED ) + 1
                 	__GETWRMN 20,21,0,_MAX_SPEED
                 ;if (moveLeft < MIN_SPEED)
                 _0x8E:
0003e7 940e 0e10 	CALL SUBOPT_0x16
0003e9 174e      	CP   R20,R30
0003ea 075f      	CPC  R21,R31
0003eb f424      	BRGE _0x8F
                 ;moveLeft = MIN_SPEED;
                +
0003ec 9140 029b+LDS R20 , 0 + ( _MIN_SPEED )
0003ee 9150 029c+LDS R21 , 0 + ( _MIN_SPEED ) + 1
                 	__GETWRMN 20,21,0,_MIN_SPEED
                 ;if (moveRight > MAX_SPEED)
                 _0x8F:
0003f0 940e 0e0b 	CALL SUBOPT_0x15
0003f2 81ae      	LDD  R26,Y+6
0003f3 81bf      	LDD  R27,Y+6+1
0003f4 17ea      	CP   R30,R26
0003f5 07fb      	CPC  R31,R27
0003f6 f424      	BRGE _0x90
                 ;moveRight = MAX_SPEED;
0003f7 940e 0e0b 	CALL SUBOPT_0x15
0003f9 83ee      	STD  Y+6,R30
0003fa 83ff      	STD  Y+6+1,R31
                 ;if (moveRight < MIN_SPEED)
                 _0x90:
0003fb 940e 0e10 	CALL SUBOPT_0x16
0003fd 81ae      	LDD  R26,Y+6
0003fe 81bf      	LDD  R27,Y+6+1
0003ff 17ae      	CP   R26,R30
000400 07bf      	CPC  R27,R31
000401 f424      	BRGE _0x91
                 ;moveRight = MIN_SPEED;
000402 940e 0e10 	CALL SUBOPT_0x16
000404 83ee      	STD  Y+6,R30
000405 83ff      	STD  Y+6+1,R31
                 ;setMotor(moveLeft, moveRight);
                 _0x91:
000406 935a      	ST   -Y,R21
000407 934a      	ST   -Y,R20
000408 85a8      	LDD  R26,Y+8
000409 85b9      	LDD  R27,Y+8+1
00040a deb1      	RCALL _setMotor
00040b 940e 0f5a 	CALL __LOADLOCR6
00040d 962a      	ADIW R28,10
00040e 9508      	RET
                 ; .FEND
                 ;void scanX(int brpkali, int kec)
                 _scanX:
                 ; .FSTART _scanX
                 ;while (hitung < brpkali)
00040f 93ba      	ST   -Y,R27
000410 93aa      	ST   -Y,R26
                 ;	brpkali -> Y+2
                 ;	kec -> Y+0
                 _0x92:
000411 81ea      	LDD  R30,Y+2
000412 81fb      	LDD  R31,Y+2+1
000413 164e      	CP   R4,R30
000414 065f      	CPC  R5,R31
000415 f4d4      	BRGE _0x94
                 ;while ((sensor & 0b00011100) != 0b00011100)
                 _0x95:
000416 940e 0e15 	CALL SUBOPT_0x17
000418 f029      	BREQ _0x97
                 ;cek_sensor();
000419 ddd1      	RCALL _cek_sensor
                 ;scan(kec);
00041a 81a8      	LD   R26,Y
00041b 81b9      	LDD  R27,Y+1
00041c df17      	RCALL _scan
00041d cff8      	RJMP _0x95
                 _0x97:
                 ;while ((sensor & 0b00011100) == 0b00011100)
                 _0x98:
00041e 940e 0e15 	CALL SUBOPT_0x17
000420 f471      	BRNE _0x9A
                 ;cek_sensor();
000421 ddc9      	RCALL _cek_sensor
                 ;lampu = 0;
000422 98c3      	CBI  0x18,3
                 ;scan(kec);
000423 81a8      	LD   R26,Y
000424 81b9      	LDD  R27,Y+1
000425 df0e      	RCALL _scan
                 ;if ((sensor & 0b00011100) != 0b00011100)
000426 940e 0e15 	CALL SUBOPT_0x17
000428 f029      	BREQ _0x9D
                 ;hitung++;
000429 01f2      	MOVW R30,R4
00042a 9631      	ADIW R30,1
00042b 012f      	MOVW R4,R30
00042c 9731      	SBIW R30,1
                 ;lampu = 1;
00042d 9ac3      	SBI  0x18,3
                 ;};
                 _0x9D:
00042e cfef      	RJMP _0x98
                 _0x9A:
                 ;};
00042f cfe1      	RJMP _0x92
                 _0x94:
                 ;hitung = 0;
000430 2444      	CLR  R4
000431 2455      	CLR  R5
000432 c091      	RJMP _0x20C000F
                 ; .FEND
                 ;void scanTimer(int countGoal, int kec, int lama)
                 _scanTimer:
                 ; .FSTART _scanTimer
                 ;count = 0;
000433 93ba      	ST   -Y,R27
000434 93aa      	ST   -Y,R26
                 ;	countGoal -> Y+4
                 ;	kec -> Y+2
                 ;	lama -> Y+0
000435 e0e0      	LDI  R30,LOW(0)
000436 93e0 029f 	STS  _count,R30
000438 93e0 02a0 	STS  _count+1,R30
                 ;while (count < countGoal)
                 _0xA0:
00043a 81ec      	LDD  R30,Y+4
00043b 81fd      	LDD  R31,Y+4+1
00043c 91a0 029f 	LDS  R26,_count
00043e 91b0 02a0 	LDS  R27,_count+1
000440 17ae      	CP   R26,R30
000441 07bf      	CPC  R27,R31
000442 f43c      	BRGE _0xA2
                 ;cek_sensor();
000443 940e 0e19 	CALL SUBOPT_0x18
                 ;scan(kec);
                 ;count++;
000445 e9af      	LDI  R26,LOW(_count)
000446 e0b2      	LDI  R27,HIGH(_count)
000447 940e 0e1f 	CALL SUBOPT_0x19
000449 cff0      	RJMP _0xA0
                 _0xA2:
                 ;rem(lama);
00044a 940e 0e25 	CALL SUBOPT_0x1A
00044c c020      	RJMP _0x20C0010
                 ; .FEND
                 ;void scanKotak(int brpkali, int kec, int lama_rem) {
                 _scanKotak:
                 ; .FSTART _scanKotak
                 ;while (hitung < brpkali) {
00044d 93ba      	ST   -Y,R27
00044e 93aa      	ST   -Y,R26
                 ;	brpkali -> Y+4
                 ;	kec -> Y+2
                 ;	lama_rem -> Y+0
                 _0xA3:
00044f 81ec      	LDD  R30,Y+4
000450 81fd      	LDD  R31,Y+4+1
000451 164e      	CP   R4,R30
000452 065f      	CPC  R5,R31
000453 f4bc      	BRGE _0xA5
                 ;while(1)
                 _0xA6:
                 ;cek_sensor();
000454 940e 0e19 	CALL SUBOPT_0x18
                 ;scan(kec);
                 ;if((sensor & 0b01111111) == 0b01111111) {
000456 940e 0e06 	CALL SUBOPT_0x14
000458 77ef      	ANDI R30,0x7F
000459 37ef      	CPI  R30,LOW(0x7F)
00045a f471      	BRNE _0xA9
                 ;hitung++; mundur(kec, kec); delay(lama_rem); rem(10); break;
00045b 01f2      	MOVW R30,R4
00045c 9631      	ADIW R30,1
00045d 012f      	MOVW R4,R30
00045e 9731      	SBIW R30,1
00045f 81ea      	LDD  R30,Y+2
000460 93ea      	ST   -Y,R30
000461 81ab      	LDD  R26,Y+3
000462 de44      	RCALL _mundur
000463 940e 0df2 	CALL SUBOPT_0x10
000465 e0aa      	LDI  R26,LOW(10)
000466 e0b0      	LDI  R27,0
000467 de7d      	RCALL _rem
000468 c001      	RJMP _0xA8
                 _0xA9:
000469 cfea      	RJMP _0xA6
                 _0xA8:
00046a cfe4      	RJMP _0xA3
                 _0xA5:
                 ;hitung = 0;
00046b 2444      	CLR  R4
00046c 2455      	CLR  R5
                 _0x20C0010:
00046d 9626      	ADIW R28,6
00046e 9508      	RET
                 ; .FEND
                 ;void scanTka(int brpkali)
                 ;while (hitung < brpkali)
                 ;	brpkali -> Y+0
                 ;cek_sensor();
                 ;while ((sensor & 0b01110000) != 0b01110000) // kanan
                 ;cek_sensor();
                 ;scan(170);
                 ;while ((sensor & 0b01110000) == 0b01110000)
                 ;cek_sensor();
                 ;scan(170);
                 ;if ((sensor & 0b01110000) != 0b01110000)
                 ;hitung++;
                 ;lcd_kedip(1);
                 ;};
                 ;};
                 ;hitung = 0;
                 ;void scanTki(int brpkali)
                 ;while (hitung < brpkali)
                 ;	brpkali -> Y+0
                 ;cek_sensor();
                 ;while ((sensor & 0b00000111) != 0b00000111) // kanan
                 ;cek_sensor();
                 ;scan(170);
                 ;while ((sensor & 0b00000111) == 0b00000111)
                 ;cek_sensor();
                 ;scan(170);
                 ;if ((sensor & 0b00000111) != 0b00000111)
                 ;hitung++;
                 ;lcd_kedip(1);
                 ;};
                 ;};
                 ;hitung = 0;
                 ;void scan7ki()
                 ;cek_sensor();
                 ;while ((sensor & 0b01000000) != 0b01000000)
                 ;cek_sensor();
                 ;scan(170);
                 ;void scan7ka()
                 ;cek_sensor();
                 ;while ((sensor & 0b01000000) != 0b00000000)
                 ;cek_sensor();
                 ;scan(170);
                 ;void scan7ki2()
                 ;cek_sensor();
                 ;while (sensor == 0b00000000) // sensor !=0b00111111||0b00000011|| 0b00000001
                 ;cek_sensor();
                 ;scan(170);
                 ;void belki(int kec, int lama)
                 _belki:
                 ; .FSTART _belki
                 ;cek_sensor();
00046f 93ba      	ST   -Y,R27
000470 93aa      	ST   -Y,R26
                 ;	kec -> Y+2
                 ;	lama -> Y+0
000471 dd79      	RCALL _cek_sensor
                 ;while (sen[0] || sen[1])
                 _0xC7:
000472 91e0 0288 	LDS  R30,_sen
000474 30e0      	CPI  R30,0
000475 f421      	BRNE _0xCA
                +
000476 91e0 0289+LDS R30 , _sen + ( 1 )
                 	__GETB1MN _sen,1
000478 30e0      	CPI  R30,0
000479 f019      	BREQ _0xC9
                 _0xCA:
                 ;kiri(kec, kec);
00047a 940e 0e29 	CALL SUBOPT_0x1B
                 ;cek_sensor();
00047c cff5      	RJMP _0xC7
                 _0xC9:
                 ;while (!sen[0] && !sen[1])
                 _0xCC:
00047d 91e0 0288 	LDS  R30,_sen
00047f 30e0      	CPI  R30,0
000480 f421      	BRNE _0xCF
                +
000481 91e0 0289+LDS R30 , _sen + ( 1 )
                 	__GETB1MN _sen,1
000483 30e0      	CPI  R30,0
000484 f009      	BREQ _0xD0
                 _0xCF:
000485 c003      	RJMP _0xCE
                 _0xD0:
                 ;kiri(kec, kec);
000486 940e 0e29 	CALL SUBOPT_0x1B
                 ;cek_sensor();
000488 cff4      	RJMP _0xCC
                 _0xCE:
                 ;if (lama > 0)
000489 940e 0ded 	CALL SUBOPT_0xF
00048b f414      	BRGE _0xD1
                 ;rem(lama);
00048c 940e 0e25 	CALL SUBOPT_0x1A
                 _0xD1:
00048e c035      	RJMP _0x20C000F
                 ; .FEND
                 ;void belki2()
                 ;cek_sensor();
                 ;while ((sensor & 0b00000001) != 0b00000000)
                 ;cek_sensor();
                 ;kiri(150, 150);
                 ;void belka(int kec, int lama)
                 _belka:
                 ; .FSTART _belka
                 ;cek_sensor();
00048f 93ba      	ST   -Y,R27
000490 93aa      	ST   -Y,R26
                 ;	kec -> Y+2
                 ;	lama -> Y+0
000491 dd59      	RCALL _cek_sensor
                 ;while (sen[5] || sen[6])
                 _0xD5:
                +
000492 91e0 028d+LDS R30 , _sen + ( 5 )
                 	__GETB1MN _sen,5
000494 30e0      	CPI  R30,0
000495 f421      	BRNE _0xD8
                +
000496 91e0 028e+LDS R30 , _sen + ( 6 )
                 	__GETB1MN _sen,6
000498 30e0      	CPI  R30,0
000499 f019      	BREQ _0xD7
                 _0xD8:
                 ;kanan(kec, kec);
00049a 940e 0e30 	CALL SUBOPT_0x1C
                 ;cek_sensor();
00049c cff5      	RJMP _0xD5
                 _0xD7:
                 ;while (!sen[5] && !sen[6])
                 _0xDA:
                +
00049d 91e0 028d+LDS R30 , _sen + ( 5 )
                 	__GETB1MN _sen,5
00049f 30e0      	CPI  R30,0
0004a0 f421      	BRNE _0xDD
                +
0004a1 91e0 028e+LDS R30 , _sen + ( 6 )
                 	__GETB1MN _sen,6
0004a3 30e0      	CPI  R30,0
0004a4 f009      	BREQ _0xDE
                 _0xDD:
0004a5 c003      	RJMP _0xDC
                 _0xDE:
                 ;kanan(kec, kec);
0004a6 940e 0e30 	CALL SUBOPT_0x1C
                 ;cek_sensor();
0004a8 cff4      	RJMP _0xDA
                 _0xDC:
                 ;if (lama > 0)
0004a9 940e 0ded 	CALL SUBOPT_0xF
0004ab f414      	BRGE _0xDF
                 ;rem(lama);
0004ac 940e 0e25 	CALL SUBOPT_0x1A
                 _0xDF:
0004ae c015      	RJMP _0x20C000F
                 ; .FEND
                 ;void belkacenter()
                 ;cek_sensor();
                 ;while ((sensor & 0b00001000) != 0b00001000)
                 ;cek_sensor();
                 ;kanan(180, 180);
                 ;if ((sensor & 0b10000000) == 0b10000000)
                 ;lcd_kedip(1);
                 ;void scan_delay(int ms)
                 ;k = 0;
                 ;	ms -> Y+0
                 ;maju(172, 170);
                 ;while (k < ms / 10)
                 ;delay_ms(10);
                 ;k++;
                 ;cek_sensor();
                 ;scan(180);
                 ;void belokKanan(int kec, int lama_rem) {
                 _belokKanan:
                 ; .FSTART _belokKanan
                 ;if(mapMirror == 0) {
0004af 940e 0e37 	CALL SUBOPT_0x1D
                 ;	kec -> Y+2
                 ;	lama_rem -> Y+0
0004b1 f421      	BRNE _0xE7
                 ;belka(kec, lama_rem);
0004b2 940e 0e3f 	CALL SUBOPT_0x1E
0004b4 dfda      	RCALL _belka
                 ;} else {
0004b5 c003      	RJMP _0xE8
                 _0xE7:
                 ;belki(kec, lama_rem);
0004b6 940e 0e3f 	CALL SUBOPT_0x1E
0004b8 dfb6      	RCALL _belki
                 _0xE8:
0004b9 c00a      	RJMP _0x20C000F
                 ; .FEND
                 ;void belokKiri(int kec, int lama_rem) {
                 _belokKiri:
                 ; .FSTART _belokKiri
                 ;if(mapMirror == 0) {
0004ba 940e 0e37 	CALL SUBOPT_0x1D
                 ;	kec -> Y+2
                 ;	lama_rem -> Y+0
0004bc f421      	BRNE _0xE9
                 ;belki(kec, lama_rem);
0004bd 940e 0e3f 	CALL SUBOPT_0x1E
0004bf dfaf      	RCALL _belki
                 ;} else {
0004c0 c003      	RJMP _0xEA
                 _0xE9:
                 ;belka(kec, lama_rem);
0004c1 940e 0e3f 	CALL SUBOPT_0x1E
0004c3 dfcb      	RCALL _belka
                 _0xEA:
                 _0x20C000F:
0004c4 9624      	ADIW R28,4
0004c5 9508      	RET
                 ; .FEND
                 ;void griper()
                 ; 0000 0064 {
                 ;capit_lepas;
                 ;lengan_tengah;
                 ;delay_ms(5000);
                 ;lengan_bawah;
                 ;delay_ms(5000);
                 ;capit_ambil;
                 ;delay_ms(7000);
                 ;lengan_atas;
                 ;delay_ms(5000);
                 ;lengan_bawah;
                 ;delay_ms(5000);
                 ;capit_lepas;
                 ;void ambil(int lama)
                 _ambil:
                 ; .FSTART _ambil
                 ;capit_ambil;
0004c6 93ba      	ST   -Y,R27
0004c7 93aa      	ST   -Y,R26
                 ;	lama -> Y+0
0004c8 eeed      	LDI  R30,LOW(237)
0004c9 2ede      	MOV  R13,R30
                 ;delay(lama);
0004ca 940e 0df2 	CALL SUBOPT_0x10
                 ;lengan_atas;
0004cc eeea      	LDI  R30,LOW(234)
0004cd 2ece      	MOV  R12,R30
                 ;delay(lama);
0004ce 940e 0df2 	CALL SUBOPT_0x10
0004d0 c00c      	RJMP _0x20C000E
                 ; .FEND
                 ;void taruh(int lama)
                 _taruh:
                 ; .FSTART _taruh
                 ;lengan_bawah;
0004d1 93ba      	ST   -Y,R27
0004d2 93aa      	ST   -Y,R26
                 ;	lama -> Y+0
0004d3 efe0      	LDI  R30,LOW(240)
0004d4 2ece      	MOV  R12,R30
                 ;delay(lama);
0004d5 940e 0df2 	CALL SUBOPT_0x10
                 ;capit_lepas;
0004d7 eee6      	LDI  R30,LOW(230)
0004d8 2ede      	MOV  R13,R30
                 ;delay(lama);
0004d9 940e 0df2 	CALL SUBOPT_0x10
                 ;lengan_atas;
0004db eeea      	LDI  R30,LOW(234)
0004dc 2ece      	MOV  R12,R30
                 _0x20C000E:
0004dd 9622      	ADIW R28,2
0004de 9508      	RET
                 ; .FEND
                 ;void bawah_lepas()
                 _bawah_lepas:
                 ; .FSTART _bawah_lepas
                 ;lengan_bawah;
0004df efe0      	LDI  R30,LOW(240)
0004e0 2ece      	MOV  R12,R30
                 ;capit_lepas;
0004e1 eee6      	LDI  R30,LOW(230)
0004e2 2ede      	MOV  R13,R30
0004e3 9508      	RET
                 ; .FEND
                 ;void atas_lepas()
                 ;lengan_atas;
                 ;capit_lepas;
                 ;void bacawarna()
                 ; 0000 0065 {
                 _bacawarna:
                 ; .FSTART _bacawarna
                 ;nadc7 = read_adc(7);
0004e4 e0a7      	LDI  R26,LOW(7)
0004e5 dca9      	RCALL _read_adc
0004e6 2e6e      	MOV  R6,R30
0004e7 2477      	CLR  R7
                 ;lcd_gotoxy(13, 1);
0004e8 e0ed      	LDI  R30,LOW(13)
0004e9 940e 0e46 	CALL SUBOPT_0x1F
                 ;sprintf(buff, "%d   ", nadc7);
0004eb 940e 0d94 	CALL SUBOPT_0x4
                +
0004ed edee     +LDI R30 , LOW ( 2 * _0x0 + ( 94 ) )
0004ee e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 94 ) )
                 	__POINTW1FN _0x0,94
0004ef 93fa      	ST   -Y,R31
0004f0 93ea      	ST   -Y,R30
0004f1 01f3      	MOVW R30,R6
0004f2 2766      	CLR  R22
0004f3 2777      	CLR  R23
0004f4 940e 0fb1 	CALL __PUTPARD1
0004f6 e084      	LDI  R24,4
0004f7 940e 0c20 	CALL _sprintf
0004f9 9628      	ADIW R28,8
                 ;lcd_puts(buff);
                 _0x20C000D:
0004fa e6a0      	LDI  R26,LOW(_buff)
0004fb e0b2      	LDI  R27,HIGH(_buff)
0004fc 940e 0d0f 	CALL _lcd_puts
0004fe 9508      	RET
                 ; .FEND
                 ;int checkWarna() {
                 _checkWarna:
                 ; .FSTART _checkWarna
                 ;int warna;
                 ;nadc7 = read_adc(7);
0004ff 931a      	ST   -Y,R17
000500 930a      	ST   -Y,R16
                 ;	warna -> R16,R17
000501 e0a7      	LDI  R26,LOW(7)
000502 dc8c      	RCALL _read_adc
000503 2e6e      	MOV  R6,R30
000504 2477      	CLR  R7
                 ;if(nadc7>minMerah && nadc7<maxMerah){
000505 91e0 02b1 	LDS  R30,_minMerah
000507 91f0 02b2 	LDS  R31,_minMerah+1
000509 15e6      	CP   R30,R6
00050a 05f7      	CPC  R31,R7
00050b f438      	BRSH _0xEC
00050c 91e0 02ab 	LDS  R30,_maxMerah
00050e 91f0 02ac 	LDS  R31,_maxMerah+1
000510 166e      	CP   R6,R30
000511 067f      	CPC  R7,R31
000512 f008      	BRLO _0xED
                 _0xEC:
000513 c003      	RJMP _0xEB
                 _0xED:
                 ;warna = 0;
                +
000514 e000     +LDI R16 , LOW ( 0 )
000515 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ;else if(nadc7>minKuning && nadc7<maxKuning){
000516 c026      	RJMP _0xEE
                 _0xEB:
000517 91e0 02af 	LDS  R30,_minKuning
000519 91f0 02b0 	LDS  R31,_minKuning+1
00051b 15e6      	CP   R30,R6
00051c 05f7      	CPC  R31,R7
00051d f438      	BRSH _0xF0
00051e 91e0 02a9 	LDS  R30,_maxKuning
000520 91f0 02aa 	LDS  R31,_maxKuning+1
000522 166e      	CP   R6,R30
000523 067f      	CPC  R7,R31
000524 f008      	BRLO _0xF1
                 _0xF0:
000525 c003      	RJMP _0xEF
                 _0xF1:
                 ;warna = 1;
                +
000526 e001     +LDI R16 , LOW ( 1 )
000527 e010     +LDI R17 , HIGH ( 1 )
                 	__GETWRN 16,17,1
                 ;else if(nadc7>minHijau && nadc7<maxHijau){
000528 c014      	RJMP _0xF2
                 _0xEF:
000529 91e0 02ad 	LDS  R30,_minHijau
00052b 91f0 02ae 	LDS  R31,_minHijau+1
00052d 15e6      	CP   R30,R6
00052e 05f7      	CPC  R31,R7
00052f f438      	BRSH _0xF4
000530 91e0 02a7 	LDS  R30,_maxHijau
000532 91f0 02a8 	LDS  R31,_maxHijau+1
000534 166e      	CP   R6,R30
000535 067f      	CPC  R7,R31
000536 f008      	BRLO _0xF5
                 _0xF4:
000537 c003      	RJMP _0xF3
                 _0xF5:
                 ;warna = 2;
                +
000538 e002     +LDI R16 , LOW ( 2 )
000539 e010     +LDI R17 , HIGH ( 2 )
                 	__GETWRN 16,17,2
                 ;}else{
00053a c002      	RJMP _0xF6
                 _0xF3:
                 ;warna = 3;
                +
00053b e003     +LDI R16 , LOW ( 3 )
00053c e010     +LDI R17 , HIGH ( 3 )
                 	__GETWRN 16,17,3
                 _0xF6:
                 _0xF2:
                 _0xEE:
                 ;return warna;
00053d 01f8      	MOVW R30,R16
00053e 9109      	LD   R16,Y+
00053f 9119      	LD   R17,Y+
000540 9508      	RET
                 ; .FEND
                 ;int isWarna;
                 ;void balikKiri(void);
                 ;void fromBtoGreen()
                 ; 0000 0066 {
                 _fromBtoGreen:
                 ; .FSTART _fromBtoGreen
                 ;scanX(2, 120);
000541 940e 0e4a 	CALL SUBOPT_0x20
000543 940e 0e4f 	CALL SUBOPT_0x21
                 ;scanX(1, 100);
000545 940e 0e53 	CALL SUBOPT_0x22
000547 940e 0e58 	CALL SUBOPT_0x23
                 ;delay(15); scanKotak(1, 90, 5);
000549 940e 0e5c 	CALL SUBOPT_0x24
00054b 940e 0e61 	CALL SUBOPT_0x25
                 ;taruh(20);
                 ;mundur(100, 100); delay(38);
                 ;belokKiri(100, 20);
00054d 940e 0e7b 	CALL SUBOPT_0x26
                 ;scanX(2, 100);
00054f 940e 0e58 	CALL SUBOPT_0x23
                 ;belokKiri(100, 20);
000551 940e 0e80 	CALL SUBOPT_0x27
000553 940e 0e7b 	CALL SUBOPT_0x26
                 ;scanX(2, 120);
000555 940e 0e4f 	CALL SUBOPT_0x21
                 ;bawah_lepas();
000557 940e 0e85 	CALL SUBOPT_0x28
                 ;scanX(1, 90);
000559 e5aa      	LDI  R26,LOW(90)
00055a c0e6      	RJMP _0x20C000C
                 ;scanTimer(33, 80, 50);
                 ;ambil(20);
                 ; .FEND
                 ;void fromBtoYellow()
                 _fromBtoYellow:
                 ; .FSTART _fromBtoYellow
                 ;scanX(1, 100);
00055b 940e 0e53 	CALL SUBOPT_0x22
00055d 940e 0e58 	CALL SUBOPT_0x23
                 ;belokKanan(100, 20);
00055f 940e 0e80 	CALL SUBOPT_0x27
000561 940e 0e88 	CALL SUBOPT_0x29
                 ;scanX(2, 120);
000563 940e 0e4a 	CALL SUBOPT_0x20
000565 940e 0e4f 	CALL SUBOPT_0x21
                 ;scanX(1, 100);
000567 940e 0e53 	CALL SUBOPT_0x22
000569 940e 0e58 	CALL SUBOPT_0x23
                 ;delay(15); scanKotak(1, 90, 5);
00056b 940e 0e5c 	CALL SUBOPT_0x24
00056d 940e 0e61 	CALL SUBOPT_0x25
                 ;taruh(20);
                 ;mundur(100, 100); delay(38);
                 ;belokKiri(100, 5); belokKiri(100, 20);
00056f e0a5      	LDI  R26,LOW(5)
000570 e0b0      	LDI  R27,0
000571 df48      	RCALL _belokKiri
000572 940e 0e80 	CALL SUBOPT_0x27
000574 940e 0e8c 	CALL SUBOPT_0x2A
                 ;scanX(1, 100);
000576 940e 0e53 	CALL SUBOPT_0x22
000578 940e 0e58 	CALL SUBOPT_0x23
                 ;scanX(3, 120);
00057a 940e 0e90 	CALL SUBOPT_0x2B
                 ;scanX(1, 100);
00057c 940e 0e53 	CALL SUBOPT_0x22
00057e 940e 0e58 	CALL SUBOPT_0x23
                 ;belokKiri(100, 20);
000580 940e 0e80 	CALL SUBOPT_0x27
000582 940e 0e8c 	CALL SUBOPT_0x2A
                 ;bawah_lepas();
000584 940e 0e85 	CALL SUBOPT_0x28
                 ;scanX(1, 100);
000586 940e 0e58 	CALL SUBOPT_0x23
                 ;scanTimer(50, 90, 50);
000588 e3e2      	LDI  R30,LOW(50)
000589 e0f0      	LDI  R31,HIGH(50)
00058a 93fa      	ST   -Y,R31
00058b 93ea      	ST   -Y,R30
00058c e5ea      	LDI  R30,LOW(90)
00058d e0f0      	LDI  R31,HIGH(90)
00058e c0ba      	RJMP _0x20C000B
                 ;ambil(20);
                 ; .FEND
                 ;void fromBtoRed() {
                 _fromBtoRed:
                 ; .FSTART _fromBtoRed
                 ;scanX(1, 100);
00058f 940e 0e53 	CALL SUBOPT_0x22
000591 940e 0e58 	CALL SUBOPT_0x23
                 ;belokKiri(100, 20);
000593 940e 0e80 	CALL SUBOPT_0x27
000595 940e 0e7b 	CALL SUBOPT_0x26
                 ;scanX(2, 120);
000597 940e 0e4f 	CALL SUBOPT_0x21
                 ;scanX(1, 100);
000599 940e 0e53 	CALL SUBOPT_0x22
00059b 940e 0e58 	CALL SUBOPT_0x23
                 ;delay(15); scanKotak(1, 90, 5);
00059d 940e 0e5c 	CALL SUBOPT_0x24
00059f 940e 0e61 	CALL SUBOPT_0x25
                 ;taruh(20);
                 ;mundur(100, 100); delay(38);
                 ;belokKanan(100, 5); belokKanan(100, 20);
0005a1 940e 0e95 	CALL SUBOPT_0x2C
0005a3 940e 0e88 	CALL SUBOPT_0x29
                 ;scanX(1, 100);
0005a5 940e 0e53 	CALL SUBOPT_0x22
0005a7 940e 0e58 	CALL SUBOPT_0x23
                 ;belokKanan(100, 20);
0005a9 940e 0e80 	CALL SUBOPT_0x27
0005ab 940e 0e88 	CALL SUBOPT_0x29
                 ;bawah_lepas();
0005ad 940e 0e85 	CALL SUBOPT_0x28
                 ;scanX(1, 100);
0005af 940e 0e58 	CALL SUBOPT_0x23
                 ;scanTimer(43, 95, 50);
0005b1 e2eb      	LDI  R30,LOW(43)
0005b2 e0f0      	LDI  R31,HIGH(43)
0005b3 93fa      	ST   -Y,R31
0005b4 93ea      	ST   -Y,R30
0005b5 e5ef      	LDI  R30,LOW(95)
0005b6 e0f0      	LDI  R31,HIGH(95)
0005b7 c091      	RJMP _0x20C000B
                 ;ambil(20);
                 ; .FEND
                 ;void fromCtoGreen() {
                 _fromCtoGreen:
                 ; .FSTART _fromCtoGreen
                 ;scanX(1, 100);
0005b8 940e 0e53 	CALL SUBOPT_0x22
0005ba 940e 0e58 	CALL SUBOPT_0x23
                 ;belokKiri(100, 20);
0005bc 940e 0e80 	CALL SUBOPT_0x27
0005be 940e 0e8c 	CALL SUBOPT_0x2A
                 ;scanX(1, 100);
0005c0 940e 0e53 	CALL SUBOPT_0x22
0005c2 940e 0e58 	CALL SUBOPT_0x23
                 ;scanX(2, 120);
0005c4 940e 0e4a 	CALL SUBOPT_0x20
0005c6 940e 0e4f 	CALL SUBOPT_0x21
                 ;scanX(2, 100);
0005c8 940e 0e4a 	CALL SUBOPT_0x20
0005ca 940e 0e58 	CALL SUBOPT_0x23
                 ;delay(15); scanKotak(1, 90, 5);
0005cc 940e 0e5c 	CALL SUBOPT_0x24
0005ce 940e 0e61 	CALL SUBOPT_0x25
                 ;taruh(20);
                 ;mundur(100, 100); delay(38);
                 ;belokKanan(100, 5); belokKanan(100, 20);
0005d0 940e 0e95 	CALL SUBOPT_0x2C
0005d2 940e 0e88 	CALL SUBOPT_0x29
                 ;scanX(1, 100);
0005d4 940e 0e53 	CALL SUBOPT_0x22
0005d6 940e 0e58 	CALL SUBOPT_0x23
                 ;scanX(2, 100);
0005d8 940e 0e4a 	CALL SUBOPT_0x20
0005da 940e 0e58 	CALL SUBOPT_0x23
                 ;belokKanan(100, 20);
0005dc 940e 0e80 	CALL SUBOPT_0x27
0005de 940e 0e88 	CALL SUBOPT_0x29
                 ;scanX(2, 120);
0005e0 940e 0e4a 	CALL SUBOPT_0x20
0005e2 940e 0e4f 	CALL SUBOPT_0x21
                 ;scanX(1, 100);
0005e4 940e 0e53 	CALL SUBOPT_0x22
0005e6 940e 0e58 	CALL SUBOPT_0x23
                 ;scanX(1, 100);
0005e8 940e 0e53 	CALL SUBOPT_0x22
0005ea 940e 0e58 	CALL SUBOPT_0x23
                 ;belokKanan(90, 10);
0005ec 940e 0e9a 	CALL SUBOPT_0x2D
0005ee e0aa      	LDI  R26,LOW(10)
0005ef e0b0      	LDI  R27,0
0005f0 debe      	RCALL _belokKanan
                 ;scanX(1, 100);
0005f1 940e 0e53 	CALL SUBOPT_0x22
0005f3 940e 0e58 	CALL SUBOPT_0x23
                 ;bawah_lepas();
0005f5 dee9      	RCALL _bawah_lepas
                 ;scanTimer(63, 80, 50);
0005f6 e3ef      	LDI  R30,LOW(63)
0005f7 e0f0      	LDI  R31,HIGH(63)
0005f8 c04c      	RJMP _0x20C000A
                 ;ambil(20);
                 ; .FEND
                 ;void fromCtoYellow() {
                 _fromCtoYellow:
                 ; .FSTART _fromCtoYellow
                 ;scanX(1, 100);
0005f9 940e 0e53 	CALL SUBOPT_0x22
0005fb 940e 0e58 	CALL SUBOPT_0x23
                 ;belokKanan(100, 20);
0005fd 940e 0e80 	CALL SUBOPT_0x27
0005ff 940e 0e88 	CALL SUBOPT_0x29
                 ;scanX(1, 100);
000601 940e 0e53 	CALL SUBOPT_0x22
000603 940e 0e58 	CALL SUBOPT_0x23
                 ;delay(15); scanKotak(1, 90, 5);
000605 940e 0e5c 	CALL SUBOPT_0x24
000607 940e 0e61 	CALL SUBOPT_0x25
                 ;taruh(20);
                 ;mundur(100, 100); delay(38);
                 ;belokKanan(100, 20);
000609 940e 0e88 	CALL SUBOPT_0x29
                 ;scanX(2, 120);
00060b 940e 0e4a 	CALL SUBOPT_0x20
00060d 940e 0e4f 	CALL SUBOPT_0x21
                 ;scanX(1, 100);
00060f 940e 0e53 	CALL SUBOPT_0x22
000611 940e 0e58 	CALL SUBOPT_0x23
                 ;scanX(1, 100);
000613 940e 0e53 	CALL SUBOPT_0x22
000615 940e 0e58 	CALL SUBOPT_0x23
                 ;belokKanan(100, 20);
000617 940e 0e80 	CALL SUBOPT_0x27
000619 940e 0e88 	CALL SUBOPT_0x29
                 ;scanX(2, 120);
00061b e0e2      	LDI  R30,LOW(2)
00061c e0f0      	LDI  R31,HIGH(2)
00061d c018      	RJMP _0x20C0009
                 ;scanX(1, 100);
                 ;bawah_lepas();
                 ;scanX(1, 100);
                 ;scanTimer(33, 80, 50);
                 ;ambil(20);
                 ; .FEND
                 ;void fromCtoRed() {
                 _fromCtoRed:
                 ; .FSTART _fromCtoRed
                 ;mundur(100, 100); delay(33);
00061e 940e 0e9f 	CALL SUBOPT_0x2E
                 ;belokKanan(100, 5); belokKanan(100, 20);
000620 940e 0e95 	CALL SUBOPT_0x2C
000622 940e 0e88 	CALL SUBOPT_0x29
                 ;scanX(1, 90);
000624 940e 0e53 	CALL SUBOPT_0x22
000626 940e 0ea9 	CALL SUBOPT_0x2F
                 ;scanX(1, 120);
000628 940e 0e4f 	CALL SUBOPT_0x21
                 ;scanX(1, 100);
00062a 940e 0e53 	CALL SUBOPT_0x22
00062c 940e 0e58 	CALL SUBOPT_0x23
                 ;delay(15); scanKotak(1, 90, 5);
00062e 940e 0e5c 	CALL SUBOPT_0x24
000630 940e 0e61 	CALL SUBOPT_0x25
                 ;taruh(20);
                 ;mundur(100, 100); delay(38);
                 ;belokKanan(100, 20);
000632 940e 0e88 	CALL SUBOPT_0x29
                 ;scanX(1, 120);
000634 e0e1      	LDI  R30,LOW(1)
000635 e0f0      	LDI  R31,HIGH(1)
                 _0x20C0009:
000636 93fa      	ST   -Y,R31
000637 93ea      	ST   -Y,R30
000638 940e 0e4f 	CALL SUBOPT_0x21
                 ;scanX(1, 100);
00063a 940e 0e53 	CALL SUBOPT_0x22
00063c 940e 0e58 	CALL SUBOPT_0x23
                 ;bawah_lepas();
00063e 940e 0e85 	CALL SUBOPT_0x28
                 ;scanX(1, 100);
000640 e6a4      	LDI  R26,LOW(100)
                 _0x20C000C:
000641 e0b0      	LDI  R27,0
000642 ddcc      	RCALL _scanX
                 ;scanTimer(33, 80, 50);
000643 e2e1      	LDI  R30,LOW(33)
000644 e0f0      	LDI  R31,HIGH(33)
                 _0x20C000A:
000645 93fa      	ST   -Y,R31
000646 93ea      	ST   -Y,R30
000647 e5e0      	LDI  R30,LOW(80)
000648 e0f0      	LDI  R31,HIGH(80)
                 _0x20C000B:
000649 93fa      	ST   -Y,R31
00064a 93ea      	ST   -Y,R30
00064b 940e 0eae 	CALL SUBOPT_0x30
                 ;ambil(20);
00064d 9508      	RET
                 ; .FEND
                 ;void fromAtoGreen() {
                 _fromAtoGreen:
                 ; .FSTART _fromAtoGreen
                 ;mundur(100, 100); delay(33);
00064e 940e 0e9f 	CALL SUBOPT_0x2E
                 ;belokKanan(100, 5); belokKanan(100, 20);
000650 940e 0e95 	CALL SUBOPT_0x2C
000652 940e 0e88 	CALL SUBOPT_0x29
                 ;scanX(1, 100);
000654 940e 0e53 	CALL SUBOPT_0x22
000656 940e 0e58 	CALL SUBOPT_0x23
                 ;scanX(1, 120);
000658 940e 0e53 	CALL SUBOPT_0x22
00065a 940e 0e4f 	CALL SUBOPT_0x21
                 ;scanX(1, 120);
00065c c00d      	RJMP _0x20C0008
                 ;scanX(1, 100);
                 ;delay(15); scanKotak(1, 90, 5);
                 ;taruh(20);
                 ; .FEND
                 ;void fromAtoYellow() {
                 _fromAtoYellow:
                 ; .FSTART _fromAtoYellow
                 ;scanX(1, 100);
00065d 940e 0e53 	CALL SUBOPT_0x22
00065f 940e 0e58 	CALL SUBOPT_0x23
                 ;belokKiri(100, 20);
000661 940e 0e80 	CALL SUBOPT_0x27
000663 940e 0e8c 	CALL SUBOPT_0x2A
                 ;delay(15); scanKotak(1, 100, 5);
000665 940e 0e5c 	CALL SUBOPT_0x24
000667 e6e4      	LDI  R30,LOW(100)
000668 e0f0      	LDI  R31,HIGH(100)
000669 c00e      	RJMP _0x20C0007
                 ;taruh(20);
                 ; .FEND
                 ;void fromAtoRed() {
                 _fromAtoRed:
                 ; .FSTART _fromAtoRed
                 ;scanX(1, 120);
                 _0x20C0008:
00066a e0e1      	LDI  R30,LOW(1)
00066b e0f0      	LDI  R31,HIGH(1)
00066c 93fa      	ST   -Y,R31
00066d 93ea      	ST   -Y,R30
00066e 940e 0e4f 	CALL SUBOPT_0x21
                 ;scanX(1, 100);
000670 940e 0e53 	CALL SUBOPT_0x22
000672 940e 0e58 	CALL SUBOPT_0x23
                 ;delay(15); scanKotak(1, 90, 5);
000674 940e 0e5c 	CALL SUBOPT_0x24
000676 e5ea      	LDI  R30,LOW(90)
000677 e0f0      	LDI  R31,HIGH(90)
                 _0x20C0007:
000678 93fa      	ST   -Y,R31
000679 93ea      	ST   -Y,R30
00067a 940e 0eb6 	CALL SUBOPT_0x31
                 ;taruh(20);
00067c de54      	RCALL _taruh
00067d 9508      	RET
                 ; .FEND
                 ;void vertikalLineD(void);
                 ;void fromGreenAtoD() {
                 _fromGreenAtoD:
                 ; .FSTART _fromGreenAtoD
                 ;if(positionD == 0) {
00067e 940e 0ebd 	CALL SUBOPT_0x32
000680 f429      	BRNE _0xF7
                 ;mundur(100, 100); delay(38);
000681 940e 0ec3 	CALL SUBOPT_0x33
                 ;belokKiri(100, 20);
000683 940e 0e8c 	CALL SUBOPT_0x2A
                 ;} else if(positionD == 1) {
000685 c03c      	RJMP _0xF8
                 _0xF7:
000686 940e 0ecd 	CALL SUBOPT_0x34
000688 9711      	SBIW R26,1
000689 f451      	BRNE _0xF9
                 ;mundur(100, 100); delay(38);
00068a 940e 0ec3 	CALL SUBOPT_0x33
                 ;belokKanan(100, 5); belokKanan(100, 20);
00068c 940e 0e95 	CALL SUBOPT_0x2C
00068e 940e 0e88 	CALL SUBOPT_0x29
                 ;scanX(1, 100);
000690 940e 0e53 	CALL SUBOPT_0x22
000692 e6a4      	LDI  R26,LOW(100)
000693 c024      	RJMP _0x17F
                 ;scanX(1, 100);
                 ;belokKanan(100, 20);
                 ;} else if(positionD == 2) {
                 _0xF9:
000694 940e 0ecd 	CALL SUBOPT_0x34
000696 9712      	SBIW R26,2
000697 f469      	BRNE _0xFB
                 ;mundur(100, 100); delay(38);
000698 940e 0ec3 	CALL SUBOPT_0x33
                 ;belokKanan(100, 5); belokKanan(100, 20);
00069a 940e 0e95 	CALL SUBOPT_0x2C
00069c 940e 0e88 	CALL SUBOPT_0x29
                 ;scanX(1, 100);
00069e 940e 0e53 	CALL SUBOPT_0x22
0006a0 940e 0e58 	CALL SUBOPT_0x23
                 ;scanX(2, 120);
0006a2 e0e2      	LDI  R30,LOW(2)
0006a3 e0f0      	LDI  R31,HIGH(2)
0006a4 c010      	RJMP _0x180
                 ;scanX(1, 100);
                 ;belokKanan(100, 20);
                 ;} else if(positionD == 3) {
                 _0xFB:
0006a5 940e 0ecd 	CALL SUBOPT_0x34
0006a7 9713      	SBIW R26,3
0006a8 f4c9      	BRNE _0xFD
                 ;mundur(100, 100); delay(38);
0006a9 940e 0ec3 	CALL SUBOPT_0x33
                 ;belokKanan(100, 5); belokKanan(100, 20);
0006ab 940e 0e95 	CALL SUBOPT_0x2C
0006ad 940e 0e88 	CALL SUBOPT_0x29
                 ;scanX(1, 100);
0006af 940e 0e53 	CALL SUBOPT_0x22
0006b1 940e 0e58 	CALL SUBOPT_0x23
                 ;scanX(4, 120);
0006b3 e0e4      	LDI  R30,LOW(4)
0006b4 e0f0      	LDI  R31,HIGH(4)
                 _0x180:
0006b5 93fa      	ST   -Y,R31
0006b6 93ea      	ST   -Y,R30
0006b7 e7a8      	LDI  R26,LOW(120)
                 _0x17F:
0006b8 e0b0      	LDI  R27,0
0006b9 dd55      	RCALL _scanX
                 ;scanX(1, 100);
0006ba 940e 0e53 	CALL SUBOPT_0x22
0006bc 940e 0e58 	CALL SUBOPT_0x23
                 ;belokKanan(100, 20);
0006be 940e 0e80 	CALL SUBOPT_0x27
0006c0 940e 0e88 	CALL SUBOPT_0x29
                 ;vertikalLineD();
                 _0xFD:
                 _0xF8:
0006c2 c0ac      	RJMP _0x20C0006
                 ; .FEND
                 ;void fromYellowAtoD() {
                 _fromYellowAtoD:
                 ; .FSTART _fromYellowAtoD
                 ;if(positionD == 0) {
0006c3 940e 0ebd 	CALL SUBOPT_0x32
0006c5 f4d1      	BRNE _0xFE
                 ;mundur(100, 100); delay(38);
0006c6 e6e4      	LDI  R30,LOW(100)
0006c7 93ea      	ST   -Y,R30
0006c8 e6a4      	LDI  R26,LOW(100)
0006c9 dbdd      	RCALL _mundur
0006ca e2a6      	LDI  R26,LOW(38)
0006cb e0b0      	LDI  R27,0
0006cc dacd      	RCALL _delay
                 ;belokKiri(80, 20);
0006cd 940e 0ed2 	CALL SUBOPT_0x35
0006cf 940e 0e8c 	CALL SUBOPT_0x2A
                 ;scanX(1, 100);
0006d1 940e 0e53 	CALL SUBOPT_0x22
0006d3 940e 0e58 	CALL SUBOPT_0x23
                 ;scanX(3, 120);
0006d5 940e 0e90 	CALL SUBOPT_0x2B
                 ;scanX(1, 100);
0006d7 940e 0e53 	CALL SUBOPT_0x22
0006d9 940e 0e58 	CALL SUBOPT_0x23
                 ;belokKiri(100, 20);
0006db 940e 0e80 	CALL SUBOPT_0x27
0006dd 940e 0e8c 	CALL SUBOPT_0x2A
                 ;} else if(positionD == 1) {
0006df c03a      	RJMP _0xFF
                 _0xFE:
0006e0 940e 0ecd 	CALL SUBOPT_0x34
0006e2 9711      	SBIW R26,1
0006e3 f4a9      	BRNE _0x100
                 ;mundur(100, 100); delay(38);
0006e4 940e 0ec3 	CALL SUBOPT_0x33
                 ;belokKiri(100, 20);
0006e6 940e 0e8c 	CALL SUBOPT_0x2A
                 ;scanX(1, 100);
0006e8 940e 0e53 	CALL SUBOPT_0x22
0006ea 940e 0e58 	CALL SUBOPT_0x23
                 ;scanX(1, 120);
0006ec 940e 0e53 	CALL SUBOPT_0x22
0006ee 940e 0e4f 	CALL SUBOPT_0x21
                 ;scanX(1, 100);
0006f0 940e 0e53 	CALL SUBOPT_0x22
0006f2 940e 0e58 	CALL SUBOPT_0x23
                 ;belokKiri(100, 20);
0006f4 940e 0e80 	CALL SUBOPT_0x27
0006f6 940e 0e8c 	CALL SUBOPT_0x2A
                 ;} else if(positionD == 2) {
0006f8 c021      	RJMP _0x101
                 _0x100:
0006f9 940e 0ecd 	CALL SUBOPT_0x34
0006fb 9712      	SBIW R26,2
0006fc f469      	BRNE _0x102
                 ;mundur(100, 100); delay(38);
0006fd 940e 0ec3 	CALL SUBOPT_0x33
                 ;belokKiri(100, 20);
0006ff 940e 0e8c 	CALL SUBOPT_0x2A
                 ;scanX(1, 100);
000701 940e 0e53 	CALL SUBOPT_0x22
000703 940e 0e58 	CALL SUBOPT_0x23
                 ;belokKiri(100, 20);
000705 940e 0e80 	CALL SUBOPT_0x27
000707 940e 0e8c 	CALL SUBOPT_0x2A
                 ;} else if(positionD == 3) {
000709 c010      	RJMP _0x103
                 _0x102:
00070a 940e 0ecd 	CALL SUBOPT_0x34
00070c 9713      	SBIW R26,3
00070d f461      	BRNE _0x104
                 ;mundur(100, 100); delay(38);
00070e 940e 0ec3 	CALL SUBOPT_0x33
                 ;belokKanan(100, 20);
000710 940e 0e88 	CALL SUBOPT_0x29
                 ;scanX(1, 100);
000712 940e 0e53 	CALL SUBOPT_0x22
000714 940e 0e58 	CALL SUBOPT_0x23
                 ;belokKanan(100, 20);
000716 940e 0e80 	CALL SUBOPT_0x27
000718 940e 0e88 	CALL SUBOPT_0x29
                 ;vertikalLineD();
                 _0x104:
                 _0x103:
                 _0x101:
                 _0xFF:
00071a c054      	RJMP _0x20C0006
                 ; .FEND
                 ;void fromRedAtoD() {
                 _fromRedAtoD:
                 ; .FSTART _fromRedAtoD
                 ;if(positionD == 0) {
00071b 940e 0ebd 	CALL SUBOPT_0x32
00071d f4c9      	BRNE _0x105
                 ;mundur(100, 100); delay(38);
00071e 940e 0ec3 	CALL SUBOPT_0x33
                 ;belokKanan(100, 5); belokKanan(100, 20);
000720 940e 0e95 	CALL SUBOPT_0x2C
000722 940e 0e88 	CALL SUBOPT_0x29
                 ;scanX(1, 100);
000724 940e 0e53 	CALL SUBOPT_0x22
000726 940e 0e58 	CALL SUBOPT_0x23
                 ;scanX(4, 120);
000728 e0e4      	LDI  R30,LOW(4)
000729 e0f0      	LDI  R31,HIGH(4)
00072a 93fa      	ST   -Y,R31
00072b 93ea      	ST   -Y,R30
00072c 940e 0e4f 	CALL SUBOPT_0x21
                 ;scanX(1, 100);
00072e 940e 0e53 	CALL SUBOPT_0x22
000730 940e 0e58 	CALL SUBOPT_0x23
                 ;belokKiri(100, 20);
000732 940e 0e80 	CALL SUBOPT_0x27
000734 940e 0e8c 	CALL SUBOPT_0x2A
                 ;} else if(positionD == 1) {
000736 c038      	RJMP _0x106
                 _0x105:
000737 940e 0ecd 	CALL SUBOPT_0x34
000739 9711      	SBIW R26,1
00073a f4b9      	BRNE _0x107
                 ;mundur(100, 100); delay(38);
00073b 940e 0ec3 	CALL SUBOPT_0x33
                 ;belokKanan(100, 5); belokKanan(100, 20);
00073d 940e 0e95 	CALL SUBOPT_0x2C
00073f 940e 0e88 	CALL SUBOPT_0x29
                 ;scanX(1, 100);
000741 940e 0e53 	CALL SUBOPT_0x22
000743 940e 0e58 	CALL SUBOPT_0x23
                 ;scanX(2, 120);
000745 940e 0e4a 	CALL SUBOPT_0x20
000747 940e 0e4f 	CALL SUBOPT_0x21
                 ;scanX(1, 100);
000749 940e 0e53 	CALL SUBOPT_0x22
00074b 940e 0e58 	CALL SUBOPT_0x23
                 ;belokKiri(100, 20);
00074d 940e 0e80 	CALL SUBOPT_0x27
00074f 940e 0e8c 	CALL SUBOPT_0x2A
                 ;} else if(positionD == 2) {
000751 c01d      	RJMP _0x108
                 _0x107:
000752 940e 0ecd 	CALL SUBOPT_0x34
000754 9712      	SBIW R26,2
000755 f489      	BRNE _0x109
                 ;mundur(100, 100); delay(38);
000756 940e 0ec3 	CALL SUBOPT_0x33
                 ;belokKiri(100, 20);
000758 940e 0e8c 	CALL SUBOPT_0x2A
                 ;scanX(1, 100);
00075a 940e 0e53 	CALL SUBOPT_0x22
00075c 940e 0e58 	CALL SUBOPT_0x23
                 ;scanX(1, 100);
00075e 940e 0e53 	CALL SUBOPT_0x22
000760 940e 0e58 	CALL SUBOPT_0x23
                 ;belokKiri(100, 20);
000762 940e 0e80 	CALL SUBOPT_0x27
000764 940e 0e8c 	CALL SUBOPT_0x2A
                 ;} else if(positionD == 3) {
000766 c008      	RJMP _0x10A
                 _0x109:
000767 940e 0ecd 	CALL SUBOPT_0x34
000769 9713      	SBIW R26,3
00076a f421      	BRNE _0x10B
                 ;mundur(100, 100); delay(38);
00076b 940e 0ec3 	CALL SUBOPT_0x33
                 ;belokKanan(100, 20);
00076d 940e 0e88 	CALL SUBOPT_0x29
                 ;vertikalLineD();
                 _0x10B:
                 _0x10A:
                 _0x108:
                 _0x106:
                 _0x20C0006:
00076f d001      	RCALL _vertikalLineD
000770 9508      	RET
                 ; .FEND
                 ;void fromDto4(void);
                 ;void vertikalLineD() {
                 _vertikalLineD:
                 ; .FSTART _vertikalLineD
                 ;scanX(3, 120);
000771 940e 0e90 	CALL SUBOPT_0x2B
                 ;scanX(1, 100);
000773 940e 0e53 	CALL SUBOPT_0x22
000775 940e 0e58 	CALL SUBOPT_0x23
                 ;bawah_lepas();
000777 940e 0e85 	CALL SUBOPT_0x28
                 ;scanX(1, 100);
000779 940e 0e58 	CALL SUBOPT_0x23
                 ;delay(15); scanKotak(1, 90, 5);
00077b 940e 0e5c 	CALL SUBOPT_0x24
00077d 940e 0e9a 	CALL SUBOPT_0x2D
00077f 940e 0eb6 	CALL SUBOPT_0x31
                 ;ambil(20);
000781 dd44      	RCALL _ambil
                 ;fromDto4();
000782 d001      	RCALL _fromDto4
000783 9508      	RET
                 ; .FEND
                 ;void returnHome(void);
                 ;void fromDto4() {
                 _fromDto4:
                 ; .FSTART _fromDto4
                 ;mundur(100, 100); delay(38);
000784 940e 0ec3 	CALL SUBOPT_0x33
                 ;belokKanan(100, 10); belokKanan(100, 20);
000786 e0aa      	LDI  R26,LOW(10)
000787 e0b0      	LDI  R27,0
000788 dd26      	RCALL _belokKanan
000789 940e 0e80 	CALL SUBOPT_0x27
00078b 940e 0e88 	CALL SUBOPT_0x29
                 ;scanX(1, 90);
00078d 940e 0e53 	CALL SUBOPT_0x22
00078f 940e 0ea9 	CALL SUBOPT_0x2F
                 ;scanX(1, 120);
000791 940e 0e4f 	CALL SUBOPT_0x21
                 ;belokKiri(100, 20);
000793 940e 0e80 	CALL SUBOPT_0x27
000795 940e 0e8c 	CALL SUBOPT_0x2A
                 ;if(positionD == 0) {
000797 940e 0ebd 	CALL SUBOPT_0x32
000799 f421      	BRNE _0x10C
                 ;scanX(1, 100);
00079a 940e 0e53 	CALL SUBOPT_0x22
00079c e6a4      	LDI  R26,LOW(100)
00079d c027      	RJMP _0x181
                 ;} else if(positionD == 1) {
                 _0x10C:
00079e 940e 0ecd 	CALL SUBOPT_0x34
0007a0 9711      	SBIW R26,1
0007a1 f459      	BRNE _0x10E
                 ;scanX(1, 100);
0007a2 940e 0e53 	CALL SUBOPT_0x22
0007a4 940e 0e58 	CALL SUBOPT_0x23
                 ;scanX(1, 120);
0007a6 940e 0e53 	CALL SUBOPT_0x22
0007a8 940e 0e4f 	CALL SUBOPT_0x21
                 ;scanX(1, 120);
0007aa e0e1      	LDI  R30,LOW(1)
0007ab e0f0      	LDI  R31,HIGH(1)
0007ac c015      	RJMP _0x182
                 ;} else if(positionD == 2) {
                 _0x10E:
0007ad 940e 0ecd 	CALL SUBOPT_0x34
0007af 9712      	SBIW R26,2
0007b0 f439      	BRNE _0x110
                 ;scanX(1, 100);
0007b1 940e 0e53 	CALL SUBOPT_0x22
0007b3 940e 0e58 	CALL SUBOPT_0x23
                 ;scanX(4, 120);
0007b5 e0e4      	LDI  R30,LOW(4)
0007b6 e0f0      	LDI  R31,HIGH(4)
0007b7 c00a      	RJMP _0x182
                 ;} else if(positionD == 3) {
                 _0x110:
0007b8 940e 0ecd 	CALL SUBOPT_0x34
0007ba 9713      	SBIW R26,3
0007bb f459      	BRNE _0x112
                 ;scanX(1, 100);
0007bc 940e 0e53 	CALL SUBOPT_0x22
0007be 940e 0e58 	CALL SUBOPT_0x23
                 ;scanX(6, 120);
0007c0 e0e6      	LDI  R30,LOW(6)
0007c1 e0f0      	LDI  R31,HIGH(6)
                 _0x182:
0007c2 93fa      	ST   -Y,R31
0007c3 93ea      	ST   -Y,R30
0007c4 e7a8      	LDI  R26,LOW(120)
                 _0x181:
0007c5 e0b0      	LDI  R27,0
0007c6 dc48      	RCALL _scanX
                 ;delay(15); scanKotak(1, 90, 5);
                 _0x112:
0007c7 940e 0e5c 	CALL SUBOPT_0x24
0007c9 940e 0e9a 	CALL SUBOPT_0x2D
0007cb 940e 0eb6 	CALL SUBOPT_0x31
                 ;taruh(20);
0007cd dd03      	RCALL _taruh
                 ;returnHome();
0007ce d001      	RCALL _returnHome
0007cf 9508      	RET
                 ; .FEND
                 ;void returnHome() {
                 _returnHome:
                 ; .FSTART _returnHome
                 ;mundur(100, 100); delay(20);
0007d0 e6e4      	LDI  R30,LOW(100)
0007d1 93ea      	ST   -Y,R30
0007d2 e6a4      	LDI  R26,LOW(100)
0007d3 dad3      	RCALL _mundur
0007d4 e1a4      	LDI  R26,LOW(20)
0007d5 e0b0      	LDI  R27,0
0007d6 d9c3      	RCALL _delay
                 ;belokKanan(100, 20);
0007d7 940e 0e80 	CALL SUBOPT_0x27
0007d9 940e 0e88 	CALL SUBOPT_0x29
                 ;scanX(1, 100);
0007db 940e 0e53 	CALL SUBOPT_0x22
0007dd 940e 0e58 	CALL SUBOPT_0x23
                 ;scanX(3, 120);
0007df 940e 0e90 	CALL SUBOPT_0x2B
                 ;scanX(1, 100);
0007e1 940e 0e53 	CALL SUBOPT_0x22
0007e3 940e 0e58 	CALL SUBOPT_0x23
                 ;belokKanan(100, 20);
0007e5 940e 0e80 	CALL SUBOPT_0x27
0007e7 940e 0e88 	CALL SUBOPT_0x29
                 ;scanX(1, 120);
0007e9 940e 0e53 	CALL SUBOPT_0x22
0007eb 940e 0e4f 	CALL SUBOPT_0x21
                 ;scanX(1, 100);
0007ed 940e 0e53 	CALL SUBOPT_0x22
0007ef 940e 0e58 	CALL SUBOPT_0x23
                 ;delay(15); scanKotak(1, 90, 5);
0007f1 940e 0e5c 	CALL SUBOPT_0x24
0007f3 940e 0e9a 	CALL SUBOPT_0x2D
0007f5 e0a5      	LDI  R26,LOW(5)
0007f6 e0b0      	LDI  R27,0
0007f7 dc55      	RCALL _scanKotak
                 ;maju(100, 100); delay(30); rem(100);
0007f8 e6e4      	LDI  R30,LOW(100)
0007f9 93ea      	ST   -Y,R30
0007fa e6a4      	LDI  R26,LOW(100)
0007fb daa4      	RCALL _maju
0007fc e1ae      	LDI  R26,LOW(30)
0007fd e0b0      	LDI  R27,0
0007fe d99b      	RCALL _delay
0007ff 940e 0e02 	CALL SUBOPT_0x13
                 ;parkir();
000801 db2e      	RCALL _parkir
000802 9508      	RET
                 ; .FEND
                 ;void Program_Jalan()
                 _Program_Jalan:
                 ; .FSTART _Program_Jalan
                 ;maju_delay(80, 60);
000803 940e 0ed2 	CALL SUBOPT_0x35
000805 e3ac      	LDI  R26,LOW(60)
000806 e0b0      	LDI  R27,0
000807 daea      	RCALL _maju_delay
                 ;scanX(2, 120);
000808 940e 0e4a 	CALL SUBOPT_0x20
00080a 940e 0e4f 	CALL SUBOPT_0x21
                 ;bawah_lepas();
00080c 940e 0e85 	CALL SUBOPT_0x28
                 ;scanX(1, 100);
00080e 940e 0e58 	CALL SUBOPT_0x23
                 ;scanTimer(28, 80, 50);
000810 e1ec      	LDI  R30,LOW(28)
000811 e0f0      	LDI  R31,HIGH(28)
000812 93fa      	ST   -Y,R31
000813 93ea      	ST   -Y,R30
000814 940e 0ed2 	CALL SUBOPT_0x35
000816 940e 0eae 	CALL SUBOPT_0x30
                 ;ambil(20);
                 ;delay(50);
000818 940e 0ed7 	CALL SUBOPT_0x36
                 ;isWarna = checkWarna();
                 ;if(isWarna == merah) {
00081a f411      	BRNE _0x113
                 ;fromBtoRed();
00081b dd73      	RCALL _fromBtoRed
                 ;} else if(isWarna == kuning) {
00081c c00b      	RJMP _0x114
                 _0x113:
00081d 940e 0ee3 	CALL SUBOPT_0x37
00081f 9711      	SBIW R26,1
000820 f411      	BRNE _0x115
                 ;fromBtoYellow();
000821 dd39      	RCALL _fromBtoYellow
                 ;} else if(isWarna == hijau) {
000822 c005      	RJMP _0x116
                 _0x115:
000823 940e 0ee3 	CALL SUBOPT_0x37
000825 9712      	SBIW R26,2
000826 f401      	BRNE _0x117
                 ;fromBtoGreen();
                 ;} else {
                 _0x117:
                 ;fromBtoGreen();
                 _0x183:
000827 dd19      	RCALL _fromBtoGreen
                 _0x116:
                 _0x114:
                 ;isWarna = checkWarna();
000828 dcd6      	RCALL _checkWarna
000829 93e0 02b3 	STS  _isWarna,R30
00082b 93f0 02b4 	STS  _isWarna+1,R31
                 ;if(isWarna == merah) {
00082d 9730      	SBIW R30,0
00082e f411      	BRNE _0x119
                 ;fromCtoRed();
00082f ddee      	RCALL _fromCtoRed
                 ;} else if(isWarna == kuning) {
000830 c00b      	RJMP _0x11A
                 _0x119:
000831 940e 0ee3 	CALL SUBOPT_0x37
000833 9711      	SBIW R26,1
000834 f411      	BRNE _0x11B
                 ;fromCtoYellow();
000835 ddc3      	RCALL _fromCtoYellow
                 ;} else if(isWarna == hijau) {
000836 c005      	RJMP _0x11C
                 _0x11B:
000837 940e 0ee3 	CALL SUBOPT_0x37
000839 9712      	SBIW R26,2
00083a f401      	BRNE _0x11D
                 ;fromCtoGreen();
                 ;} else {
                 _0x11D:
                 ;fromCtoGreen();
                 _0x184:
00083b dd7c      	RCALL _fromCtoGreen
                 _0x11C:
                 _0x11A:
                 ;delay(50);
00083c 940e 0ed7 	CALL SUBOPT_0x36
                 ;isWarna = checkWarna();
                 ;if(isWarna == merah) {
00083e f419      	BRNE _0x11F
                 ;fromAtoRed();
00083f de2a      	RCALL _fromAtoRed
                 ;fromRedAtoD();
000840 deda      	RCALL _fromRedAtoD
                 ;} else if(isWarna == kuning) {
000841 c00d      	RJMP _0x120
                 _0x11F:
000842 940e 0ee3 	CALL SUBOPT_0x37
000844 9711      	SBIW R26,1
000845 f419      	BRNE _0x121
                 ;fromAtoYellow();
000846 de16      	RCALL _fromAtoYellow
                 ;fromYellowAtoD();
000847 de7b      	RCALL _fromYellowAtoD
                 ;} else if(isWarna == hijau) {
000848 c006      	RJMP _0x122
                 _0x121:
000849 940e 0ee3 	CALL SUBOPT_0x37
00084b 9712      	SBIW R26,2
00084c f401      	BRNE _0x123
                 ;fromAtoGreen();
                 ;fromGreenAtoD();
                 ;} else {
                 _0x123:
                 ;fromAtoGreen();
                 _0x185:
00084d de00      	RCALL _fromAtoGreen
                 ;fromGreenAtoD();
00084e de2f      	RCALL _fromGreenAtoD
                 _0x122:
                 _0x120:
00084f 9508      	RET
                 ; .FEND
                 ;void balikKanan() {
                 ;mundur(100, 100); delay(38);
                 ;belokKanan(80, 0); belokKanan(80, 10);
                 ;void balikKiri() {
                 ;belki(100, 5); belki(100, 20);
                 ;void mundurKanan() {
                 ;mundur(100, 100); delay(38);
                 ;belokKanan(80, 10);
                 ;void runBot(void);
                 ;void calibration(void);
                 ;void Program_Jalan(void);
                 ;void test_motor(void);
                 ;void test_tombol(void);
                 ;void sens_warna(void);
                 ;void test_capit(void);
                 ;void changeMenu(int menuSelect, bool isSelect, int childMenuSelect) {
                 ; 0000 0067 void changeMenu(int menuSelect, _Bool isSelect, int childMenuSelect) {
                 _changeMenu:
                 ; .FSTART _changeMenu
                 ;lampu = 0;
000850 93ba      	ST   -Y,R27
000851 93aa      	ST   -Y,R26
                 ;	menuSelect -> Y+3
                 ;	isSelect -> Y+2
                 ;	childMenuSelect -> Y+0
000852 98c3      	CBI  0x18,3
                 ;count_btn = menuSelect;
000853 81eb      	LDD  R30,Y+3
000854 81fc      	LDD  R31,Y+3+1
000855 93e0 0282 	STS  _count_btn,R30
000857 93f0 0283 	STS  _count_btn+1,R31
                 ;count_child_btn = childMenuSelect;
000859 81e8      	LD   R30,Y
00085a 81f9      	LDD  R31,Y+1
00085b 93e0 0284 	STS  _count_child_btn,R30
00085d 93f0 0285 	STS  _count_child_btn+1,R31
                 ;if(!isSelect && !isChildSelect) {
00085f 81ea      	LDD  R30,Y+2
000860 30e0      	CPI  R30,0
000861 f421      	BRNE _0x128
000862 91e0 0286 	LDS  R30,_isChildSelect
000864 30e0      	CPI  R30,0
000865 f009      	BREQ _0x129
                 _0x128:
000866 c006      	RJMP _0x127
                 _0x129:
                 ;lcd_clear();
000867 940e 0ee8 	CALL SUBOPT_0x38
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Menu");
                +
000869 eea4     +LDI R26 , LOW ( 2 * _0x0 + ( 100 ) )
00086a e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 100 ) )
                 	__POINTW2FN _0x0,100
00086b 940e 0d1e 	CALL _lcd_putsf
                 ;switch (menuSelect) {
                 _0x127:
00086d 81eb      	LDD  R30,Y+3
00086e 81fc      	LDD  R31,Y+3+1
                 ;case 0: // Calibration
00086f 9730      	SBIW R30,0
000870 f469      	BRNE _0x12D
                 ;if(isSelect) { calibration(); break; }
000871 81ea      	LDD  R30,Y+2
000872 30e0      	CPI  R30,0
000873 f011      	BREQ _0x12E
000874 d08c      	RCALL _calibration
000875 c060      	RJMP _0x12C
                 ;lcd_gotoxy(0, 1);
                 _0x12E:
000876 e0e0      	LDI  R30,LOW(0)
000877 940e 0e46 	CALL SUBOPT_0x1F
                 ;lcd_putsf("Calibration");
                +
000879 eea9     +LDI R26 , LOW ( 2 * _0x0 + ( 105 ) )
00087a e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 105 ) )
                 	__POINTW2FN _0x0,105
00087b 940e 0d1e 	CALL _lcd_putsf
                 ;break;
00087d c058      	RJMP _0x12C
                 ;case 1: // Run bot
                 _0x12D:
00087e 30e1      	CPI  R30,LOW(0x1)
00087f e0a0      	LDI  R26,HIGH(0x1)
000880 07fa      	CPC  R31,R26
000881 f489      	BRNE _0x12F
                 ;if(isSelect || isChildSelect) { runBot(); break; }
000882 81ea      	LDD  R30,Y+2
000883 30e0      	CPI  R30,0
000884 f421      	BRNE _0x131
000885 91e0 0286 	LDS  R30,_isChildSelect
000887 30e0      	CPI  R30,0
000888 f011      	BREQ _0x130
                 _0x131:
000889 d04d      	RCALL _runBot
00088a c04b      	RJMP _0x12C
                 ;lcd_gotoxy(0, 1);
                 _0x130:
00088b e0e0      	LDI  R30,LOW(0)
00088c 940e 0e46 	CALL SUBOPT_0x1F
                 ;lcd_putsf("Run Bot");
                +
00088e efa5     +LDI R26 , LOW ( 2 * _0x0 + ( 117 ) )
00088f e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 117 ) )
                 	__POINTW2FN _0x0,117
000890 940e 0d1e 	CALL _lcd_putsf
                 ;break;
000892 c043      	RJMP _0x12C
                 ;case 2: // Sensor Warna
                 _0x12F:
000893 30e2      	CPI  R30,LOW(0x2)
000894 e0a0      	LDI  R26,HIGH(0x2)
000895 07fa      	CPC  R31,R26
000896 f469      	BRNE _0x133
                 ;if(isSelect) { sens_warna(); break; }
000897 81ea      	LDD  R30,Y+2
000898 30e0      	CPI  R30,0
000899 f011      	BREQ _0x134
00089a d0d4      	RCALL _sens_warna
00089b c03a      	RJMP _0x12C
                 ;lcd_gotoxy(0, 1);
                 _0x134:
00089c e0e0      	LDI  R30,LOW(0)
00089d 940e 0e46 	CALL SUBOPT_0x1F
                 ;lcd_putsf("Sens Warna");
                +
00089f efad     +LDI R26 , LOW ( 2 * _0x0 + ( 125 ) )
0008a0 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 125 ) )
                 	__POINTW2FN _0x0,125
0008a1 940e 0d1e 	CALL _lcd_putsf
                 ;break;
0008a3 c032      	RJMP _0x12C
                 ;case 3: // Test Motor
                 _0x133:
0008a4 30e3      	CPI  R30,LOW(0x3)
0008a5 e0a0      	LDI  R26,HIGH(0x3)
0008a6 07fa      	CPC  R31,R26
0008a7 f469      	BRNE _0x135
                 ;if(isSelect) { test_motor(); break; }
0008a8 81ea      	LDD  R30,Y+2
0008a9 30e0      	CPI  R30,0
0008aa f011      	BREQ _0x136
0008ab d05e      	RCALL _test_motor
0008ac c029      	RJMP _0x12C
                 ;lcd_gotoxy(0, 1);
                 _0x136:
0008ad e0e0      	LDI  R30,LOW(0)
0008ae 940e 0e46 	CALL SUBOPT_0x1F
                 ;lcd_putsf("Motor");
                +
0008b0 e0a8     +LDI R26 , LOW ( 2 * _0x0 + ( 136 ) )
0008b1 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 136 ) )
                 	__POINTW2FN _0x0,136
0008b2 940e 0d1e 	CALL _lcd_putsf
                 ;break;
0008b4 c021      	RJMP _0x12C
                 ;case 4: // Test tombol
                 _0x135:
0008b5 30e4      	CPI  R30,LOW(0x4)
0008b6 e0a0      	LDI  R26,HIGH(0x4)
0008b7 07fa      	CPC  R31,R26
0008b8 f469      	BRNE _0x137
                 ;if(isSelect) { test_tombol(); break; }
0008b9 81ea      	LDD  R30,Y+2
0008ba 30e0      	CPI  R30,0
0008bb f011      	BREQ _0x138
0008bc d07c      	RCALL _test_tombol
0008bd c018      	RJMP _0x12C
                 ;lcd_gotoxy(0, 1);
                 _0x138:
0008be e0e0      	LDI  R30,LOW(0)
0008bf 940e 0e46 	CALL SUBOPT_0x1F
                 ;lcd_putsf("Button");
                +
0008c1 e0ae     +LDI R26 , LOW ( 2 * _0x0 + ( 142 ) )
0008c2 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 142 ) )
                 	__POINTW2FN _0x0,142
0008c3 940e 0d1e 	CALL _lcd_putsf
                 ;break;
0008c5 c010      	RJMP _0x12C
                 ;case 5: // Tepuk tangan XD
                 _0x137:
0008c6 30e5      	CPI  R30,LOW(0x5)
0008c7 e0a0      	LDI  R26,HIGH(0x5)
0008c8 07fa      	CPC  R31,R26
0008c9 f461      	BRNE _0x13B
                 ;if(isSelect) { test_capit(); break; }
0008ca 81ea      	LDD  R30,Y+2
0008cb 30e0      	CPI  R30,0
0008cc f011      	BREQ _0x13A
0008cd d0cc      	RCALL _test_capit
0008ce c007      	RJMP _0x12C
                 ;lcd_gotoxy(0, 1);
                 _0x13A:
0008cf e0e0      	LDI  R30,LOW(0)
0008d0 940e 0e46 	CALL SUBOPT_0x1F
                 ;lcd_putsf("Capit");
                +
0008d2 e1a5     +LDI R26 , LOW ( 2 * _0x0 + ( 149 ) )
0008d3 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 149 ) )
                 	__POINTW2FN _0x0,149
0008d4 940e 0d1e 	CALL _lcd_putsf
                 ;break;
                 ;default:
                 _0x13B:
                 ;break;
                 _0x12C:
0008d6 c20b      	RJMP _0x20C0004
                 ; .FEND
                 ;void runBot() {
                 _runBot:
                 ; .FSTART _runBot
                 ;if(!isChildSelect) {
0008d7 91e0 0286 	LDS  R30,_isChildSelect
0008d9 30e0      	CPI  R30,0
0008da f471      	BRNE _0x13C
                 ;lcd_clear();
0008db 940e 0ee8 	CALL SUBOPT_0x38
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Run Bot");
                +
0008dd efa5     +LDI R26 , LOW ( 2 * _0x0 + ( 117 ) )
0008de e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 117 ) )
                 	__POINTW2FN _0x0,117
0008df 940e 0eec 	CALL SUBOPT_0x39
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("Click 2 to start");
                +
0008e1 e1ab     +LDI R26 , LOW ( 2 * _0x0 + ( 155 ) )
0008e2 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 155 ) )
                 	__POINTW2FN _0x0,155
0008e3 940e 0d1e 	CALL _lcd_putsf
                 ;isChildSelect = true;
0008e5 e0e1      	LDI  R30,LOW(1)
0008e6 93e0 0286 	STS  _isChildSelect,R30
                 ;} else if(isChildSelect) {
0008e8 c017      	RJMP _0x13D
                 _0x13C:
0008e9 91e0 0286 	LDS  R30,_isChildSelect
0008eb 30e0      	CPI  R30,0
0008ec f099      	BREQ _0x13E
                 ;lcd_clear();
0008ed 940e 0cd3 	CALL _lcd_clear
                 ;lcd_gotoxy(0, 1);
0008ef e0e0      	LDI  R30,LOW(0)
0008f0 940e 0e46 	CALL SUBOPT_0x1F
                 ;lcd_putsf("Running...");
                +
0008f2 e2ac     +LDI R26 , LOW ( 2 * _0x0 + ( 172 ) )
0008f3 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 172 ) )
                 	__POINTW2FN _0x0,172
0008f4 940e 0d1e 	CALL _lcd_putsf
                 ;Program_Jalan();
0008f6 df0c      	RCALL _Program_Jalan
                 ;isChildSelect = false;
0008f7 e0e0      	LDI  R30,LOW(0)
0008f8 93e0 0286 	STS  _isChildSelect,R30
                 ;count_child_btn = 0;
0008fa 93e0 0284 	STS  _count_child_btn,R30
0008fc 93e0 0285 	STS  _count_child_btn+1,R30
                 ;changeMenu(0, false, 0);
0008fe 940e 0ef0 	CALL SUBOPT_0x3A
                 _0x13E:
                 _0x13D:
000900 9508      	RET
                 ; .FEND
                 ;void calibration() {
                 _calibration:
                 ; .FSTART _calibration
                 ;scan_garis();
000901 d917      	RCALL _scan_garis
                 ;delay(300);
000902 e2ac      	LDI  R26,LOW(300)
000903 e0b1      	LDI  R27,HIGH(300)
000904 d895      	RCALL _delay
                 ;scan_back();
000905 d933      	RCALL _scan_back
                 ;delay(100);
000906 940e 0ef9 	CALL SUBOPT_0x3B
                 ;hit_tengah();
000908 d950      	RCALL _hit_tengah
                 ;isChildSelect = false;
000909 c029      	RJMP _0x20C0005
                 ;changeMenu(0, false, 0);
                 ; .FEND
                 ;void map_select(int childMenuSelect) {
                 ;switch(childMenuSelect) {
                 ;	childMenuSelect -> Y+0
                 ;case 0:
                 ;if(!isChildSelect) {
                 ;isChildSelect = true;
                 ;lcd_clear();
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Map Biru");
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("Click 2 to select");
                 ;} else if(isChildSelect) {
                 ;mapMirror = 0;
                 ;count_child_btn = 0;
                 ;isChildSelect = false;
                 ;changeMenu(0, false, 0);
                 ;break;
                 ;case 1:
                 ;if(!isChildSelect) {
                 ;isChildSelect = true;
                 ;lcd_clear();
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Map Merah");
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("Click 2 to select");
                 ;} else if(isChildSelect) {
                 ;mapMirror = 1;
                 ;count_child_btn = 0;
                 ;isChildSelect = false;
                 ;changeMenu(0, false, 0);
                 ;break;
                 ;default:
                 ;break;
                 ;void test_motor()
                 _test_motor:
                 ; .FSTART _test_motor
                 ;lcd_clear();
00090a 940e 0ee8 	CALL SUBOPT_0x38
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Test Motor");
                +
00090c e5ac     +LDI R26 , LOW ( 2 * _0x0 + ( 220 ) )
00090d e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 220 ) )
                 	__POINTW2FN _0x0,220
00090e 940e 0eec 	CALL SUBOPT_0x39
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("+100 +100");
                +
000910 e6a7     +LDI R26 , LOW ( 2 * _0x0 + ( 231 ) )
000911 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 231 ) )
                 	__POINTW2FN _0x0,231
000912 940e 0d1e 	CALL _lcd_putsf
                 ;setMotor(100, 100);
000914 940e 0e80 	CALL SUBOPT_0x27
000916 940e 0efd 	CALL SUBOPT_0x3C
                 ;delay_ms(200);
                 ;lcd_gotoxy(0, 1);
000918 e0e0      	LDI  R30,LOW(0)
000919 940e 0e46 	CALL SUBOPT_0x1F
                 ;lcd_putsf("-100 -100");
                +
00091b e7a1     +LDI R26 , LOW ( 2 * _0x0 + ( 241 ) )
00091c e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 241 ) )
                 	__POINTW2FN _0x0,241
00091d 940e 0f05 	CALL SUBOPT_0x3D
                 ;setMotor(-100, -100);
00091f 940e 0f0c 	CALL SUBOPT_0x3E
                 ;delay_ms(200);
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("+100 -100");
                +
000921 e7ab     +LDI R26 , LOW ( 2 * _0x0 + ( 251 ) )
000922 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 251 ) )
                 	__POINTW2FN _0x0,251
000923 940e 0d1e 	CALL _lcd_putsf
                 ;setMotor(100, -100);
000925 940e 0e80 	CALL SUBOPT_0x27
000927 940e 0f0c 	CALL SUBOPT_0x3E
                 ;delay_ms(200);
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("-100 +100");
                +
000929 e8a5     +LDI R26 , LOW ( 2 * _0x0 + ( 261 ) )
00092a e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 261 ) )
                 	__POINTW2FN _0x0,261
00092b 940e 0f05 	CALL SUBOPT_0x3D
                 ;setMotor(-100, 100);
00092d 940e 0efd 	CALL SUBOPT_0x3C
                 ;delay_ms(200);
                 ;rem(100);
00092f 940e 0e02 	CALL SUBOPT_0x13
                 ;lcd_clear();
000931 940e 0ee8 	CALL SUBOPT_0x38
                 ;lcd_gotoxy(0, 0);
                 ;isChildSelect = false;
                 _0x20C0005:
000933 e0e0      	LDI  R30,LOW(0)
000934 93e0 0286 	STS  _isChildSelect,R30
                 ;changeMenu(0, false, 0);
000936 940e 0ef0 	CALL SUBOPT_0x3A
000938 9508      	RET
                 ; .FEND
                 ;void test_tombol()
                 _test_tombol:
                 ; .FSTART _test_tombol
                 ;lcd_gotoxy(0, 1);
000939 e0e0      	LDI  R30,LOW(0)
00093a 940e 0e46 	CALL SUBOPT_0x1F
                 ;lcd_putsf("Click 1 to exit");
                +
00093c e8af     +LDI R26 , LOW ( 2 * _0x0 + ( 271 ) )
00093d e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 271 ) )
                 	__POINTW2FN _0x0,271
00093e 940e 0d1e 	CALL _lcd_putsf
                 ;isTestTombol = true;
000940 e0e1      	LDI  R30,LOW(1)
000941 93e0 0287 	STS  _isTestTombol,R30
                 ;while (1)
                 _0x14B:
                 ;if (!isTestTombol) break;
000943 91e0 0287 	LDS  R30,_isTestTombol
000945 30e0      	CPI  R30,0
000946 f139      	BREQ _0x14D
                 ;if ((t1 == 0))
000947 9998      	SBIC 0x13,0
000948 c009      	RJMP _0x14F
                 ;lcd_gotoxy(0, 0);
000949 e0e0      	LDI  R30,LOW(0)
00094a 940e 0d90 	CALL SUBOPT_0x3
                 ;lcd_putsf("tombol = 1     ");
                +
00094c e9af     +LDI R26 , LOW ( 2 * _0x0 + ( 287 ) )
00094d e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 287 ) )
                 	__POINTW2FN _0x0,287
00094e 940e 0f16 	CALL SUBOPT_0x3F
                 ;isTestTombol = false;
                 ;delay(50);
                 ;changeMenu(0, false, 0);
000950 940e 0ef0 	CALL SUBOPT_0x3A
                 ;if (t2 == 0)
                 _0x14F:
000952 9999      	SBIC 0x13,1
000953 c007      	RJMP _0x150
                 ;lcd_gotoxy(0, 0);
000954 e0e0      	LDI  R30,LOW(0)
000955 940e 0d90 	CALL SUBOPT_0x3
                 ;lcd_putsf("tombol = 2     ");
                +
000957 eaaf     +LDI R26 , LOW ( 2 * _0x0 + ( 303 ) )
000958 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 303 ) )
                 	__POINTW2FN _0x0,303
000959 940e 0d1e 	CALL _lcd_putsf
                 ;if (t3 == 0)
                 _0x150:
00095b 999a      	SBIC 0x13,2
00095c c007      	RJMP _0x151
                 ;lcd_gotoxy(0, 0);
00095d e0e0      	LDI  R30,LOW(0)
00095e 940e 0d90 	CALL SUBOPT_0x3
                 ;lcd_putsf("tombol = 3     ");
                +
000960 ebaf     +LDI R26 , LOW ( 2 * _0x0 + ( 319 ) )
000961 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 319 ) )
                 	__POINTW2FN _0x0,319
000962 940e 0d1e 	CALL _lcd_putsf
                 ;if (t4 == 0)
                 _0x151:
000964 999b      	SBIC 0x13,3
000965 c007      	RJMP _0x152
                 ;lcd_gotoxy(0, 0);
000966 e0e0      	LDI  R30,LOW(0)
000967 940e 0d90 	CALL SUBOPT_0x3
                 ;lcd_putsf("tombol = 4     ");
                +
000969 ecaf     +LDI R26 , LOW ( 2 * _0x0 + ( 335 ) )
00096a e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 335 ) )
                 	__POINTW2FN _0x0,335
00096b 940e 0d1e 	CALL _lcd_putsf
                 _0x152:
00096d cfd5      	RJMP _0x14B
                 _0x14D:
00096e 9508      	RET
                 ; .FEND
                 ;void sens_warna()
                 _sens_warna:
                 ; .FSTART _sens_warna
                 ;lcd_clear();
00096f 940e 0ee8 	CALL SUBOPT_0x38
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Sens Warna");
                +
000971 efad     +LDI R26 , LOW ( 2 * _0x0 + ( 125 ) )
000972 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 125 ) )
                 	__POINTW2FN _0x0,125
000973 940e 0eec 	CALL SUBOPT_0x39
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("Warna:");
                +
000975 edaf     +LDI R26 , LOW ( 2 * _0x0 + ( 351 ) )
000976 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 351 ) )
                 	__POINTW2FN _0x0,351
000977 940e 0d1e 	CALL _lcd_putsf
                 ;isTestTombol = true;
000979 e0e1      	LDI  R30,LOW(1)
00097a 93e0 0287 	STS  _isTestTombol,R30
                 ;bawah_lepas();
00097c db62      	RCALL _bawah_lepas
                 ;delay(200);
00097d eca8      	LDI  R26,LOW(200)
00097e e0b0      	LDI  R27,0
00097f d81a      	RCALL _delay
                 ;ambil(20);
000980 e1a4      	LDI  R26,LOW(20)
000981 e0b0      	LDI  R27,0
000982 db43      	RCALL _ambil
                 ;while (1)
                 _0x153:
                 ;bacawarna();
000983 db60      	RCALL _bacawarna
                 ;if (!isTestTombol) { lcd_clear(); capit_lepas; changeMenu(0, false, 0); break; }
000984 91e0 0287 	LDS  R30,_isTestTombol
000986 30e0      	CPI  R30,0
000987 f439      	BRNE _0x156
000988 940e 0cd3 	CALL _lcd_clear
00098a eee6      	LDI  R30,LOW(230)
00098b 2ede      	MOV  R13,R30
00098c 940e 0ef0 	CALL SUBOPT_0x3A
00098e c00a      	RJMP _0x155
                 ;if ((t1 == 0))
                 _0x156:
00098f 9998      	SBIC 0x13,0
000990 c007      	RJMP _0x157
                 ;lcd_gotoxy(0, 0);
000991 e0e0      	LDI  R30,LOW(0)
000992 940e 0d90 	CALL SUBOPT_0x3
                 ;lcd_putsf("Exiting...");
                +
000994 eea6     +LDI R26 , LOW ( 2 * _0x0 + ( 358 ) )
000995 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 358 ) )
                 	__POINTW2FN _0x0,358
000996 940e 0f16 	CALL SUBOPT_0x3F
                 ;isTestTombol = false;
                 ;delay(50);
                 _0x157:
000998 cfea      	RJMP _0x153
                 _0x155:
000999 9508      	RET
                 ; .FEND
                 ;void test_capit()
                 _test_capit:
                 ; .FSTART _test_capit
                 ;lcd_clear();
00099a 940e 0ee8 	CALL SUBOPT_0x38
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Test Capit");
                +
00099c efa1     +LDI R26 , LOW ( 2 * _0x0 + ( 369 ) )
00099d e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 369 ) )
                 	__POINTW2FN _0x0,369
00099e 940e 0eec 	CALL SUBOPT_0x39
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("Capit: > <");
                +
0009a0 efac     +LDI R26 , LOW ( 2 * _0x0 + ( 380 ) )
0009a1 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 380 ) )
                 	__POINTW2FN _0x0,380
0009a2 940e 0d1e 	CALL _lcd_putsf
                 ;capit_ambil;
0009a4 eeed      	LDI  R30,LOW(237)
0009a5 2ede      	MOV  R13,R30
                 ;delay(50);
0009a6 e3a2      	LDI  R26,LOW(50)
0009a7 e0b0      	LDI  R27,0
0009a8 940e 019a 	CALL _delay
                 ;lcd_gotoxy(0, 1);
0009aa e0e0      	LDI  R30,LOW(0)
0009ab 940e 0e46 	CALL SUBOPT_0x1F
                 ;lcd_putsf("Capit: < >");
                +
0009ad e0a7     +LDI R26 , LOW ( 2 * _0x0 + ( 391 ) )
0009ae e0b2     +LDI R27 , HIGH ( 2 * _0x0 + ( 391 ) )
                 	__POINTW2FN _0x0,391
0009af 940e 0d1e 	CALL _lcd_putsf
                 ;capit_lepas;
0009b1 eee6      	LDI  R30,LOW(230)
0009b2 2ede      	MOV  R13,R30
                 ;delay(100);
0009b3 940e 0ef9 	CALL SUBOPT_0x3B
                 ;lcd_gotoxy(0, 1);
0009b5 e0e0      	LDI  R30,LOW(0)
0009b6 940e 0e46 	CALL SUBOPT_0x1F
                 ;lcd_putsf("Capit: \\/");
                +
0009b8 e1a2     +LDI R26 , LOW ( 2 * _0x0 + ( 402 ) )
0009b9 e0b2     +LDI R27 , HIGH ( 2 * _0x0 + ( 402 ) )
                 	__POINTW2FN _0x0,402
0009ba 940e 0d1e 	CALL _lcd_putsf
                 ;lengan_bawah;
0009bc efe0      	LDI  R30,LOW(240)
0009bd 2ece      	MOV  R12,R30
                 ;delay(100);
0009be 940e 0ef9 	CALL SUBOPT_0x3B
                 ;lcd_gotoxy(0, 1);
0009c0 e0e0      	LDI  R30,LOW(0)
0009c1 940e 0e46 	CALL SUBOPT_0x1F
                 ;lcd_putsf("Capit: /\\");
                +
0009c3 e1ac     +LDI R26 , LOW ( 2 * _0x0 + ( 412 ) )
0009c4 e0b2     +LDI R27 , HIGH ( 2 * _0x0 + ( 412 ) )
                 	__POINTW2FN _0x0,412
0009c5 940e 0d1e 	CALL _lcd_putsf
                 ;lengan_atas;
0009c7 eeea      	LDI  R30,LOW(234)
0009c8 2ece      	MOV  R12,R30
                 ;delay(100);
0009c9 940e 0ef9 	CALL SUBOPT_0x3B
0009cb 9508      	RET
                 ; .FEND
                 ;void tepuk_tangan() {
                 ;lcd_clear();
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("Hold 1 to exit");
                 ;lcd_gotoxy(0, 0);
                 ;while (1)
                 ;lcd_putsf("XD");
                 ;if(t1 == 0) break;
                 ;capit_lepas;
                 ;if(t1 == 0) break;
                 ;delay(50);
                 ;if(t1 == 0) break;
                 ;capit_ambil;
                 ;if(t1 == 0) break;
                 ;delay(50);
                 ;if(t1 == 0) break;
                 ;void display_map() {
                 _display_map:
                 ; .FSTART _display_map
                 ;cek_sensor();
0009cc d81e      	RCALL _cek_sensor
                 ;lcd_gotoxy(7, 0);
0009cd e0e7      	LDI  R30,LOW(7)
0009ce 940e 0d90 	CALL SUBOPT_0x3
                 ;sprintf(buff, "%d", mapMirror);
0009d0 940e 0d94 	CALL SUBOPT_0x4
                +
0009d2 e8ec     +LDI R30 , LOW ( 2 * _0x0 + ( 12 ) )
0009d3 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 12 ) )
                 	__POINTW1FN _0x0,12
0009d4 93fa      	ST   -Y,R31
0009d5 93ea      	ST   -Y,R30
0009d6 91e0 02a5 	LDS  R30,_mapMirror
0009d8 91f0 02a6 	LDS  R31,_mapMirror+1
0009da 940e 0dde 	CALL SUBOPT_0xD
0009dc e084      	LDI  R24,4
0009dd 940e 0c20 	CALL _sprintf
0009df 9628      	ADIW R28,8
                 ;lcd_puts(buff);
0009e0 e6a0      	LDI  R26,LOW(_buff)
0009e1 e0b2      	LDI  R27,HIGH(_buff)
0009e2 940e 0d0f 	CALL _lcd_puts
0009e4 9508      	RET
                 ; .FEND
                 ;void tes_sensor()
                 ;for (i = 0; i < 7; i++)
                 ;lcd_gotoxy(0, 0);
                 ;sprintf(buff, "sensor:%d = %d  ", i, read_adc(i));
                 ;lcd_puts(buff);
                 ;delay_ms(100);
                 ;void tampil_count()
                 ;lcd_gotoxy(0, 0);
                 ;sprintf(buff, " %d  ", second);
                 ;lcd_puts(buff);
                 ;interrupt[TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 006C {
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
0009e5 93aa      	ST   -Y,R26
0009e6 93ea      	ST   -Y,R30
0009e7 b7ef      	IN   R30,SREG
0009e8 93ea      	ST   -Y,R30
                 ; 0000 006D TCNT0 = 0x96; // BE
0009e9 e9e6      	LDI  R30,LOW(150)
0009ea bfe2      	OUT  0x32,R30
                 ; 0000 006E a++;
0009eb 91e0 0281 	LDS  R30,_a
0009ed 5fef      	SUBI R30,-LOW(1)
0009ee 93e0 0281 	STS  _a,R30
                 ; 0000 006F 
                 ; 0000 0070 if (a <= pos_servo1)
0009f0 91a0 0281 	LDS  R26,_a
0009f2 16da      	CP   R13,R26
0009f3 f010      	BRLO _0x163
                 ; 0000 0071 {
                 ; 0000 0072 servo1 = 0;
0009f4 98ae      	CBI  0x15,6
                 ; 0000 0073 }
                 ; 0000 0074 else
0009f5 c001      	RJMP _0x166
                 _0x163:
                 ; 0000 0075 {
                 ; 0000 0076 servo1 = 1;
0009f6 9aae      	SBI  0x15,6
                 ; 0000 0077 }
                 _0x166:
                 ; 0000 0078 if (a <= pos_servo2)
0009f7 91a0 0281 	LDS  R26,_a
0009f9 16ca      	CP   R12,R26
0009fa f010      	BRLO _0x169
                 ; 0000 0079 {
                 ; 0000 007A servo2 = 0;
0009fb 98af      	CBI  0x15,7
                 ; 0000 007B }
                 ; 0000 007C else
0009fc c001      	RJMP _0x16C
                 _0x169:
                 ; 0000 007D {
                 ; 0000 007E servo2 = 1;
0009fd 9aaf      	SBI  0x15,7
                 ; 0000 007F }
                 _0x16C:
                 ; 0000 0080 // if (a <= pos_gulung)
                 ; 0000 0081 // {
                 ; 0000 0082 //     servo_gulung = 0;
                 ; 0000 0083 // }
                 ; 0000 0084 // else
                 ; 0000 0085 // {
                 ; 0000 0086 //     servo_gulung = 1;
                 ; 0000 0087 // }
                 ; 0000 0088 }
0009fe 91e9      	LD   R30,Y+
0009ff bfef      	OUT  SREG,R30
000a00 91e9      	LD   R30,Y+
000a01 91a9      	LD   R26,Y+
000a02 9518      	RETI
                 ; .FEND
                 ;interrupt[TIM0_COMP] void timer0_comp_isr(void)
                 ; 0000 008C {
                 _timer0_comp_isr:
                 ; .FSTART _timer0_comp_isr
                 ; 0000 008D // Place your code here
                 ; 0000 008E }
000a03 9518      	RETI
                 ; .FEND
                 ;void main(void)
                 ; 0000 0091 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0092 // Declare your local variables here
                 ; 0000 0093 
                 ; 0000 0094 // Input/Output Ports initialization
                 ; 0000 0095 // Port A initialization
                 ; 0000 0096 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0097 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0098 PORTA = 0x00;
000a04 e0e0      	LDI  R30,LOW(0)
000a05 bbeb      	OUT  0x1B,R30
                 ; 0000 0099 DDRA = 0x00;
000a06 bbea      	OUT  0x1A,R30
                 ; 0000 009A 
                 ; 0000 009B // Port B initialization
                 ; 0000 009C // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 009D // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 009E PORTB = 0x08;
000a07 e0e8      	LDI  R30,LOW(8)
000a08 bbe8      	OUT  0x18,R30
                 ; 0000 009F DDRB = 0Xff; // 0x08;
000a09 efef      	LDI  R30,LOW(255)
000a0a bbe7      	OUT  0x17,R30
                 ; 0000 00A0 
                 ; 0000 00A1 // Port C initialization
                 ; 0000 00A2 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 00A3 // State7=T State6=T State5=T State4=T State3=P State2=P State1=P State0=P
                 ; 0000 00A4 PORTC = 0xFF;
000a0b bbe5      	OUT  0x15,R30
                 ; 0000 00A5 DDRC = 0xF0; // C0
000a0c efe0      	LDI  R30,LOW(240)
000a0d bbe4      	OUT  0x14,R30
                 ; 0000 00A6 
                 ; 0000 00A7 // Port D initialization
                 ; 0000 00A8 // Func7=In Func6=In Func5=Out Func4=Out Func3=In Func2=In Func1=In Func0=In
                 ; 0000 00A9 // State7=T State6=T State5=0 State4=0 State3=T State2=T State1=T State0=T
                 ; 0000 00AA PORTD = 0x03;
000a0e e0e3      	LDI  R30,LOW(3)
000a0f bbe2      	OUT  0x12,R30
                 ; 0000 00AB DDRD = 0xFC; // 3F
000a10 efec      	LDI  R30,LOW(252)
000a11 bbe1      	OUT  0x11,R30
                 ; 0000 00AC 
                 ; 0000 00AD // Timer/Counter 0 initialization
                 ; 0000 00AE TCCR0 = 0x4A;
000a12 e4ea      	LDI  R30,LOW(74)
000a13 bfe3      	OUT  0x33,R30
                 ; 0000 00AF TCNT0 = 0x96;
000a14 e9e6      	LDI  R30,LOW(150)
000a15 bfe2      	OUT  0x32,R30
                 ; 0000 00B0 OCR0 = 0x00;
000a16 e0e0      	LDI  R30,LOW(0)
000a17 bfec      	OUT  0x3C,R30
                 ; 0000 00B1 
                 ; 0000 00B2 // Timer/Counter 1 initialization
                 ; 0000 00B3 TCCR1A = 0xA1;
000a18 eae1      	LDI  R30,LOW(161)
000a19 bdef      	OUT  0x2F,R30
                 ; 0000 00B4 TCCR1B = 0x09;
000a1a e0e9      	LDI  R30,LOW(9)
000a1b bdee      	OUT  0x2E,R30
                 ; 0000 00B5 TCNT1H = 0x00;
000a1c e0e0      	LDI  R30,LOW(0)
000a1d bded      	OUT  0x2D,R30
                 ; 0000 00B6 TCNT1L = 0x00;
000a1e bdec      	OUT  0x2C,R30
                 ; 0000 00B7 ICR1H = 0x00;
000a1f bde7      	OUT  0x27,R30
                 ; 0000 00B8 ICR1L = 0x00;
000a20 bde6      	OUT  0x26,R30
                 ; 0000 00B9 OCR1AH = 0x00;
000a21 bdeb      	OUT  0x2B,R30
                 ; 0000 00BA OCR1AL = 0x00;
000a22 bdea      	OUT  0x2A,R30
                 ; 0000 00BB OCR1BH = 0x00;
000a23 bde9      	OUT  0x29,R30
                 ; 0000 00BC OCR1BL = 0x00;
000a24 bde8      	OUT  0x28,R30
                 ; 0000 00BD 
                 ; 0000 00BE // Timer/Counter 2 initialization
                 ; 0000 00BF // Clock source: System Clock
                 ; 0000 00C0 // Clock value: Timer 2 Stopped
                 ; 0000 00C1 // Mode: Normal top=FFh
                 ; 0000 00C2 // OC2 output: Disconnected
                 ; 0000 00C3 ASSR = 0x00;
000a25 bde2      	OUT  0x22,R30
                 ; 0000 00C4 TCCR2 = 0x00;
000a26 bde5      	OUT  0x25,R30
                 ; 0000 00C5 TCNT2 = 0x00;
000a27 bde4      	OUT  0x24,R30
                 ; 0000 00C6 OCR2 = 0x00;
000a28 bde3      	OUT  0x23,R30
                 ; 0000 00C7 
                 ; 0000 00C8 // External Interrupt(s) initialization
                 ; 0000 00C9 // INT0: Off
                 ; 0000 00CA // INT1: Off
                 ; 0000 00CB // INT2: Off
                 ; 0000 00CC MCUCR = 0x00;
000a29 bfe5      	OUT  0x35,R30
                 ; 0000 00CD MCUCSR = 0x00;
000a2a bfe4      	OUT  0x34,R30
                 ; 0000 00CE 
                 ; 0000 00CF // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 00D0 TIMSK = 0x01;
000a2b e0e1      	LDI  R30,LOW(1)
000a2c bfe9      	OUT  0x39,R30
                 ; 0000 00D1 
                 ; 0000 00D2 // Analog Comparator initialization
                 ; 0000 00D3 // Analog Comparator: Off
                 ; 0000 00D4 // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0000 00D5 ACSR = 0x80;
000a2d e8e0      	LDI  R30,LOW(128)
000a2e b9e8      	OUT  0x8,R30
                 ; 0000 00D6 SFIOR = 0x00;
000a2f e0e0      	LDI  R30,LOW(0)
000a30 bfe0      	OUT  0x30,R30
                 ; 0000 00D7 
                 ; 0000 00D8 MCUCR = 0x00;
000a31 bfe5      	OUT  0x35,R30
                 ; 0000 00D9 MCUCSR = 0x00;
000a32 bfe4      	OUT  0x34,R30
                 ; 0000 00DA 
                 ; 0000 00DB // USART, UNTUK KOMUNIKASI BLUETOOTH
                 ; 0000 00DC UCSRA = 0x00;
000a33 b9eb      	OUT  0xB,R30
                 ; 0000 00DD UCSRB = 0x18;
000a34 e1e8      	LDI  R30,LOW(24)
000a35 b9ea      	OUT  0xA,R30
                 ; 0000 00DE UCSRC = 0x86;
000a36 e8e6      	LDI  R30,LOW(134)
000a37 bde0      	OUT  0x20,R30
                 ; 0000 00DF UBRRH = 0x00;
000a38 e0e0      	LDI  R30,LOW(0)
000a39 bde0      	OUT  0x20,R30
                 ; 0000 00E0 UBRRL = 0x47;
000a3a e4e7      	LDI  R30,LOW(71)
000a3b b9e9      	OUT  0x9,R30
                 ; 0000 00E1 // ADC initialization
                 ; 0000 00E2 // ADC Clock frequency: 691.200 kHz
                 ; 0000 00E3 // ADC Voltage Reference: AVCC pin
                 ; 0000 00E4 // ADC Auto Trigger Source: None
                 ; 0000 00E5 // Only the 8 most significant bits of
                 ; 0000 00E6 // the AD conversion result are used
                 ; 0000 00E7 ADMUX = ADC_VREF_TYPE & 0xff;
000a3c e6e0      	LDI  R30,LOW(96)
000a3d b9e7      	OUT  0x7,R30
                 ; 0000 00E8 ADCSRA = 0x84;
000a3e e8e4      	LDI  R30,LOW(132)
000a3f b9e6      	OUT  0x6,R30
                 ; 0000 00E9 // ADCSRA=0xA6;
                 ; 0000 00EA SFIOR &= 0x1F;
000a40 b7e0      	IN   R30,0x30
000a41 71ef      	ANDI R30,LOW(0x1F)
000a42 bfe0      	OUT  0x30,R30
                 ; 0000 00EB 
                 ; 0000 00EC // LCD module initialization
                 ; 0000 00ED lcd_init(16); //
000a43 e1a0      	LDI  R26,LOW(16)
000a44 940e 0d42 	CALL _lcd_init
                 ; 0000 00EE lcd_clear();  //
000a46 940e 0cd3 	CALL _lcd_clear
                 ; 0000 00EF lampu = 0;    //
000a48 98c3      	CBI  0x18,3
                 ; 0000 00F0 // k,b
                 ; 0000 00F1 lcd_gotoxy(0, 0);
000a49 e0e0      	LDI  R30,LOW(0)
000a4a 940e 0d90 	CALL SUBOPT_0x3
                 ; 0000 00F2 lcd_putsf("     LEGION     ");
                +
000a4c e3a8     +LDI R26 , LOW ( 2 * _0x0 + ( 440 ) )
000a4d e0b2     +LDI R27 , HIGH ( 2 * _0x0 + ( 440 ) )
                 	__POINTW2FN _0x0,440
000a4e 940e 0eec 	CALL SUBOPT_0x39
                 ; 0000 00F3 lcd_gotoxy(0, 1);
                 ; 0000 00F4 lcd_putsf(" MAN 4 JOMBANG ");
                +
000a50 e4a9     +LDI R26 , LOW ( 2 * _0x0 + ( 457 ) )
000a51 e0b2     +LDI R27 , HIGH ( 2 * _0x0 + ( 457 ) )
                 	__POINTW2FN _0x0,457
000a52 940e 0d1e 	CALL _lcd_putsf
                 ; 0000 00F5 delay_ms(50);
000a54 e3a2      	LDI  R26,LOW(50)
000a55 e0b0      	LDI  R27,0
000a56 940e 10ca 	CALL _delay_ms
                 ; 0000 00F6 lcd_clear();
000a58 940e 0cd3 	CALL _lcd_clear
                 ; 0000 00F7 
                 ; 0000 00F8 // PROGRAM UTAMA
                 ; 0000 00F9 // Global enable interrupts
                 ; 0000 00FA #asm("sei")
000a5a 9478      	SEI
                 ; 0000 00FB lengan_atas;
000a5b eeea      	LDI  R30,LOW(234)
000a5c 2ece      	MOV  R12,R30
                 ; 0000 00FC capit_lepas;
000a5d eee6      	LDI  R30,LOW(230)
000a5e 2ede      	MOV  R13,R30
                 ; 0000 00FD // gulung_stop;
                 ; 0000 00FE 
                 ; 0000 00FF /// mapMirror = 0 - map/lintasan bagian biru
                 ; 0000 0100 /// mapMirror = 1 - map/lintasan bagian merah
                 ; 0000 0101 if(mapMirror != 0 && mapMirror != 1) mapMirror = 0;
000a5f 91a0 02a5 	LDS  R26,_mapMirror
000a61 91b0 02a6 	LDS  R27,_mapMirror+1
000a63 9710      	SBIW R26,0
000a64 f011      	BREQ _0x172
000a65 9711      	SBIW R26,1
000a66 f409      	BRNE _0x173
                 _0x172:
000a67 c005      	RJMP _0x171
                 _0x173:
000a68 e0e0      	LDI  R30,LOW(0)
000a69 93e0 02a5 	STS  _mapMirror,R30
000a6b 93e0 02a6 	STS  _mapMirror+1,R30
                 ; 0000 0102 
                 ; 0000 0103 lcd_clear();
                 _0x171:
000a6d 940e 0ee8 	CALL SUBOPT_0x38
                 ; 0000 0104 lcd_gotoxy(0, 0);
                 ; 0000 0105 lcd_putsf("Menu");
                +
000a6f eea4     +LDI R26 , LOW ( 2 * _0x0 + ( 100 ) )
000a70 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 100 ) )
                 	__POINTW2FN _0x0,100
000a71 940e 0eec 	CALL SUBOPT_0x39
                 ; 0000 0106 lcd_gotoxy(0, 1);
                 ; 0000 0107 lcd_putsf("Calibration");
                +
000a73 eea9     +LDI R26 , LOW ( 2 * _0x0 + ( 105 ) )
000a74 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 105 ) )
                 	__POINTW2FN _0x0,105
000a75 940e 0d1e 	CALL _lcd_putsf
                 ; 0000 0108 
                 ; 0000 0109 while(1) {
                 _0x174:
                 ; 0000 010A if(!isChildSelect) {
000a77 91e0 0286 	LDS  R30,_isChildSelect
000a79 30e0      	CPI  R30,0
000a7a f421      	BRNE _0x177
                 ; 0000 010B display_sensor();
000a7b 940e 01ee 	CALL _display_sensor
                 ; 0000 010C bacawarna();
000a7d da66      	RCALL _bacawarna
                 ; 0000 010D display_map();
000a7e df4d      	RCALL _display_map
                 ; 0000 010E }
                 ; 0000 010F 
                 ; 0000 0110 // lcd_gotoxy(0, 1);
                 ; 0000 0111 // sprintf(buff, "button1 = %d  ", count_btn);
                 ; 0000 0112 // lcd_puts(buff);
                 ; 0000 0113 
                 ; 0000 0114 //bacawarna();
                 ; 0000 0115 if((t1 == 0)) {
                 _0x177:
000a7f 9998      	SBIC 0x13,0
000a80 c01c      	RJMP _0x178
                 ; 0000 0116 // Program_Jalan();
                 ; 0000 0117 
                 ; 0000 0118 if(!isChildSelect) count_btn ++;
000a81 91e0 0286 	LDS  R30,_isChildSelect
000a83 30e0      	CPI  R30,0
000a84 f421      	BRNE _0x179
000a85 e8a2      	LDI  R26,LOW(_count_btn)
000a86 e0b2      	LDI  R27,HIGH(_count_btn)
000a87 940e 0e1f 	CALL SUBOPT_0x19
                 ; 0000 0119 // if(isChildSelect) count_child_btn ++;
                 ; 0000 011A if(count_btn >= 6) count_btn = 0;
                 _0x179:
000a89 91a0 0282 	LDS  R26,_count_btn
000a8b 91b0 0283 	LDS  R27,_count_btn+1
000a8d 9716      	SBIW R26,6
000a8e f02c      	BRLT _0x17A
000a8f e0e0      	LDI  R30,LOW(0)
000a90 93e0 0282 	STS  _count_btn,R30
000a92 93e0 0283 	STS  _count_btn+1,R30
                 ; 0000 011B delay(10);
                 _0x17A:
000a94 e0aa      	LDI  R26,LOW(10)
000a95 e0b0      	LDI  R27,0
000a96 940e 019a 	CALL _delay
                 ; 0000 011C changeMenu(count_btn, false, count_child_btn);
000a98 940e 0f1f 	CALL SUBOPT_0x40
000a9a e0e0      	LDI  R30,LOW(0)
000a9b 940e 0f26 	CALL SUBOPT_0x41
                 ; 0000 011D 
                 ; 0000 011E // buttonhold[0] += 1;
                 ; 0000 011F // while((t1 == 0) && !isTestTombol && !isDelayClick1) {
                 ; 0000 0120 //     isDelayClick1 = true;
                 ; 0000 0121 //     delay(3);
                 ; 0000 0122 //     if(buttonhold[0] > 20) {
                 ; 0000 0123 //         isSelect = true;
                 ; 0000 0124 //         changeMenu();
                 ; 0000 0125 //     } else {
                 ; 0000 0126 //         isSelect = false; isChildSelect = false;
                 ; 0000 0127 //         changeMenu();
                 ; 0000 0128 //         buttonhold[0] = 0;
                 ; 0000 0129 //     }
                 ; 0000 012A //     isDelayClick1 = false; break;
                 ; 0000 012B // }
                 ; 0000 012C // lcd_gotoxy(0, 0);
                 ; 0000 012D // sprintf(buff, "button1 = %d  ", button1click);
                 ; 0000 012E }
                 ; 0000 012F if((t2 == 0)) {
                 _0x178:
000a9d 9999      	SBIC 0x13,1
000a9e c009      	RJMP _0x17B
                 ; 0000 0130 changeMenu(count_btn, true, count_child_btn);
000a9f 940e 0f1f 	CALL SUBOPT_0x40
000aa1 e0e1      	LDI  R30,LOW(1)
000aa2 940e 0f26 	CALL SUBOPT_0x41
                 ; 0000 0131 delay(10);
000aa4 e0aa      	LDI  R26,LOW(10)
000aa5 e0b0      	LDI  R27,0
000aa6 940e 019a 	CALL _delay
                 ; 0000 0132 }
                 ; 0000 0133 // lcd_puts(buff);
                 ; 0000 0134 // } else if((t1 == 1)) {
                 ; 0000 0135 //     buttonhold[0] = 0;
                 ; 0000 0136 //     isDelayClick1 = false;
                 ; 0000 0137 // }
                 ; 0000 0138 
                 ; 0000 0139 // if ((count_btn==0) && (t2==0)){
                 ; 0000 013A //     lcd_clear();
                 ; 0000 013B //     lcd_gotoxy(0, 0);
                 ; 0000 013C //     lcd_putsf("menu 1");
                 ; 0000 013D // } else if((count_btn == 1) && (t2 == 0)) {
                 ; 0000 013E //     lcd_clear();
                 ; 0000 013F //     lcd_gotoxy(0, 0);
                 ; 0000 0140 //     lcd_putsf("menu 2");
                 ; 0000 0141 // } else if((count_btn == 2) && (t2 == 0)) {
                 ; 0000 0142 //     lcd_clear();
                 ; 0000 0143 //     lcd_gotoxy(0, 0);
                 ; 0000 0144 //     lcd_putsf("menu 3");
                 ; 0000 0145 // } else if((count_btn == 3) && (t2 == 0)) {
                 ; 0000 0146 //     lcd_clear();
                 ; 0000 0147 //     lcd_gotoxy(0, 0);
                 ; 0000 0148 //     lcd_putsf("menu 4");
                 ; 0000 0149 // } else if((count_btn == 4) && (t2 == 0)) {
                 ; 0000 014A //     lcd_clear();
                 ; 0000 014B //     lcd_gotoxy(0, 0);
                 ; 0000 014C //     lcd_putsf("menu 5");
                 ; 0000 014D // } else if((count_btn == 5) && (t2 == 0)) {
                 ; 0000 014E //     lcd_clear();
                 ; 0000 014F //     lcd_gotoxy(0, 0);
                 ; 0000 0150 //     lcd_putsf("menu 6");
                 ; 0000 0151 // } else if((count_btn == 6) && (t2 == 0)) {
                 ; 0000 0152 //     lcd_clear();
                 ; 0000 0153 //     lcd_gotoxy(0, 0);
                 ; 0000 0154 //     lcd_putsf("menu 7");
                 ; 0000 0155 // } else if((count_btn == 7) && (t2 == 0)) {
                 ; 0000 0156 //     lcd_clear();
                 ; 0000 0157 //     lcd_gotoxy(0, 0);
                 ; 0000 0158 //     lcd_putsf("menu 8");
                 ; 0000 0159 // } else if((count_btn == 8) && (t2 == 0)) {
                 ; 0000 015A //     lcd_clear();
                 ; 0000 015B //     lcd_gotoxy(0, 0);
                 ; 0000 015C //     lcd_putsf("menu 9");
                 ; 0000 015D // } else if((count_btn == 9) && (t2 == 0)) {
                 ; 0000 015E //     lcd_clear();
                 ; 0000 015F //     lcd_gotoxy(0, 0);
                 ; 0000 0160 //     lcd_putsf("menu 10");
                 ; 0000 0161 // } else if((count_btn == 10) && (t2 == 0)) {
                 ; 0000 0162 //     lcd_clear();
                 ; 0000 0163 //     lcd_gotoxy(0, 0);
                 ; 0000 0164 // }
                 ; 0000 0165 
                 ; 0000 0166 // if (    (t2 == 0)
                 ; 0000 0167 //         && !isTestTombol
                 ; 0000 0168 //         && (!isChildSelect && menuSelect == 0) // Jika Menu di Run Bot, janga ...
                 ; 0000 0169 //     ) {
                 ; 0000 016A 
                 ; 0000 016B //         // lengan_bawah;
                 ; 0000 016C //         // delay(50);
                 ; 0000 016D //     // menuSelect += 1;
                 ; 0000 016E //     // if(menuSelect >= 4) menuSelect = 0;
                 ; 0000 016F //     // changeMenu();
                 ; 0000 0170 
                 ; 0000 0171 //     scan_garis();
                 ; 0000 0172 //     delay(300);
                 ; 0000 0173 //     scan_back();
                 ; 0000 0174 //     delay(100);
                 ; 0000 0175 //     hit_tengah();
                 ; 0000 0176 
                 ; 0000 0177 //     // button1click = 0;
                 ; 0000 0178 //     // lcd_gotoxy(0, 0);
                 ; 0000 0179 //     // sprintf(buff, "button1 = %d  ", button1click);
                 ; 0000 017A //     // lcd_puts(buff);
                 ; 0000 017B // }
                 ; 0000 017C }
                 _0x17B:
000aa8 cfce      	RJMP _0x174
                 ; 0000 017D }
                 _0x17C:
000aa9 cfff      	RJMP _0x17C
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
000aaa 93ba      	ST   -Y,R27
000aab 93aa      	ST   -Y,R26
000aac 931a      	ST   -Y,R17
000aad 930a      	ST   -Y,R16
000aae 81aa      	LDD  R26,Y+2
000aaf 81bb      	LDD  R27,Y+2+1
000ab0 9612      	ADIW R26,2
000ab1 940e 0fa9 	CALL __GETW1P
000ab3 9730      	SBIW R30,0
000ab4 f129      	BREQ _0x2000010
000ab5 81aa      	LDD  R26,Y+2
000ab6 81bb      	LDD  R27,Y+2+1
000ab7 9614      	ADIW R26,4
000ab8 940e 0fa9 	CALL __GETW1P
000aba 018f      	MOVW R16,R30
000abb 9730      	SBIW R30,0
000abc f061      	BREQ _0x2000012
                +
000abd 3002     +CPI R16 , LOW ( 2 )
000abe e0e0     +LDI R30 , HIGH ( 2 )
000abf 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000ac0 f080      	BRLO _0x2000013
000ac1 01f8      	MOVW R30,R16
000ac2 9731      	SBIW R30,1
000ac3 018f      	MOVW R16,R30
                +
000ac4 81aa     +LDD R26 , Y + 2
000ac5 81bb     +LDD R27 , Y + 2 + 1
000ac6 9614     +ADIW R26 , 4
000ac7 93ed     +ST X + , R30
000ac8 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
000ac9 81aa      	LDD  R26,Y+2
000aca 81bb      	LDD  R27,Y+2+1
000acb 9612      	ADIW R26,2
000acc 940e 0e1f 	CALL SUBOPT_0x19
000ace 9731      	SBIW R30,1
000acf 81ac      	LDD  R26,Y+4
000ad0 83a0      	STD  Z+0,R26
                 _0x2000013:
000ad1 81aa      	LDD  R26,Y+2
000ad2 81bb      	LDD  R27,Y+2+1
000ad3 940e 0fa9 	CALL __GETW1P
000ad5 23ff      	TST  R31
000ad6 f012      	BRMI _0x2000014
000ad7 940e 0e1f 	CALL SUBOPT_0x19
                 _0x2000014:
000ad9 c006      	RJMP _0x2000015
                 _0x2000010:
000ada 81aa      	LDD  R26,Y+2
000adb 81bb      	LDD  R27,Y+2+1
000adc efef      	LDI  R30,LOW(65535)
000add efff      	LDI  R31,HIGH(65535)
000ade 93ed      	ST   X+,R30
000adf 93fc      	ST   X,R31
                 _0x2000015:
000ae0 8119      	LDD  R17,Y+1
000ae1 8108      	LDD  R16,Y+0
                 _0x20C0004:
000ae2 9625      	ADIW R28,5
000ae3 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
000ae4 93ba      	ST   -Y,R27
000ae5 93aa      	ST   -Y,R26
000ae6 9726      	SBIW R28,6
000ae7 940e 0f53 	CALL __SAVELOCR6
000ae9 e010      	LDI  R17,0
000aea 85ac      	LDD  R26,Y+12
000aeb 85bd      	LDD  R27,Y+12+1
000aec e0e0      	LDI  R30,LOW(0)
000aed e0f0      	LDI  R31,HIGH(0)
000aee 93ed      	ST   X+,R30
000aef 93fc      	ST   X,R31
                 _0x2000016:
000af0 89ea      	LDD  R30,Y+18
000af1 89fb      	LDD  R31,Y+18+1
000af2 9631      	ADIW R30,1
000af3 8bea      	STD  Y+18,R30
000af4 8bfb      	STD  Y+18+1,R31
000af5 9731      	SBIW R30,1
000af6 91e4      	LPM  R30,Z
000af7 2f2e      	MOV  R18,R30
000af8 30e0      	CPI  R30,0
000af9 f409      	BRNE PC+2
000afa c11d      	RJMP _0x2000018
000afb 2fe1      	MOV  R30,R17
000afc 30e0      	CPI  R30,0
000afd f439      	BRNE _0x200001C
000afe 3225      	CPI  R18,37
000aff f411      	BRNE _0x200001D
000b00 e011      	LDI  R17,LOW(1)
000b01 c002      	RJMP _0x200001E
                 _0x200001D:
000b02 940e 0f2d 	CALL SUBOPT_0x42
                 _0x200001E:
000b04 c112      	RJMP _0x200001B
                 _0x200001C:
000b05 30e1      	CPI  R30,LOW(0x1)
000b06 f4a9      	BRNE _0x200001F
000b07 3225      	CPI  R18,37
000b08 f419      	BRNE _0x2000020
000b09 940e 0f2d 	CALL SUBOPT_0x42
000b0b c10a      	RJMP _0x20000CC
                 _0x2000020:
000b0c e012      	LDI  R17,LOW(2)
000b0d e040      	LDI  R20,LOW(0)
000b0e e000      	LDI  R16,LOW(0)
000b0f 322d      	CPI  R18,45
000b10 f411      	BRNE _0x2000021
000b11 e001      	LDI  R16,LOW(1)
000b12 c104      	RJMP _0x200001B
                 _0x2000021:
000b13 322b      	CPI  R18,43
000b14 f411      	BRNE _0x2000022
000b15 e24b      	LDI  R20,LOW(43)
000b16 c100      	RJMP _0x200001B
                 _0x2000022:
000b17 3220      	CPI  R18,32
000b18 f411      	BRNE _0x2000023
000b19 e240      	LDI  R20,LOW(32)
000b1a c0fc      	RJMP _0x200001B
                 _0x2000023:
000b1b c002      	RJMP _0x2000024
                 _0x200001F:
000b1c 30e2      	CPI  R30,LOW(0x2)
000b1d f439      	BRNE _0x2000025
                 _0x2000024:
000b1e e050      	LDI  R21,LOW(0)
000b1f e013      	LDI  R17,LOW(3)
000b20 3320      	CPI  R18,48
000b21 f411      	BRNE _0x2000026
000b22 6800      	ORI  R16,LOW(128)
000b23 c0f3      	RJMP _0x200001B
                 _0x2000026:
000b24 c003      	RJMP _0x2000027
                 _0x2000025:
000b25 30e3      	CPI  R30,LOW(0x3)
000b26 f009      	BREQ PC+2
000b27 c0ef      	RJMP _0x200001B
                 _0x2000027:
000b28 3320      	CPI  R18,48
000b29 f010      	BRLO _0x200002A
000b2a 332a      	CPI  R18,58
000b2b f008      	BRLO _0x200002B
                 _0x200002A:
000b2c c007      	RJMP _0x2000029
                 _0x200002B:
000b2d e0aa      	LDI  R26,LOW(10)
000b2e 9f5a      	MUL  R21,R26
000b2f 2d50      	MOV  R21,R0
000b30 2fe2      	MOV  R30,R18
000b31 53e0      	SUBI R30,LOW(48)
000b32 0f5e      	ADD  R21,R30
000b33 c0e3      	RJMP _0x200001B
                 _0x2000029:
000b34 2fe2      	MOV  R30,R18
000b35 36e3      	CPI  R30,LOW(0x63)
000b36 f449      	BRNE _0x200002F
000b37 940e 0f34 	CALL SUBOPT_0x43
000b39 89e8      	LDD  R30,Y+16
000b3a 89f9      	LDD  R31,Y+16+1
000b3b 81a4      	LDD  R26,Z+4
000b3c 93aa      	ST   -Y,R26
000b3d 940e 0f3a 	CALL SUBOPT_0x44
000b3f c0d6      	RJMP _0x2000030
                 _0x200002F:
000b40 37e3      	CPI  R30,LOW(0x73)
000b41 f441      	BRNE _0x2000032
000b42 940e 0f34 	CALL SUBOPT_0x43
000b44 940e 0f40 	CALL SUBOPT_0x45
000b46 940e 0c5c 	CALL _strlen
000b48 2f1e      	MOV  R17,R30
000b49 c00a      	RJMP _0x2000033
                 _0x2000032:
000b4a 37e0      	CPI  R30,LOW(0x70)
000b4b f461      	BRNE _0x2000035
000b4c 940e 0f34 	CALL SUBOPT_0x43
000b4e 940e 0f40 	CALL SUBOPT_0x45
000b50 940e 0c68 	CALL _strlenf
000b52 2f1e      	MOV  R17,R30
000b53 6008      	ORI  R16,LOW(8)
                 _0x2000033:
000b54 6002      	ORI  R16,LOW(2)
000b55 770f      	ANDI R16,LOW(127)
000b56 e030      	LDI  R19,LOW(0)
000b57 c03c      	RJMP _0x2000036
                 _0x2000035:
000b58 36e4      	CPI  R30,LOW(0x64)
000b59 f011      	BREQ _0x2000039
000b5a 36e9      	CPI  R30,LOW(0x69)
000b5b f411      	BRNE _0x200003A
                 _0x2000039:
000b5c 6004      	ORI  R16,LOW(4)
000b5d c002      	RJMP _0x200003B
                 _0x200003A:
000b5e 37e5      	CPI  R30,LOW(0x75)
000b5f f431      	BRNE _0x200003C
                 _0x200003B:
000b60 e5e4      	LDI  R30,LOW(_tbl10_G100*2)
000b61 e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
000b62 83ee      	STD  Y+6,R30
000b63 83ff      	STD  Y+6+1,R31
000b64 e015      	LDI  R17,LOW(5)
000b65 c00c      	RJMP _0x200003D
                 _0x200003C:
000b66 35e8      	CPI  R30,LOW(0x58)
000b67 f411      	BRNE _0x200003F
000b68 6008      	ORI  R16,LOW(8)
000b69 c003      	RJMP _0x2000040
                 _0x200003F:
000b6a 37e8      	CPI  R30,LOW(0x78)
000b6b f009      	BREQ PC+2
000b6c c0a9      	RJMP _0x2000071
                 _0x2000040:
000b6d e5ee      	LDI  R30,LOW(_tbl16_G100*2)
000b6e e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
000b6f 83ee      	STD  Y+6,R30
000b70 83ff      	STD  Y+6+1,R31
000b71 e014      	LDI  R17,LOW(4)
                 _0x200003D:
000b72 ff02      	SBRS R16,2
000b73 c017      	RJMP _0x2000042
000b74 940e 0f34 	CALL SUBOPT_0x43
000b76 89a8      	LDD  R26,Y+16
000b77 89b9      	LDD  R27,Y+16+1
000b78 9614      	ADIW R26,4
000b79 91ed      	LD   R30,X+
000b7a 91fd      	LD   R31,X+
000b7b 87ea      	STD  Y+10,R30
000b7c 87fb      	STD  Y+10+1,R31
000b7d 85ab      	LDD  R26,Y+11
000b7e 23aa      	TST  R26
000b7f f42a      	BRPL _0x2000043
000b80 940e 0f65 	CALL __ANEGW1
000b82 87ea      	STD  Y+10,R30
000b83 87fb      	STD  Y+10+1,R31
000b84 e24d      	LDI  R20,LOW(45)
                 _0x2000043:
000b85 3040      	CPI  R20,0
000b86 f011      	BREQ _0x2000044
000b87 5f1f      	SUBI R17,-LOW(1)
000b88 c001      	RJMP _0x2000045
                 _0x2000044:
000b89 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
000b8a c009      	RJMP _0x2000046
                 _0x2000042:
000b8b 940e 0f34 	CALL SUBOPT_0x43
000b8d 89a8      	LDD  R26,Y+16
000b8e 89b9      	LDD  R27,Y+16+1
000b8f 9614      	ADIW R26,4
000b90 940e 0fa9 	CALL __GETW1P
000b92 87ea      	STD  Y+10,R30
000b93 87fb      	STD  Y+10+1,R31
                 _0x2000046:
                 _0x2000036:
000b94 fd00      	SBRC R16,0
000b95 c011      	RJMP _0x2000047
                 _0x2000048:
000b96 1715      	CP   R17,R21
000b97 f478      	BRSH _0x200004A
000b98 ff07      	SBRS R16,7
000b99 c008      	RJMP _0x200004B
000b9a ff02      	SBRS R16,2
000b9b c004      	RJMP _0x200004C
000b9c 7f0b      	ANDI R16,LOW(251)
000b9d 2f24      	MOV  R18,R20
000b9e 5011      	SUBI R17,LOW(1)
000b9f c001      	RJMP _0x200004D
                 _0x200004C:
000ba0 e320      	LDI  R18,LOW(48)
                 _0x200004D:
000ba1 c001      	RJMP _0x200004E
                 _0x200004B:
000ba2 e220      	LDI  R18,LOW(32)
                 _0x200004E:
000ba3 940e 0f2d 	CALL SUBOPT_0x42
000ba5 5051      	SUBI R21,LOW(1)
000ba6 cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
000ba7 2f31      	MOV  R19,R17
000ba8 ff01      	SBRS R16,1
000ba9 c017      	RJMP _0x200004F
                 _0x2000050:
000baa 3030      	CPI  R19,0
000bab f0a1      	BREQ _0x2000052
000bac ff03      	SBRS R16,3
000bad c006      	RJMP _0x2000053
000bae 81ee      	LDD  R30,Y+6
000baf 81ff      	LDD  R31,Y+6+1
000bb0 9125      	LPM  R18,Z+
000bb1 83ee      	STD  Y+6,R30
000bb2 83ff      	STD  Y+6+1,R31
000bb3 c005      	RJMP _0x2000054
                 _0x2000053:
000bb4 81ae      	LDD  R26,Y+6
000bb5 81bf      	LDD  R27,Y+6+1
000bb6 912d      	LD   R18,X+
000bb7 83ae      	STD  Y+6,R26
000bb8 83bf      	STD  Y+6+1,R27
                 _0x2000054:
000bb9 940e 0f2d 	CALL SUBOPT_0x42
000bbb 3050      	CPI  R21,0
000bbc f009      	BREQ _0x2000055
000bbd 5051      	SUBI R21,LOW(1)
                 _0x2000055:
000bbe 5031      	SUBI R19,LOW(1)
000bbf cfea      	RJMP _0x2000050
                 _0x2000052:
000bc0 c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
000bc1 e320      	LDI  R18,LOW(48)
000bc2 81ee      	LDD  R30,Y+6
000bc3 81ff      	LDD  R31,Y+6+1
000bc4 940e 0fad 	CALL __GETW1PF
000bc6 87e8      	STD  Y+8,R30
000bc7 87f9      	STD  Y+8+1,R31
000bc8 81ee      	LDD  R30,Y+6
000bc9 81ff      	LDD  R31,Y+6+1
000bca 9632      	ADIW R30,2
000bcb 83ee      	STD  Y+6,R30
000bcc 83ff      	STD  Y+6+1,R31
                 _0x200005A:
000bcd 85e8      	LDD  R30,Y+8
000bce 85f9      	LDD  R31,Y+8+1
000bcf 85aa      	LDD  R26,Y+10
000bd0 85bb      	LDD  R27,Y+10+1
000bd1 17ae      	CP   R26,R30
000bd2 07bf      	CPC  R27,R31
000bd3 f050      	BRLO _0x200005C
000bd4 5f2f      	SUBI R18,-LOW(1)
000bd5 85a8      	LDD  R26,Y+8
000bd6 85b9      	LDD  R27,Y+8+1
000bd7 85ea      	LDD  R30,Y+10
000bd8 85fb      	LDD  R31,Y+10+1
000bd9 1bea      	SUB  R30,R26
000bda 0bfb      	SBC  R31,R27
000bdb 87ea      	STD  Y+10,R30
000bdc 87fb      	STD  Y+10+1,R31
000bdd cfef      	RJMP _0x200005A
                 _0x200005C:
000bde 332a      	CPI  R18,58
000bdf f028      	BRLO _0x200005D
000be0 ff03      	SBRS R16,3
000be1 c002      	RJMP _0x200005E
000be2 5f29      	SUBI R18,-LOW(7)
000be3 c001      	RJMP _0x200005F
                 _0x200005E:
000be4 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
000be5 fd04      	SBRC R16,4
000be6 c01a      	RJMP _0x2000061
000be7 3321      	CPI  R18,49
000be8 f420      	BRSH _0x2000063
000be9 85a8      	LDD  R26,Y+8
000bea 85b9      	LDD  R27,Y+8+1
000beb 9711      	SBIW R26,1
000bec f409      	BRNE _0x2000062
                 _0x2000063:
000bed c009      	RJMP _0x20000CD
                 _0x2000062:
000bee 1753      	CP   R21,R19
000bef f010      	BRLO _0x2000067
000bf0 ff00      	SBRS R16,0
000bf1 c001      	RJMP _0x2000068
                 _0x2000067:
000bf2 c013      	RJMP _0x2000066
                 _0x2000068:
000bf3 e220      	LDI  R18,LOW(32)
000bf4 ff07      	SBRS R16,7
000bf5 c00b      	RJMP _0x2000069
000bf6 e320      	LDI  R18,LOW(48)
                 _0x20000CD:
000bf7 6100      	ORI  R16,LOW(16)
000bf8 ff02      	SBRS R16,2
000bf9 c007      	RJMP _0x200006A
000bfa 7f0b      	ANDI R16,LOW(251)
000bfb 934a      	ST   -Y,R20
000bfc 940e 0f3a 	CALL SUBOPT_0x44
000bfe 3050      	CPI  R21,0
000bff f009      	BREQ _0x200006B
000c00 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
000c01 940e 0f2d 	CALL SUBOPT_0x42
000c03 3050      	CPI  R21,0
000c04 f009      	BREQ _0x200006C
000c05 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
000c06 5031      	SUBI R19,LOW(1)
000c07 85a8      	LDD  R26,Y+8
000c08 85b9      	LDD  R27,Y+8+1
000c09 9712      	SBIW R26,2
000c0a f008      	BRLO _0x2000059
000c0b cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
000c0c ff00      	SBRS R16,0
000c0d c008      	RJMP _0x200006D
                 _0x200006E:
000c0e 3050      	CPI  R21,0
000c0f f031      	BREQ _0x2000070
000c10 5051      	SUBI R21,LOW(1)
000c11 e2e0      	LDI  R30,LOW(32)
000c12 93ea      	ST   -Y,R30
000c13 940e 0f3a 	CALL SUBOPT_0x44
000c15 cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
000c16 e010      	LDI  R17,LOW(0)
                 _0x200001B:
000c17 ced8      	RJMP _0x2000016
                 _0x2000018:
000c18 85ac      	LDD  R26,Y+12
000c19 85bd      	LDD  R27,Y+12+1
000c1a 91ed      	LD   R30,X+
000c1b 91fd      	LD   R31,X+
000c1c 940e 0f5a 	CALL __LOADLOCR6
000c1e 9664      	ADIW R28,20
000c1f 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
000c20 92ff      	PUSH R15
000c21 2ef8      	MOV  R15,R24
000c22 9726      	SBIW R28,6
000c23 940e 0f55 	CALL __SAVELOCR4
000c25 01de      	MOVW R26,R28
000c26 961c      	ADIW R26,12
000c27 940e 0f61 	CALL __ADDW2R15
000c29 940e 0fa9 	CALL __GETW1P
000c2b 9730      	SBIW R30,0
000c2c f419      	BRNE _0x2000072
000c2d efef      	LDI  R30,LOW(65535)
000c2e efff      	LDI  R31,HIGH(65535)
000c2f c027      	RJMP _0x20C0003
                 _0x2000072:
000c30 01de      	MOVW R26,R28
000c31 9616      	ADIW R26,6
000c32 940e 0f61 	CALL __ADDW2R15
000c34 018d      	MOVW R16,R26
000c35 01de      	MOVW R26,R28
000c36 961c      	ADIW R26,12
000c37 940e 0f61 	CALL __ADDW2R15
000c39 91ed      	LD   R30,X+
000c3a 91fd      	LD   R31,X+
000c3b 83ee      	STD  Y+6,R30
000c3c 83ff      	STD  Y+6+1,R31
000c3d e0e0      	LDI  R30,LOW(0)
000c3e 87e8      	STD  Y+8,R30
000c3f 87e9      	STD  Y+8+1,R30
000c40 01de      	MOVW R26,R28
000c41 961a      	ADIW R26,10
000c42 940e 0f61 	CALL __ADDW2R15
000c44 91ed      	LD   R30,X+
000c45 91fd      	LD   R31,X+
000c46 93fa      	ST   -Y,R31
000c47 93ea      	ST   -Y,R30
000c48 931a      	ST   -Y,R17
000c49 930a      	ST   -Y,R16
000c4a eaea      	LDI  R30,LOW(_put_buff_G100)
000c4b e0fa      	LDI  R31,HIGH(_put_buff_G100)
000c4c 93fa      	ST   -Y,R31
000c4d 93ea      	ST   -Y,R30
000c4e 01de      	MOVW R26,R28
000c4f 961a      	ADIW R26,10
000c50 de93      	RCALL __print_G100
000c51 019f      	MOVW R18,R30
000c52 81ae      	LDD  R26,Y+6
000c53 81bf      	LDD  R27,Y+6+1
000c54 e0e0      	LDI  R30,LOW(0)
000c55 93ec      	ST   X,R30
000c56 01f9      	MOVW R30,R18
                 _0x20C0003:
000c57 940e 0f5c 	CALL __LOADLOCR4
000c59 962a      	ADIW R28,10
000c5a 90ff      	POP  R15
000c5b 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000c5c 93ba      	ST   -Y,R27
000c5d 93aa      	ST   -Y,R26
000c5e 91a9          ld   r26,y+
000c5f 91b9          ld   r27,y+
000c60 27ee          clr  r30
000c61 27ff          clr  r31
                 strlen0:
000c62 916d          ld   r22,x+
000c63 2366          tst  r22
000c64 f011          breq strlen1
000c65 9631          adiw r30,1
000c66 cffb          rjmp strlen0
                 strlen1:
000c67 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000c68 93ba      	ST   -Y,R27
000c69 93aa      	ST   -Y,R26
000c6a 27aa          clr  r26
000c6b 27bb          clr  r27
000c6c 91e9          ld   r30,y+
000c6d 91f9          ld   r31,y+
                 strlenf0:
000c6e 9005      	lpm  r0,z+
000c6f 2000          tst  r0
000c70 f011          breq strlenf1
000c71 9611          adiw r26,1
000c72 cffb          rjmp strlenf0
                 strlenf1:
000c73 01fd          movw r30,r26
000c74 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 _abs:
                 ; .FSTART _abs
000c75 93ba      	ST   -Y,R27
000c76 93aa      	ST   -Y,R26
000c77 91e9          ld   r30,y+
000c78 91f9          ld   r31,y+
000c79 9730          sbiw r30,0
000c7a f41a          brpl __abs0
000c7b 95e0          com  r30
000c7c 95f0          com  r31
000c7d 9631          adiw r30,1
                 __abs0:
000c7e 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                     .equ __lcd_direction=__lcd_port-1
                     .equ __lcd_pin=__lcd_port-2
                     .equ __lcd_rs=0
                     .equ __lcd_rd=1
                     .equ __lcd_enable=2
                     .equ __lcd_busy_flag=7
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_delay_G103:
                 ; .FSTART __lcd_delay_G103
000c7f e0ff          ldi   r31,15
                 __lcd_delay0:
000c80 95fa          dec   r31
000c81 f7f1          brne  __lcd_delay0
000c82 9508      	RET
                 ; .FEND
                 __lcd_ready:
                 ; .FSTART __lcd_ready
000c83 b3a7          in    r26,__lcd_direction
000c84 70af          andi  r26,0xf                 ;set as input
000c85 bba7          out   __lcd_direction,r26
000c86 9ac1          sbi   __lcd_port,__lcd_rd     ;RD=1
000c87 98c0          cbi   __lcd_port,__lcd_rs     ;RS=0
                 __lcd_busy:
000c88 dff6      	RCALL __lcd_delay_G103
000c89 9ac2          sbi   __lcd_port,__lcd_enable ;EN=1
000c8a dff4      	RCALL __lcd_delay_G103
000c8b b3a6          in    r26,__lcd_pin
000c8c 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
000c8d dff1      	RCALL __lcd_delay_G103
000c8e 9ac2          sbi   __lcd_port,__lcd_enable ;EN=1
000c8f dfef      	RCALL __lcd_delay_G103
000c90 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
000c91 fda7          sbrc  r26,__lcd_busy_flag
000c92 cff5          rjmp  __lcd_busy
000c93 9508      	RET
                 ; .FEND
                 __lcd_write_nibble_G103:
                 ; .FSTART __lcd_write_nibble_G103
000c94 7fa0          andi  r26,0xf0
000c95 2bab          or    r26,r27
000c96 bba8          out   __lcd_port,r26          ;write
000c97 9ac2          sbi   __lcd_port,__lcd_enable ;EN=1
000c98 940e 0c7f 	CALL __lcd_delay_G103
000c9a 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
000c9b 940e 0c7f 	CALL __lcd_delay_G103
000c9d 9508      	RET
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000c9e 93aa      	ST   -Y,R26
000c9f 98c1          cbi  __lcd_port,__lcd_rd 	  ;RD=0
000ca0 b3a7          in    r26,__lcd_direction
000ca1 6fa7          ori   r26,0xf0 | (1<<__lcd_rs) | (1<<__lcd_rd) | (1<<__lcd_enable) ;set as output
000ca2 bba7          out   __lcd_direction,r26
000ca3 b3b8          in    r27,__lcd_port
000ca4 70bf          andi  r27,0xf
000ca5 81a8          ld    r26,y
000ca6 dfed      	RCALL __lcd_write_nibble_G103
000ca7 81a8          ld    r26,y
000ca8 95a2          swap  r26
000ca9 dfea      	RCALL __lcd_write_nibble_G103
000caa 9ac1          sbi   __lcd_port,__lcd_rd     ;RD=1
000cab 940c 0d74 	JMP  _0x20C0001
                 ; .FEND
                 __lcd_read_nibble_G103:
                 ; .FSTART __lcd_read_nibble_G103
000cad 9ac2          sbi   __lcd_port,__lcd_enable ;EN=1
000cae 940e 0c7f 	CALL __lcd_delay_G103
000cb0 b3e6          in    r30,__lcd_pin           ;read
000cb1 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
000cb2 940e 0c7f 	CALL __lcd_delay_G103
000cb4 7fe0          andi  r30,0xf0
000cb5 9508      	RET
                 ; .FEND
                 _lcd_read_byte0_G103:
                 ; .FSTART _lcd_read_byte0_G103
000cb6 940e 0c7f 	CALL __lcd_delay_G103
000cb8 dff4      	RCALL __lcd_read_nibble_G103
000cb9 2fae          mov   r26,r30
000cba dff2      	RCALL __lcd_read_nibble_G103
000cbb 98c1          cbi   __lcd_port,__lcd_rd     ;RD=0
000cbc 95e2          swap  r30
000cbd 2bea          or    r30,r26
000cbe 9508      	RET
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000cbf 93aa      	ST   -Y,R26
000cc0 940e 0c83 	CALL __lcd_ready
000cc2 81e8      	LD   R30,Y
000cc3 e0f0      	LDI  R31,0
000cc4 54e7      	SUBI R30,LOW(-__base_y_G103)
000cc5 4ffd      	SBCI R31,HIGH(-__base_y_G103)
000cc6 81e0      	LD   R30,Z
000cc7 81a9      	LDD  R26,Y+1
000cc8 0fae      	ADD  R26,R30
000cc9 940e 0c9e 	CALL __lcd_write_data
000ccb 81e9      	LDD  R30,Y+1
000ccc 93e0 02bd 	STS  __lcd_x,R30
000cce 81e8      	LD   R30,Y
000ccf 93e0 02be 	STS  __lcd_y,R30
000cd1 9622      	ADIW R28,2
000cd2 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000cd3 940e 0c83 	CALL __lcd_ready
000cd5 e0a2      	LDI  R26,LOW(2)
000cd6 940e 0c9e 	CALL __lcd_write_data
000cd8 940e 0c83 	CALL __lcd_ready
000cda e0ac      	LDI  R26,LOW(12)
000cdb 940e 0c9e 	CALL __lcd_write_data
000cdd 940e 0c83 	CALL __lcd_ready
000cdf e0a1      	LDI  R26,LOW(1)
000ce0 940e 0c9e 	CALL __lcd_write_data
000ce2 e0e0      	LDI  R30,LOW(0)
000ce3 93e0 02be 	STS  __lcd_y,R30
000ce5 93e0 02bd 	STS  __lcd_x,R30
000ce7 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000ce8 93aa      	ST   -Y,R26
000ce9 93ef          push r30
000cea 93ff          push r31
000ceb 81a8          ld   r26,y
000cec 9468          set
000ced 30aa          cpi  r26,10
000cee f039          breq __lcd_putchar1
000cef 94e8          clt
000cf0 91e0 02bf 	LDS  R30,__lcd_maxx
000cf2 91a0 02bd 	LDS  R26,__lcd_x
000cf4 17ae      	CP   R26,R30
000cf5 f058      	BRLO _0x2060004
                 	__lcd_putchar1:
000cf6 91e0 02be 	LDS  R30,__lcd_y
000cf8 5fef      	SUBI R30,-LOW(1)
000cf9 93e0 02be 	STS  __lcd_y,R30
000cfb e0e0      	LDI  R30,LOW(0)
000cfc 93ea      	ST   -Y,R30
000cfd 91a0 02be 	LDS  R26,__lcd_y
000cff dfbf      	RCALL _lcd_gotoxy
000d00 f056      	brts __lcd_putchar0
                 _0x2060004:
000d01 91e0 02bd 	LDS  R30,__lcd_x
000d03 5fef      	SUBI R30,-LOW(1)
000d04 93e0 02bd 	STS  __lcd_x,R30
000d06 df7c          rcall __lcd_ready
000d07 9ac0          sbi  __lcd_port,__lcd_rs ;RS=1
000d08 81a8      	LD   R26,Y
000d09 940e 0c9e 	CALL __lcd_write_data
                 __lcd_putchar0:
000d0b 91ff          pop  r31
000d0c 91ef          pop  r30
000d0d 940c 0d74 	JMP  _0x20C0001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000d0f 93ba      	ST   -Y,R27
000d10 93aa      	ST   -Y,R26
000d11 931a      	ST   -Y,R17
                 _0x2060005:
000d12 81a9      	LDD  R26,Y+1
000d13 81ba      	LDD  R27,Y+1+1
000d14 91ed      	LD   R30,X+
000d15 83a9      	STD  Y+1,R26
000d16 83ba      	STD  Y+1+1,R27
000d17 2f1e      	MOV  R17,R30
000d18 30e0      	CPI  R30,0
000d19 f019      	BREQ _0x2060007
000d1a 2fa1      	MOV  R26,R17
000d1b dfcc      	RCALL _lcd_putchar
000d1c cff5      	RJMP _0x2060005
                 _0x2060007:
000d1d c010      	RJMP _0x20C0002
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
000d1e 93ba      	ST   -Y,R27
000d1f 93aa      	ST   -Y,R26
000d20 931a      	ST   -Y,R17
                 _0x2060008:
000d21 81e9      	LDD  R30,Y+1
000d22 81fa      	LDD  R31,Y+1+1
000d23 9631      	ADIW R30,1
000d24 83e9      	STD  Y+1,R30
000d25 83fa      	STD  Y+1+1,R31
000d26 9731      	SBIW R30,1
000d27 91e4      	LPM  R30,Z
000d28 2f1e      	MOV  R17,R30
000d29 30e0      	CPI  R30,0
000d2a f019      	BREQ _0x206000A
000d2b 2fa1      	MOV  R26,R17
000d2c dfbb      	RCALL _lcd_putchar
000d2d cff3      	RJMP _0x2060008
                 _0x206000A:
                 _0x20C0002:
000d2e 8118      	LDD  R17,Y+0
000d2f 9623      	ADIW R28,3
000d30 9508      	RET
                 ; .FEND
                 __long_delay_G103:
                 ; .FSTART __long_delay_G103
000d31 27aa          clr   r26
000d32 27bb          clr   r27
                 __long_delay0:
000d33 9711          sbiw  r26,1         ;2 cycles
000d34 f7f1          brne  __long_delay0 ;2 cycles
000d35 9508      	RET
                 ; .FEND
                 __lcd_init_write_G103:
                 ; .FSTART __lcd_init_write_G103
000d36 93aa      	ST   -Y,R26
000d37 98c1          cbi  __lcd_port,__lcd_rd 	  ;RD=0
000d38 b3a7          in    r26,__lcd_direction
000d39 6fa7          ori   r26,0xf7                ;set as output
000d3a bba7          out   __lcd_direction,r26
000d3b b3b8          in    r27,__lcd_port
000d3c 70bf          andi  r27,0xf
000d3d 81a8          ld    r26,y
000d3e 940e 0c94 	CALL __lcd_write_nibble_G103
000d40 9ac1          sbi   __lcd_port,__lcd_rd     ;RD=1
000d41 c032      	RJMP _0x20C0001
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000d42 93aa      	ST   -Y,R26
000d43 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
000d44 98c0          cbi   __lcd_port,__lcd_rs     ;RS=0
000d45 81e8      	LD   R30,Y
000d46 93e0 02bf 	STS  __lcd_maxx,R30
000d48 58e0      	SUBI R30,-LOW(128)
                +
000d49 93e0 02bb+STS __base_y_G103 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G103,2
000d4b 81e8      	LD   R30,Y
000d4c 54e0      	SUBI R30,-LOW(192)
                +
000d4d 93e0 02bc+STS __base_y_G103 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G103,3
000d4f 940e 0f4a 	CALL SUBOPT_0x46
000d51 940e 0f4a 	CALL SUBOPT_0x46
000d53 940e 0f4a 	CALL SUBOPT_0x46
000d55 dfdb      	RCALL __long_delay_G103
000d56 e2a0      	LDI  R26,LOW(32)
000d57 dfde      	RCALL __lcd_init_write_G103
000d58 dfd8      	RCALL __long_delay_G103
000d59 e2a8      	LDI  R26,LOW(40)
000d5a 940e 0f4f 	CALL SUBOPT_0x47
000d5c e0a4      	LDI  R26,LOW(4)
000d5d 940e 0f4f 	CALL SUBOPT_0x47
000d5f e8a5      	LDI  R26,LOW(133)
000d60 940e 0f4f 	CALL SUBOPT_0x47
000d62 b3a7          in    r26,__lcd_direction
000d63 70af          andi  r26,0xf                 ;set as input
000d64 bba7          out   __lcd_direction,r26
000d65 9ac1          sbi   __lcd_port,__lcd_rd     ;RD=1
000d66 940e 0cb6 	CALL _lcd_read_byte0_G103
000d68 30e5      	CPI  R30,LOW(0x5)
000d69 f011      	BREQ _0x206000B
000d6a e0e0      	LDI  R30,LOW(0)
000d6b c008      	RJMP _0x20C0001
                 _0x206000B:
000d6c 940e 0c83 	CALL __lcd_ready
000d6e e0a6      	LDI  R26,LOW(6)
000d6f 940e 0c9e 	CALL __lcd_write_data
000d71 940e 0cd3 	CALL _lcd_clear
000d73 e0e1      	LDI  R30,LOW(1)
                 _0x20C0001:
000d74 9621      	ADIW R28,1
000d75 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _buff:
000260           	.BYTE 0x21
                 _a:
000281           	.BYTE 0x1
                 _count_btn:
000282           	.BYTE 0x2
                 _count_child_btn:
000284           	.BYTE 0x2
                 _isChildSelect:
000286           	.BYTE 0x1
                 _isTestTombol:
000287           	.BYTE 0x1
                 
                 	.ESEG
                 _garis:
000000           	.BYTE 0xE
                 _back:
00000e           	.BYTE 0xE
                 _tengah:
00001c           	.BYTE 0xE
                 
                 	.DSEG
                 _sen:
000288           	.BYTE 0x7
                 _sensor:
00028f           	.BYTE 0x2
                 _error:
000291           	.BYTE 0x2
                 _lastError:
000293           	.BYTE 0x2
                 _kp:
000295           	.BYTE 0x2
                 _kd:
000297           	.BYTE 0x2
                 _SPEED:
000299           	.BYTE 0x2
                 _MIN_SPEED:
00029b           	.BYTE 0x2
                 _MAX_SPEED:
00029d           	.BYTE 0x2
                 _count:
00029f           	.BYTE 0x2
                 _second:
0002a1           	.BYTE 0x2
                 _positionD:
0002a3           	.BYTE 0x2
                 _mapMirror:
0002a5           	.BYTE 0x2
                 _maxHijau:
0002a7           	.BYTE 0x2
                 _maxKuning:
0002a9           	.BYTE 0x2
                 _maxMerah:
0002ab           	.BYTE 0x2
                 _minHijau:
0002ad           	.BYTE 0x2
                 _minKuning:
0002af           	.BYTE 0x2
                 _minMerah:
0002b1           	.BYTE 0x2
                 _isWarna:
0002b3           	.BYTE 0x2
                 __seed_G102:
0002b5           	.BYTE 0x4
                 __base_y_G103:
0002b9           	.BYTE 0x4
                 __lcd_x:
0002bd           	.BYTE 0x1
                 __lcd_y:
0002be           	.BYTE 0x1
                 __lcd_maxx:
0002bf           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
000d76 e0e7      	LDI  R30,LOW(7)
000d77 e0f0      	LDI  R31,HIGH(7)
000d78 168e      	CP   R8,R30
000d79 069f      	CPC  R9,R31
000d7a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x1:
000d7b 2da8      	MOV  R26,R8
000d7c 940e 018f 	CALL _read_adc
000d7e 2e0e      	MOV  R0,R30
000d7f 01f4      	MOVW R30,R8
000d80 e1ac      	LDI  R26,LOW(_tengah)
000d81 e0b0      	LDI  R27,HIGH(_tengah)
000d82 0fee      	LSL  R30
000d83 1fff      	ROL  R31
000d84 0fae      	ADD  R26,R30
000d85 1fbf      	ADC  R27,R31
000d86 940e 0fb6 	CALL __EEPROMRDW
000d88 2da0      	MOV  R26,R0
000d89 e0b0      	LDI  R27,0
000d8a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2:
000d8b 9fea      	MUL  R30,R26
000d8c 01f0      	MOVW R30,R0
                +
000d8d 0f6e     +ADD R22 , R30
000d8e 1f7f     +ADC R23 , R31
                 	__ADDWRR 22,23,30,31
000d8f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 18 TIMES, CODE SIZE REDUCTION:31 WORDS
                 SUBOPT_0x3:
000d90 93ea      	ST   -Y,R30
000d91 e0a0      	LDI  R26,LOW(0)
000d92 940c 0cbf 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x4:
000d94 e6e0      	LDI  R30,LOW(_buff)
000d95 e0f2      	LDI  R31,HIGH(_buff)
000d96 93fa      	ST   -Y,R31
000d97 93ea      	ST   -Y,R30
000d98 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x5:
000d99 27ff      	CLR  R31
000d9a 2766      	CLR  R22
000d9b 2777      	CLR  R23
000d9c 940e 0fb1 	CALL __PUTPARD1
000d9e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6:
000d9f 01f4      	MOVW R30,R8
000da0 e0a0      	LDI  R26,LOW(_garis)
000da1 e0b0      	LDI  R27,HIGH(_garis)
000da2 0fee      	LSL  R30
000da3 1fff      	ROL  R31
000da4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
000da5 e0f0      	LDI  R31,0
000da6 940e 0fc6 	CALL __EEPROMWRW
000da8 e0e0      	LDI  R30,LOW(0)
000da9 cfe6      	RJMP SUBOPT_0x3
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x8:
000daa 940e 0d1e 	CALL _lcd_putsf
000dac e0e0      	LDI  R30,LOW(0)
000dad 93ea      	ST   -Y,R30
000dae e0a1      	LDI  R26,LOW(1)
000daf 940e 0cbf 	CALL _lcd_gotoxy
000db1 cfe2      	RJMP SUBOPT_0x4
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x9:
                +
000db2 e9e9     +LDI R30 , LOW ( 2 * _0x0 + ( 25 ) )
000db3 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 25 ) )
                 	__POINTW1FN _0x0,25
000db4 93fa      	ST   -Y,R31
000db5 93ea      	ST   -Y,R30
000db6 01f4      	MOVW R30,R8
000db7 940e 0f71 	CALL __CWD1
000db9 940e 0fb1 	CALL __PUTPARD1
000dbb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0xA:
000dbc 0fae      	ADD  R26,R30
000dbd 1fbf      	ADC  R27,R31
000dbe 940e 0fb6 	CALL __EEPROMRDW
000dc0 940e 0f71 	CALL __CWD1
000dc2 940e 0fb1 	CALL __PUTPARD1
000dc4 e088      	LDI  R24,8
000dc5 940e 0c20 	CALL _sprintf
000dc7 962c      	ADIW R28,12
000dc8 e6a0      	LDI  R26,LOW(_buff)
000dc9 e0b2      	LDI  R27,HIGH(_buff)
000dca 940e 0d0f 	CALL _lcd_puts
000dcc 98c3      	CBI  0x18,3
000dcd e0aa      	LDI  R26,LOW(10)
000dce e0b0      	LDI  R27,0
000dcf 940e 10ca 	CALL _delay_ms
000dd1 9ac3      	SBI  0x18,3
000dd2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xB:
000dd3 01f4      	MOVW R30,R8
000dd4 e0ae      	LDI  R26,LOW(_back)
000dd5 e0b0      	LDI  R27,HIGH(_back)
000dd6 0fee      	LSL  R30
000dd7 1fff      	ROL  R31
000dd8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xC:
000dd9 0fae      	ADD  R26,R30
000dda 1fbf      	ADC  R27,R31
000ddb 940e 0fb6 	CALL __EEPROMRDW
000ddd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xD:
000dde 940e 0f71 	CALL __CWD1
000de0 940e 0fb1 	CALL __PUTPARD1
000de2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0xE:
000de3 93aa      	ST   -Y,R26
000de4 81e8      	LD   R30,Y
000de5 e0f0      	LDI  R31,0
000de6 bdf9      	OUT  0x28+1,R31
000de7 bde8      	OUT  0x28,R30
000de8 81e9      	LDD  R30,Y+1
000de9 e0f0      	LDI  R31,0
000dea bdfb      	OUT  0x2A+1,R31
000deb bdea      	OUT  0x2A,R30
000dec 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xF:
000ded 81a8      	LD   R26,Y
000dee 81b9      	LDD  R27,Y+1
000def 940e 0fdf 	CALL __CPW02
000df1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x10:
000df2 81a8      	LD   R26,Y
000df3 81b9      	LDD  R27,Y+1
000df4 940c 019a 	JMP  _delay
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x11:
000df6 81e8      	LD   R30,Y
000df7 81f9      	LDD  R31,Y+1
000df8 940e 0f71 	CALL __CWD1
000dfa 940e 104f 	CALL __CDF1
000dfc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x12:
000dfd 940e 1018 	CALL __CFD1
000dff 93ed      	ST   X+,R30
000e00 93fc      	ST   X,R31
000e01 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x13:
000e02 e6a4      	LDI  R26,LOW(100)
000e03 e0b0      	LDI  R27,0
000e04 940c 02e5 	JMP  _rem
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x14:
000e06 91e0 028f 	LDS  R30,_sensor
000e08 91f0 0290 	LDS  R31,_sensor+1
000e0a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x15:
000e0b 91e0 029d 	LDS  R30,_MAX_SPEED
000e0d 91f0 029e 	LDS  R31,_MAX_SPEED+1
000e0f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x16:
000e10 91e0 029b 	LDS  R30,_MIN_SPEED
000e12 91f0 029c 	LDS  R31,_MIN_SPEED+1
000e14 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x17:
000e15 dff0      	RCALL SUBOPT_0x14
000e16 71ec      	ANDI R30,LOW(0x1C)
000e17 31ec      	CPI  R30,LOW(0x1C)
000e18 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x18:
000e19 940e 01eb 	CALL _cek_sensor
000e1b 81aa      	LDD  R26,Y+2
000e1c 81bb      	LDD  R27,Y+2+1
000e1d 940c 0334 	JMP  _scan
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x19:
000e1f 91ed      	LD   R30,X+
000e20 91fd      	LD   R31,X+
000e21 9631      	ADIW R30,1
000e22 93fe      	ST   -X,R31
000e23 93ee      	ST   -X,R30
000e24 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1A:
000e25 81a8      	LD   R26,Y
000e26 81b9      	LDD  R27,Y+1
000e27 940c 02e5 	JMP  _rem
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1B:
000e29 81ea      	LDD  R30,Y+2
000e2a 93ea      	ST   -Y,R30
000e2b 81ab      	LDD  R26,Y+3
000e2c 940e 02b5 	CALL _kiri
000e2e 940c 01eb 	JMP  _cek_sensor
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1C:
000e30 81ea      	LDD  R30,Y+2
000e31 93ea      	ST   -Y,R30
000e32 81ab      	LDD  R26,Y+3
000e33 940e 02ae 	CALL _kanan
000e35 940c 01eb 	JMP  _cek_sensor
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1D:
000e37 93ba      	ST   -Y,R27
000e38 93aa      	ST   -Y,R26
000e39 91e0 02a5 	LDS  R30,_mapMirror
000e3b 91f0 02a6 	LDS  R31,_mapMirror+1
000e3d 9730      	SBIW R30,0
000e3e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1E:
000e3f 81ea      	LDD  R30,Y+2
000e40 81fb      	LDD  R31,Y+2+1
000e41 93fa      	ST   -Y,R31
000e42 93ea      	ST   -Y,R30
000e43 81aa      	LDD  R26,Y+2
000e44 81bb      	LDD  R27,Y+2+1
000e45 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 21 TIMES, CODE SIZE REDUCTION:37 WORDS
                 SUBOPT_0x1F:
000e46 93ea      	ST   -Y,R30
000e47 e0a1      	LDI  R26,LOW(1)
000e48 940c 0cbf 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:19 WORDS
                 SUBOPT_0x20:
000e4a e0e2      	LDI  R30,LOW(2)
000e4b e0f0      	LDI  R31,HIGH(2)
000e4c 93fa      	ST   -Y,R31
000e4d 93ea      	ST   -Y,R30
000e4e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 22 TIMES, CODE SIZE REDUCTION:39 WORDS
                 SUBOPT_0x21:
000e4f e7a8      	LDI  R26,LOW(120)
000e50 e0b0      	LDI  R27,0
000e51 940c 040f 	JMP  _scanX
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 72 TIMES, CODE SIZE REDUCTION:139 WORDS
                 SUBOPT_0x22:
000e53 e0e1      	LDI  R30,LOW(1)
000e54 e0f0      	LDI  R31,HIGH(1)
000e55 93fa      	ST   -Y,R31
000e56 93ea      	ST   -Y,R30
000e57 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 52 TIMES, CODE SIZE REDUCTION:99 WORDS
                 SUBOPT_0x23:
000e58 e6a4      	LDI  R26,LOW(100)
000e59 e0b0      	LDI  R27,0
000e5a 940c 040f 	JMP  _scanX
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 11 TIMES, CODE SIZE REDUCTION:37 WORDS
                 SUBOPT_0x24:
000e5c e0af      	LDI  R26,LOW(15)
000e5d e0b0      	LDI  R27,0
000e5e 940e 019a 	CALL _delay
000e60 cff2      	RJMP SUBOPT_0x22
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:112 WORDS
                 SUBOPT_0x25:
000e61 e5ea      	LDI  R30,LOW(90)
000e62 e0f0      	LDI  R31,HIGH(90)
000e63 93fa      	ST   -Y,R31
000e64 93ea      	ST   -Y,R30
000e65 e0a5      	LDI  R26,LOW(5)
000e66 e0b0      	LDI  R27,0
000e67 940e 044d 	CALL _scanKotak
000e69 e1a4      	LDI  R26,LOW(20)
000e6a e0b0      	LDI  R27,0
000e6b 940e 04d1 	CALL _taruh
000e6d e6e4      	LDI  R30,LOW(100)
000e6e 93ea      	ST   -Y,R30
000e6f e6a4      	LDI  R26,LOW(100)
000e70 940e 02a7 	CALL _mundur
000e72 e2a6      	LDI  R26,LOW(38)
000e73 e0b0      	LDI  R27,0
000e74 940e 019a 	CALL _delay
000e76 e6e4      	LDI  R30,LOW(100)
000e77 e0f0      	LDI  R31,HIGH(100)
000e78 93fa      	ST   -Y,R31
000e79 93ea      	ST   -Y,R30
000e7a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x26:
000e7b e1a4      	LDI  R26,LOW(20)
000e7c e0b0      	LDI  R27,0
000e7d 940e 04ba 	CALL _belokKiri
000e7f cfca      	RJMP SUBOPT_0x20
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 48 TIMES, CODE SIZE REDUCTION:91 WORDS
                 SUBOPT_0x27:
000e80 e6e4      	LDI  R30,LOW(100)
000e81 e0f0      	LDI  R31,HIGH(100)
000e82 93fa      	ST   -Y,R31
000e83 93ea      	ST   -Y,R30
000e84 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x28:
000e85 940e 04df 	CALL _bawah_lepas
000e87 cfcb      	RJMP SUBOPT_0x22
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 23 TIMES, CODE SIZE REDUCTION:41 WORDS
                 SUBOPT_0x29:
000e88 e1a4      	LDI  R26,LOW(20)
000e89 e0b0      	LDI  R27,0
000e8a 940c 04af 	JMP  _belokKanan
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 16 TIMES, CODE SIZE REDUCTION:27 WORDS
                 SUBOPT_0x2A:
000e8c e1a4      	LDI  R26,LOW(20)
000e8d e0b0      	LDI  R27,0
000e8e 940c 04ba 	JMP  _belokKiri
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2B:
000e90 e0e3      	LDI  R30,LOW(3)
000e91 e0f0      	LDI  R31,HIGH(3)
000e92 93fa      	ST   -Y,R31
000e93 93ea      	ST   -Y,R30
000e94 cfba      	RJMP SUBOPT_0x21
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:29 WORDS
                 SUBOPT_0x2C:
000e95 e0a5      	LDI  R26,LOW(5)
000e96 e0b0      	LDI  R27,0
000e97 940e 04af 	CALL _belokKanan
000e99 cfe6      	RJMP SUBOPT_0x27
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2D:
000e9a e5ea      	LDI  R30,LOW(90)
000e9b e0f0      	LDI  R31,HIGH(90)
000e9c 93fa      	ST   -Y,R31
000e9d 93ea      	ST   -Y,R30
000e9e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x2E:
000e9f e6e4      	LDI  R30,LOW(100)
000ea0 93ea      	ST   -Y,R30
000ea1 e6a4      	LDI  R26,LOW(100)
000ea2 940e 02a7 	CALL _mundur
000ea4 e2a1      	LDI  R26,LOW(33)
000ea5 e0b0      	LDI  R27,0
000ea6 940e 019a 	CALL _delay
000ea8 cfd7      	RJMP SUBOPT_0x27
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2F:
000ea9 e5aa      	LDI  R26,LOW(90)
000eaa e0b0      	LDI  R27,0
000eab 940e 040f 	CALL _scanX
000ead cfa5      	RJMP SUBOPT_0x22
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x30:
000eae e3a2      	LDI  R26,LOW(50)
000eaf e0b0      	LDI  R27,0
000eb0 940e 0433 	CALL _scanTimer
000eb2 e1a4      	LDI  R26,LOW(20)
000eb3 e0b0      	LDI  R27,0
000eb4 940c 04c6 	JMP  _ambil
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x31:
000eb6 e0a5      	LDI  R26,LOW(5)
000eb7 e0b0      	LDI  R27,0
000eb8 940e 044d 	CALL _scanKotak
000eba e1a4      	LDI  R26,LOW(20)
000ebb e0b0      	LDI  R27,0
000ebc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x32:
000ebd 91e0 02a3 	LDS  R30,_positionD
000ebf 91f0 02a4 	LDS  R31,_positionD+1
000ec1 9730      	SBIW R30,0
000ec2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:96 WORDS
                 SUBOPT_0x33:
000ec3 e6e4      	LDI  R30,LOW(100)
000ec4 93ea      	ST   -Y,R30
000ec5 e6a4      	LDI  R26,LOW(100)
000ec6 940e 02a7 	CALL _mundur
000ec8 e2a6      	LDI  R26,LOW(38)
000ec9 e0b0      	LDI  R27,0
000eca 940e 019a 	CALL _delay
000ecc cfb3      	RJMP SUBOPT_0x27
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:19 WORDS
                 SUBOPT_0x34:
000ecd 91a0 02a3 	LDS  R26,_positionD
000ecf 91b0 02a4 	LDS  R27,_positionD+1
000ed1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x35:
000ed2 e5e0      	LDI  R30,LOW(80)
000ed3 e0f0      	LDI  R31,HIGH(80)
000ed4 93fa      	ST   -Y,R31
000ed5 93ea      	ST   -Y,R30
000ed6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x36:
000ed7 e3a2      	LDI  R26,LOW(50)
000ed8 e0b0      	LDI  R27,0
000ed9 940e 019a 	CALL _delay
000edb 940e 04ff 	CALL _checkWarna
000edd 93e0 02b3 	STS  _isWarna,R30
000edf 93f0 02b4 	STS  _isWarna+1,R31
000ee1 9730      	SBIW R30,0
000ee2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x37:
000ee3 91a0 02b3 	LDS  R26,_isWarna
000ee5 91b0 02b4 	LDS  R27,_isWarna+1
000ee7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x38:
000ee8 940e 0cd3 	CALL _lcd_clear
000eea e0e0      	LDI  R30,LOW(0)
000eeb cea4      	RJMP SUBOPT_0x3
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x39:
000eec 940e 0d1e 	CALL _lcd_putsf
000eee e0e0      	LDI  R30,LOW(0)
000eef cf56      	RJMP SUBOPT_0x1F
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x3A:
000ef0 e0e0      	LDI  R30,LOW(0)
000ef1 e0f0      	LDI  R31,HIGH(0)
000ef2 93fa      	ST   -Y,R31
000ef3 93ea      	ST   -Y,R30
000ef4 93ea      	ST   -Y,R30
000ef5 e0a0      	LDI  R26,LOW(0)
000ef6 e0b0      	LDI  R27,0
000ef7 940c 0850 	JMP  _changeMenu
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3B:
000ef9 e6a4      	LDI  R26,LOW(100)
000efa e0b0      	LDI  R27,0
000efb 940c 019a 	JMP  _delay
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3C:
000efd e6a4      	LDI  R26,LOW(100)
000efe e0b0      	LDI  R27,0
000eff 940e 02bc 	CALL _setMotor
000f01 eca8      	LDI  R26,LOW(200)
000f02 e0b0      	LDI  R27,0
000f03 940c 10ca 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3D:
000f05 940e 0d1e 	CALL _lcd_putsf
000f07 e9ec      	LDI  R30,LOW(65436)
000f08 efff      	LDI  R31,HIGH(65436)
000f09 93fa      	ST   -Y,R31
000f0a 93ea      	ST   -Y,R30
000f0b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x3E:
000f0c e9ac      	LDI  R26,LOW(65436)
000f0d efbf      	LDI  R27,HIGH(65436)
000f0e 940e 02bc 	CALL _setMotor
000f10 eca8      	LDI  R26,LOW(200)
000f11 e0b0      	LDI  R27,0
000f12 940e 10ca 	CALL _delay_ms
000f14 e0e0      	LDI  R30,LOW(0)
000f15 cf30      	RJMP SUBOPT_0x1F
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x3F:
000f16 940e 0d1e 	CALL _lcd_putsf
000f18 e0e0      	LDI  R30,LOW(0)
000f19 93e0 0287 	STS  _isTestTombol,R30
000f1b e3a2      	LDI  R26,LOW(50)
000f1c e0b0      	LDI  R27,0
000f1d 940c 019a 	JMP  _delay
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x40:
000f1f 91e0 0282 	LDS  R30,_count_btn
000f21 91f0 0283 	LDS  R31,_count_btn+1
000f23 93fa      	ST   -Y,R31
000f24 93ea      	ST   -Y,R30
000f25 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x41:
000f26 93ea      	ST   -Y,R30
000f27 91a0 0284 	LDS  R26,_count_child_btn
000f29 91b0 0285 	LDS  R27,_count_child_btn+1
000f2b 940c 0850 	JMP  _changeMenu
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x42:
000f2d 932a      	ST   -Y,R18
000f2e 85ad      	LDD  R26,Y+13
000f2f 85be      	LDD  R27,Y+13+1
000f30 85ef      	LDD  R30,Y+15
000f31 89f8      	LDD  R31,Y+15+1
000f32 9509      	ICALL
000f33 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x43:
000f34 89e8      	LDD  R30,Y+16
000f35 89f9      	LDD  R31,Y+16+1
000f36 9734      	SBIW R30,4
000f37 8be8      	STD  Y+16,R30
000f38 8bf9      	STD  Y+16+1,R31
000f39 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x44:
000f3a 85ad      	LDD  R26,Y+13
000f3b 85be      	LDD  R27,Y+13+1
000f3c 85ef      	LDD  R30,Y+15
000f3d 89f8      	LDD  R31,Y+15+1
000f3e 9509      	ICALL
000f3f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x45:
000f40 89a8      	LDD  R26,Y+16
000f41 89b9      	LDD  R27,Y+16+1
000f42 9614      	ADIW R26,4
000f43 91ed      	LD   R30,X+
000f44 91fd      	LD   R31,X+
000f45 83ee      	STD  Y+6,R30
000f46 83ff      	STD  Y+6+1,R31
000f47 81ae      	LDD  R26,Y+6
000f48 81bf      	LDD  R27,Y+6+1
000f49 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x46:
000f4a 940e 0d31 	CALL __long_delay_G103
000f4c e3a0      	LDI  R26,LOW(48)
000f4d 940c 0d36 	JMP  __lcd_init_write_G103
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x47:
000f4f 940e 0c9e 	CALL __lcd_write_data
000f51 940c 0d31 	JMP  __long_delay_G103
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
000f53 935a      	ST   -Y,R21
                 __SAVELOCR5:
000f54 934a      	ST   -Y,R20
                 __SAVELOCR4:
000f55 933a      	ST   -Y,R19
                 __SAVELOCR3:
000f56 932a      	ST   -Y,R18
                 __SAVELOCR2:
000f57 931a      	ST   -Y,R17
000f58 930a      	ST   -Y,R16
000f59 9508      	RET
                 
                 __LOADLOCR6:
000f5a 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000f5b 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000f5c 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000f5d 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000f5e 8119      	LDD  R17,Y+1
000f5f 8108      	LD   R16,Y
000f60 9508      	RET
                 
                 __ADDW2R15:
000f61 2400      	CLR  R0
000f62 0daf      	ADD  R26,R15
000f63 1db0      	ADC  R27,R0
000f64 9508      	RET
                 
                 __ANEGW1:
000f65 95f1      	NEG  R31
000f66 95e1      	NEG  R30
000f67 40f0      	SBCI R31,0
000f68 9508      	RET
                 
                 __ANEGD1:
000f69 95f0      	COM  R31
000f6a 9560      	COM  R22
000f6b 9570      	COM  R23
000f6c 95e1      	NEG  R30
000f6d 4fff      	SBCI R31,-1
000f6e 4f6f      	SBCI R22,-1
000f6f 4f7f      	SBCI R23,-1
000f70 9508      	RET
                 
                 __CWD1:
000f71 2f6f      	MOV  R22,R31
000f72 0f66      	ADD  R22,R22
000f73 0b66      	SBC  R22,R22
000f74 2f76      	MOV  R23,R22
000f75 9508      	RET
                 
                 __MULW12U:
000f76 9ffa      	MUL  R31,R26
000f77 2df0      	MOV  R31,R0
000f78 9feb      	MUL  R30,R27
000f79 0df0      	ADD  R31,R0
000f7a 9fea      	MUL  R30,R26
000f7b 2de0      	MOV  R30,R0
000f7c 0df1      	ADD  R31,R1
000f7d 9508      	RET
                 
                 __MULW12:
000f7e d01c      	RCALL __CHKSIGNW
000f7f dff6      	RCALL __MULW12U
000f80 f40e      	BRTC __MULW121
000f81 dfe3      	RCALL __ANEGW1
                 __MULW121:
000f82 9508      	RET
                 
                 __DIVW21U:
000f83 2400      	CLR  R0
000f84 2411      	CLR  R1
000f85 e190      	LDI  R25,16
                 __DIVW21U1:
000f86 0faa      	LSL  R26
000f87 1fbb      	ROL  R27
000f88 1c00      	ROL  R0
000f89 1c11      	ROL  R1
000f8a 1a0e      	SUB  R0,R30
000f8b 0a1f      	SBC  R1,R31
000f8c f418      	BRCC __DIVW21U2
000f8d 0e0e      	ADD  R0,R30
000f8e 1e1f      	ADC  R1,R31
000f8f c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000f90 60a1      	SBR  R26,1
                 __DIVW21U3:
000f91 959a      	DEC  R25
000f92 f799      	BRNE __DIVW21U1
000f93 01fd      	MOVW R30,R26
000f94 01d0      	MOVW R26,R0
000f95 9508      	RET
                 
                 __DIVW21:
000f96 d004      	RCALL __CHKSIGNW
000f97 dfeb      	RCALL __DIVW21U
000f98 f40e      	BRTC __DIVW211
000f99 dfcb      	RCALL __ANEGW1
                 __DIVW211:
000f9a 9508      	RET
                 
                 __CHKSIGNW:
000f9b 94e8      	CLT
000f9c fff7      	SBRS R31,7
000f9d c002      	RJMP __CHKSW1
000f9e dfc6      	RCALL __ANEGW1
000f9f 9468      	SET
                 __CHKSW1:
000fa0 ffb7      	SBRS R27,7
000fa1 c006      	RJMP __CHKSW2
000fa2 95b1      	NEG  R27
000fa3 95a1      	NEG  R26
000fa4 40b0      	SBCI R27,0
000fa5 f800      	BLD  R0,0
000fa6 9403      	INC  R0
000fa7 fa00      	BST  R0,0
                 __CHKSW2:
000fa8 9508      	RET
                 
                 __GETW1P:
000fa9 91ed      	LD   R30,X+
000faa 91fc      	LD   R31,X
000fab 9711      	SBIW R26,1
000fac 9508      	RET
                 
                 __GETW1PF:
000fad 9005      	LPM  R0,Z+
000fae 91f4      	LPM  R31,Z
000faf 2de0      	MOV  R30,R0
000fb0 9508      	RET
                 
                 __PUTPARD1:
000fb1 937a      	ST   -Y,R23
000fb2 936a      	ST   -Y,R22
000fb3 93fa      	ST   -Y,R31
000fb4 93ea      	ST   -Y,R30
000fb5 9508      	RET
                 
                 __EEPROMRDW:
000fb6 9611      	ADIW R26,1
000fb7 d002      	RCALL __EEPROMRDB
000fb8 2ffe      	MOV  R31,R30
000fb9 9711      	SBIW R26,1
                 
                 __EEPROMRDB:
000fba 99e1      	SBIC EECR,EEWE
000fbb cffe      	RJMP __EEPROMRDB
000fbc 93ff      	PUSH R31
000fbd b7ff      	IN   R31,SREG
000fbe 94f8      	CLI
000fbf bbae      	OUT  EEARL,R26
000fc0 bbbf      	OUT  EEARH,R27
000fc1 9ae0      	SBI  EECR,EERE
000fc2 b3ed      	IN   R30,EEDR
000fc3 bfff      	OUT  SREG,R31
000fc4 91ff      	POP  R31
000fc5 9508      	RET
                 
                 __EEPROMWRW:
000fc6 d007      	RCALL __EEPROMWRB
000fc7 9611      	ADIW R26,1
000fc8 93ef      	PUSH R30
000fc9 2fef      	MOV  R30,R31
000fca d003      	RCALL __EEPROMWRB
000fcb 91ef      	POP  R30
000fcc 9711      	SBIW R26,1
000fcd 9508      	RET
                 
                 __EEPROMWRB:
000fce 9be1      	SBIS EECR,EEWE
000fcf c002      	RJMP __EEPROMWRB1
000fd0 95a8      	WDR
000fd1 cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
000fd2 b79f      	IN   R25,SREG
000fd3 94f8      	CLI
000fd4 bbae      	OUT  EEARL,R26
000fd5 bbbf      	OUT  EEARH,R27
000fd6 9ae0      	SBI  EECR,EERE
000fd7 b38d      	IN   R24,EEDR
000fd8 17e8      	CP   R30,R24
000fd9 f019      	BREQ __EEPROMWRB0
000fda bbed      	OUT  EEDR,R30
000fdb 9ae2      	SBI  EECR,EEMWE
000fdc 9ae1      	SBI  EECR,EEWE
                 __EEPROMWRB0:
000fdd bf9f      	OUT  SREG,R25
000fde 9508      	RET
                 
                 __CPW02:
000fdf 2400      	CLR  R0
000fe0 160a      	CP   R0,R26
000fe1 060b      	CPC  R0,R27
000fe2 9508      	RET
                 
                 __ANEGF1:
000fe3 9730      	SBIW R30,0
000fe4 4060      	SBCI R22,0
000fe5 4070      	SBCI R23,0
000fe6 f009      	BREQ __ANEGF10
000fe7 5870      	SUBI R23,0x80
                 __ANEGF10:
000fe8 9508      	RET
                 
                 __ROUND_REPACK:
000fe9 2355      	TST  R21
000fea f442      	BRPL __REPACK
000feb 3850      	CPI  R21,0x80
000fec f411      	BRNE __ROUND_REPACK0
000fed ffe0      	SBRS R30,0
000fee c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000fef 9631      	ADIW R30,1
000ff0 1f69      	ADC  R22,R25
000ff1 1f79      	ADC  R23,R25
000ff2 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000ff3 e850      	LDI  R21,0x80
000ff4 2757      	EOR  R21,R23
000ff5 f411      	BRNE __REPACK0
000ff6 935f      	PUSH R21
000ff7 c073      	RJMP __ZERORES
                 __REPACK0:
000ff8 3f5f      	CPI  R21,0xFF
000ff9 f031      	BREQ __REPACK1
000ffa 0f66      	LSL  R22
000ffb 0c00      	LSL  R0
000ffc 9557      	ROR  R21
000ffd 9567      	ROR  R22
000ffe 2f75      	MOV  R23,R21
000fff 9508      	RET
                 __REPACK1:
001000 935f      	PUSH R21
001001 2000      	TST  R0
001002 f00a      	BRMI __REPACK2
001003 c072      	RJMP __MAXRES
                 __REPACK2:
001004 c06b      	RJMP __MINRES
                 
                 __UNPACK:
001005 e850      	LDI  R21,0x80
001006 2e19      	MOV  R1,R25
001007 2215      	AND  R1,R21
001008 0f88      	LSL  R24
001009 1f99      	ROL  R25
00100a 2795      	EOR  R25,R21
00100b 0f55      	LSL  R21
00100c 9587      	ROR  R24
                 
                 __UNPACK1:
00100d e850      	LDI  R21,0x80
00100e 2e07      	MOV  R0,R23
00100f 2205      	AND  R0,R21
001010 0f66      	LSL  R22
001011 1f77      	ROL  R23
001012 2775      	EOR  R23,R21
001013 0f55      	LSL  R21
001014 9567      	ROR  R22
001015 9508      	RET
                 
                 __CFD1U:
001016 9468      	SET
001017 c001      	RJMP __CFD1U0
                 __CFD1:
001018 94e8      	CLT
                 __CFD1U0:
001019 935f      	PUSH R21
00101a dff2      	RCALL __UNPACK1
00101b 3870      	CPI  R23,0x80
00101c f018      	BRLO __CFD10
00101d 3f7f      	CPI  R23,0xFF
00101e f408      	BRCC __CFD10
00101f c04b      	RJMP __ZERORES
                 __CFD10:
001020 e156      	LDI  R21,22
001021 1b57      	SUB  R21,R23
001022 f4aa      	BRPL __CFD11
001023 9551      	NEG  R21
001024 3058      	CPI  R21,8
001025 f40e      	BRTC __CFD19
001026 3059      	CPI  R21,9
                 __CFD19:
001027 f030      	BRLO __CFD17
001028 efef      	SER  R30
001029 efff      	SER  R31
00102a ef6f      	SER  R22
00102b e77f      	LDI  R23,0x7F
00102c f977      	BLD  R23,7
00102d c01a      	RJMP __CFD15
                 __CFD17:
00102e 2777      	CLR  R23
00102f 2355      	TST  R21
001030 f0b9      	BREQ __CFD15
                 __CFD18:
001031 0fee      	LSL  R30
001032 1fff      	ROL  R31
001033 1f66      	ROL  R22
001034 1f77      	ROL  R23
001035 955a      	DEC  R21
001036 f7d1      	BRNE __CFD18
001037 c010      	RJMP __CFD15
                 __CFD11:
001038 2777      	CLR  R23
                 __CFD12:
001039 3058      	CPI  R21,8
00103a f028      	BRLO __CFD13
00103b 2fef      	MOV  R30,R31
00103c 2ff6      	MOV  R31,R22
00103d 2f67      	MOV  R22,R23
00103e 5058      	SUBI R21,8
00103f cff9      	RJMP __CFD12
                 __CFD13:
001040 2355      	TST  R21
001041 f031      	BREQ __CFD15
                 __CFD14:
001042 9576      	LSR  R23
001043 9567      	ROR  R22
001044 95f7      	ROR  R31
001045 95e7      	ROR  R30
001046 955a      	DEC  R21
001047 f7d1      	BRNE __CFD14
                 __CFD15:
001048 2000      	TST  R0
001049 f40a      	BRPL __CFD16
00104a df1e      	RCALL __ANEGD1
                 __CFD16:
00104b 915f      	POP  R21
00104c 9508      	RET
                 
                 __CDF1U:
00104d 9468      	SET
00104e c001      	RJMP __CDF1U0
                 __CDF1:
00104f 94e8      	CLT
                 __CDF1U0:
001050 9730      	SBIW R30,0
001051 4060      	SBCI R22,0
001052 4070      	SBCI R23,0
001053 f0b1      	BREQ __CDF10
001054 2400      	CLR  R0
001055 f026      	BRTS __CDF11
001056 2377      	TST  R23
001057 f412      	BRPL __CDF11
001058 9400      	COM  R0
001059 df0f      	RCALL __ANEGD1
                 __CDF11:
00105a 2e17      	MOV  R1,R23
00105b e17e      	LDI  R23,30
00105c 2011      	TST  R1
                 __CDF12:
00105d f032      	BRMI __CDF13
00105e 957a      	DEC  R23
00105f 0fee      	LSL  R30
001060 1fff      	ROL  R31
001061 1f66      	ROL  R22
001062 1c11      	ROL  R1
001063 cff9      	RJMP __CDF12
                 __CDF13:
001064 2fef      	MOV  R30,R31
001065 2ff6      	MOV  R31,R22
001066 2d61      	MOV  R22,R1
001067 935f      	PUSH R21
001068 df8a      	RCALL __REPACK
001069 915f      	POP  R21
                 __CDF10:
00106a 9508      	RET
                 
                 __ZERORES:
00106b 27ee      	CLR  R30
00106c 27ff      	CLR  R31
00106d 01bf      	MOVW R22,R30
00106e 915f      	POP  R21
00106f 9508      	RET
                 
                 __MINRES:
001070 efef      	SER  R30
001071 efff      	SER  R31
001072 e76f      	LDI  R22,0x7F
001073 ef7f      	SER  R23
001074 915f      	POP  R21
001075 9508      	RET
                 
                 __MAXRES:
001076 efef      	SER  R30
001077 efff      	SER  R31
001078 e76f      	LDI  R22,0x7F
001079 e77f      	LDI  R23,0x7F
00107a 915f      	POP  R21
00107b 9508      	RET
                 
                 __MULF12:
00107c 935f      	PUSH R21
00107d df87      	RCALL __UNPACK
00107e 3870      	CPI  R23,0x80
00107f f359      	BREQ __ZERORES
001080 3890      	CPI  R25,0x80
001081 f349      	BREQ __ZERORES
001082 2401      	EOR  R0,R1
001083 9408      	SEC
001084 1f79      	ADC  R23,R25
001085 f423      	BRVC __MULF124
001086 f324      	BRLT __ZERORES
                 __MULF125:
001087 2000      	TST  R0
001088 f33a      	BRMI __MINRES
001089 cfec      	RJMP __MAXRES
                 __MULF124:
00108a 920f      	PUSH R0
00108b 931f      	PUSH R17
00108c 932f      	PUSH R18
00108d 933f      	PUSH R19
00108e 934f      	PUSH R20
00108f 2711      	CLR  R17
001090 2722      	CLR  R18
001091 2799      	CLR  R25
001092 9f68      	MUL  R22,R24
001093 01a0      	MOVW R20,R0
001094 9f8f      	MUL  R24,R31
001095 2d30      	MOV  R19,R0
001096 0d41      	ADD  R20,R1
001097 1f59      	ADC  R21,R25
001098 9f6b      	MUL  R22,R27
001099 0d30      	ADD  R19,R0
00109a 1d41      	ADC  R20,R1
00109b 1f59      	ADC  R21,R25
00109c 9f8e      	MUL  R24,R30
00109d d027      	RCALL __MULF126
00109e 9fbf      	MUL  R27,R31
00109f d025      	RCALL __MULF126
0010a0 9f6a      	MUL  R22,R26
0010a1 d023      	RCALL __MULF126
0010a2 9fbe      	MUL  R27,R30
0010a3 d01d      	RCALL __MULF127
0010a4 9faf      	MUL  R26,R31
0010a5 d01b      	RCALL __MULF127
0010a6 9fae      	MUL  R26,R30
0010a7 0d11      	ADD  R17,R1
0010a8 1f29      	ADC  R18,R25
0010a9 1f39      	ADC  R19,R25
0010aa 1f49      	ADC  R20,R25
0010ab 1f59      	ADC  R21,R25
0010ac 2fe3      	MOV  R30,R19
0010ad 2ff4      	MOV  R31,R20
0010ae 2f65      	MOV  R22,R21
0010af 2f52      	MOV  R21,R18
0010b0 914f      	POP  R20
0010b1 913f      	POP  R19
0010b2 912f      	POP  R18
0010b3 911f      	POP  R17
0010b4 900f      	POP  R0
0010b5 2366      	TST  R22
0010b6 f02a      	BRMI __MULF122
0010b7 0f55      	LSL  R21
0010b8 1fee      	ROL  R30
0010b9 1fff      	ROL  R31
0010ba 1f66      	ROL  R22
0010bb c002      	RJMP __MULF123
                 __MULF122:
0010bc 9573      	INC  R23
0010bd f24b      	BRVS __MULF125
                 __MULF123:
0010be df2a      	RCALL __ROUND_REPACK
0010bf 915f      	POP  R21
0010c0 9508      	RET
                 
                 __MULF127:
0010c1 0d10      	ADD  R17,R0
0010c2 1d21      	ADC  R18,R1
0010c3 1f39      	ADC  R19,R25
0010c4 c002      	RJMP __MULF128
                 __MULF126:
0010c5 0d20      	ADD  R18,R0
0010c6 1d31      	ADC  R19,R1
                 __MULF128:
0010c7 1f49      	ADC  R20,R25
0010c8 1f59      	ADC  R21,R25
0010c9 9508      	RET
                 
                 _delay_ms:
0010ca 9610      	adiw r26,0
0010cb f039      	breq __delay_ms1
                 __delay_ms0:
0010cc 95a8      	wdr
                +
0010cd ec8d     +LDI R24 , LOW ( 0xACD )
0010ce e09a     +LDI R25 , HIGH ( 0xACD )
                +__DELAY_USW_LOOP :
0010cf 9701     +SBIW R24 , 1
0010d0 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xACD
0010d1 9711      	sbiw r26,1
0010d2 f7c9      	brne __delay_ms0
                 __delay_ms1:
0010d3 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  48 r1 :  18 r2 :   0 r3 :   0 r4 :   8 r5 :   4 r6 :   9 r7 :   8 
r8 :  25 r9 :   7 r10:   0 r11:   0 r12:   8 r13:   8 r14:   0 r15:   4 
r16:  43 r17:  38 r18:  38 r19:  17 r20:  23 r21:  66 r22:  46 r23:  37 
r24:  25 r25:  27 r26: 396 r27: 213 r28:  25 r29:   1 r30: 683 r31: 285 
x  :  32 y  : 371 z  :  16 
Registers used: 30 out of 35 (85.7%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  30 add   :  25 
adiw  :  45 and   :   2 andi  :  15 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :  43 
brge  :  16 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  16 
brlt  :   3 brmi  :   5 brne  :  89 brpl  :   6 brsh  :   5 brtc  :   3 
brts  :   2 brvc  :   1 brvs  :   2 bset  :   0 bst   :   1 call  : 599 
cbi   :  34 cbr   :   0 clc   :   0 clh   :   0 cli   :   3 cln   :   0 
clr   :  39 cls   :   0 clt   :   4 clv   :   0 clz   :   0 com   :   6 
cp    :  24 cpc   :  37 cpi   :  86 cpse  :   0 dec   :   6 des   :   0 
eor   :   4 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :  15 inc   :   2 jmp   :  44 ld    :  54 ldd   : 136 ldi   : 521 
lds   :  96 lpm   :  16 lsl   :  15 lsr   :   1 mov   :  58 movw  :  52 
mul   :  16 muls  :   0 mulsu :   0 neg   :   6 nop   :   0 or    :   2 
ori   :   9 out   :  71 pop   :  20 push  :  19 rcall : 113 ret   : 111 
reti  :   2 rjmp  : 207 rol   :  19 ror   :   7 sbc   :   5 sbci  :  10 
sbi   :  34 sbic  :   8 sbis  :   2 sbiw  :  53 sbr   :   1 sbrc  :   3 
sbrs  :  13 sec   :   1 seh   :   0 sei   :   1 sen   :   0 ser   :   8 
ses   :   0 set   :   4 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    : 172 std   :  44 sts   :  46 sub   :   5 subi  :  21 swap  :   2 
tst   :  13 wdr   :   2 
Instructions used: 78 out of 116 (67.2%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0021a8   7998    618   8616   32768  26.3%
[.dseg] 0x000060 0x0002c0      0     96     96    2048   4.7%
[.eseg] 0x000000 0x00002a      0     42     42    1024   4.1%

Assembly complete, 0 errors, 23 warnings
