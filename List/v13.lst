
AVRASM ver. 2.1.30  D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm Fri Nov 24 15:50:23 2023

D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1083): warning: Register r4 already defined by the .DEF directive
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1084): warning: Register r5 already defined by the .DEF directive
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1085): warning: Register r6 already defined by the .DEF directive
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1086): warning: Register r7 already defined by the .DEF directive
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1087): warning: Register r8 already defined by the .DEF directive
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1088): warning: Register r9 already defined by the .DEF directive
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1089): warning: Register r10 already defined by the .DEF directive
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1090): warning: Register r11 already defined by the .DEF directive
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1091): warning: Register r13 already defined by the .DEF directive
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1092): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.40 Advanced
                 ;(C) Copyright 1998-2020 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Release
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 11,059200 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Mode 1
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _hitung=R4
                 	.DEF _hitung_msb=R5
                 	.DEF _nadc7=R6
                 	.DEF _nadc7_msb=R7
                 	.DEF _i=R8
                 	.DEF _i_msb=R9
                 	.DEF _k=R10
                 	.DEF _k_msb=R11
                 	.DEF _pos_servo1=R13
                 	.DEF _pos_servo2=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0156 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0a43 	JMP  _timer0_comp_isr
000016 940c 0a25 	JMP  _timer0_ovf_isr
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 0000
000034 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 _0x6:
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1134): warning: .cseg .db misalignment - padding zero byte
000035 000a      	.DB  0xA
                 _0x7:
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1136): warning: .cseg .db misalignment - padding zero byte
000036 0064      	.DB  0x64
                 _0x8:
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1138): warning: .cseg .db misalignment - padding zero byte
000037 00c8      	.DB  0xC8
                 _0x9:
000038 ff60      	.DB  0x60,0xFF
                 _0xA:
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1142): warning: .cseg .db misalignment - padding zero byte
000039 00c8      	.DB  0xC8
                 _0xB:
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1144): warning: .cseg .db misalignment - padding zero byte
00003a 00dc      	.DB  0xDC
                 _0xC:
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1146): warning: .cseg .db misalignment - padding zero byte
00003b 0050      	.DB  0x50
                 _0xD:
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1148): warning: .cseg .db misalignment - padding zero byte
00003c 00a0      	.DB  0xA0
                 _0xE:
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1150): warning: .cseg .db misalignment - padding zero byte
00003d 00aa      	.DB  0xAA
                 _0xF:
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1152): warning: .cseg .db misalignment - padding zero byte
00003e 0005      	.DB  0x5
                 _0x10:
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1154): warning: .cseg .db misalignment - padding zero byte
00003f 0055      	.DB  0x55
                 _0x0:
000040 6425
000041 6425
000042 6425
000043 6425      	.DB  0x25,0x64,0x25,0x64,0x25,0x64,0x25,0x64
000044 6425
000045 6425
000046 6425
000047 4200      	.DB  0x25,0x64,0x25,0x64,0x25,0x64,0x0,0x42
000048 6361
000049 2061
00004a 694c
00004b 656e      	.DB  0x61,0x63,0x61,0x20,0x4C,0x69,0x6E,0x65
00004c 7300
00004d 6e65
00004e 6f73
00004f 3a72      	.DB  0x0,0x73,0x65,0x6E,0x73,0x6F,0x72,0x3A
000050 6425
000051 3d20
000052 2520
000053 2064      	.DB  0x25,0x64,0x20,0x3D,0x20,0x25,0x64,0x20
000054 0020
000055 6142
000056 6163
000057 4220      	.DB  0x20,0x0,0x42,0x61,0x63,0x61,0x20,0x42
000058 6361
000059 676b
00005a 6f72
00005b 6e75      	.DB  0x61,0x63,0x6B,0x67,0x72,0x6F,0x75,0x6E
00005c 0064
00005d 6543
00005e 746e
00005f 7265      	.DB  0x64,0x0,0x43,0x65,0x6E,0x74,0x65,0x72
000060 5020
000061 696f
000062 746e
000063 2020      	.DB  0x20,0x50,0x6F,0x69,0x6E,0x74,0x20,0x20
000064 2020
000065 7300
000066 6e65
000067 6f73      	.DB  0x20,0x20,0x0,0x73,0x65,0x6E,0x73,0x6F
000068 3a72
000069 6425
00006a 2d20
00006b 3e2d      	.DB  0x72,0x3A,0x25,0x64,0x20,0x2D,0x2D,0x3E
00006c 2520
00006d 2064
00006e 0020
00006f 6425      	.DB  0x20,0x25,0x64,0x20,0x20,0x0,0x25,0x64
000070 2020
000071 0020
000072 654d
000073 756e      	.DB  0x20,0x20,0x20,0x0,0x4D,0x65,0x6E,0x75
000074 4300
000075 6c61
000076 6269
000077 6172      	.DB  0x0,0x43,0x61,0x6C,0x69,0x62,0x72,0x61
000078 6974
000079 6e6f
00007a 5200
00007b 6e75      	.DB  0x74,0x69,0x6F,0x6E,0x0,0x52,0x75,0x6E
00007c 4220
00007d 746f
00007e 5300
00007f 6e65      	.DB  0x20,0x42,0x6F,0x74,0x0,0x53,0x65,0x6E
000080 2073
000081 6157
000082 6e72
000083 0061      	.DB  0x73,0x20,0x57,0x61,0x72,0x6E,0x61,0x0
000084 614d
000085 2070
000086 6942
000087 7572      	.DB  0x4D,0x61,0x70,0x20,0x42,0x69,0x72,0x75
000088 4d00
000089 7061
00008a 4d20
00008b 7265      	.DB  0x0,0x4D,0x61,0x70,0x20,0x4D,0x65,0x72
00008c 6861
00008d 4d00
00008e 746f
00008f 726f      	.DB  0x61,0x68,0x0,0x4D,0x6F,0x74,0x6F,0x72
000090 4200
000091 7475
000092 6f74
000093 006e      	.DB  0x0,0x42,0x75,0x74,0x74,0x6F,0x6E,0x0
000094 6143
000095 6970
000096 0074
000097 6c43      	.DB  0x43,0x61,0x70,0x69,0x74,0x0,0x43,0x6C
000098 6369
000099 206b
00009a 2032
00009b 6f74      	.DB  0x69,0x63,0x6B,0x20,0x32,0x20,0x74,0x6F
00009c 7320
00009d 6174
00009e 7472
00009f 5200      	.DB  0x20,0x73,0x74,0x61,0x72,0x74,0x0,0x52
0000a0 6e75
0000a1 696e
0000a2 676e
0000a3 2e2e      	.DB  0x75,0x6E,0x6E,0x69,0x6E,0x67,0x2E,0x2E
0000a4 002e
0000a5 6554
0000a6 7473
0000a7 4d20      	.DB  0x2E,0x0,0x54,0x65,0x73,0x74,0x20,0x4D
0000a8 746f
0000a9 726f
0000aa 2b00
0000ab 3031      	.DB  0x6F,0x74,0x6F,0x72,0x0,0x2B,0x31,0x30
0000ac 2030
0000ad 312b
0000ae 3030
0000af 2d00      	.DB  0x30,0x20,0x2B,0x31,0x30,0x30,0x0,0x2D
0000b0 3031
0000b1 2030
0000b2 312d
0000b3 3030      	.DB  0x31,0x30,0x30,0x20,0x2D,0x31,0x30,0x30
0000b4 2b00
0000b5 3031
0000b6 2030
0000b7 312d      	.DB  0x0,0x2B,0x31,0x30,0x30,0x20,0x2D,0x31
0000b8 3030
0000b9 2d00
0000ba 3031
0000bb 2030      	.DB  0x30,0x30,0x0,0x2D,0x31,0x30,0x30,0x20
0000bc 312b
0000bd 3030
0000be 4300
0000bf 696c      	.DB  0x2B,0x31,0x30,0x30,0x0,0x43,0x6C,0x69
0000c0 6b63
0000c1 3120
0000c2 7420
0000c3 206f      	.DB  0x63,0x6B,0x20,0x31,0x20,0x74,0x6F,0x20
0000c4 7865
0000c5 7469
0000c6 7400
0000c7 6d6f      	.DB  0x65,0x78,0x69,0x74,0x0,0x74,0x6F,0x6D
0000c8 6f62
0000c9 206c
0000ca 203d
0000cb 2031      	.DB  0x62,0x6F,0x6C,0x20,0x3D,0x20,0x31,0x20
0000cc 2020
0000cd 2020
0000ce 7400
0000cf 6d6f      	.DB  0x20,0x20,0x20,0x20,0x0,0x74,0x6F,0x6D
0000d0 6f62
0000d1 206c
0000d2 203d
0000d3 2032      	.DB  0x62,0x6F,0x6C,0x20,0x3D,0x20,0x32,0x20
0000d4 2020
0000d5 2020
0000d6 7400
0000d7 6d6f      	.DB  0x20,0x20,0x20,0x20,0x0,0x74,0x6F,0x6D
0000d8 6f62
0000d9 206c
0000da 203d
0000db 2033      	.DB  0x62,0x6F,0x6C,0x20,0x3D,0x20,0x33,0x20
0000dc 2020
0000dd 2020
0000de 7400
0000df 6d6f      	.DB  0x20,0x20,0x20,0x20,0x0,0x74,0x6F,0x6D
0000e0 6f62
0000e1 206c
0000e2 203d
0000e3 2034      	.DB  0x62,0x6F,0x6C,0x20,0x3D,0x20,0x34,0x20
0000e4 2020
0000e5 2020
0000e6 5700
0000e7 7261      	.DB  0x20,0x20,0x20,0x20,0x0,0x57,0x61,0x72
0000e8 616e
0000e9 003a
0000ea 7845
0000eb 7469      	.DB  0x6E,0x61,0x3A,0x0,0x45,0x78,0x69,0x74
0000ec 6e69
0000ed 2e67
0000ee 2e2e
0000ef 5400      	.DB  0x69,0x6E,0x67,0x2E,0x2E,0x2E,0x0,0x54
0000f0 7365
0000f1 2074
0000f2 6143
0000f3 6970      	.DB  0x65,0x73,0x74,0x20,0x43,0x61,0x70,0x69
0000f4 0074
0000f5 6143
0000f6 6970
0000f7 3a74      	.DB  0x74,0x0,0x43,0x61,0x70,0x69,0x74,0x3A
0000f8 3e20
0000f9 3c20
0000fa 4300
0000fb 7061      	.DB  0x20,0x3E,0x20,0x3C,0x0,0x43,0x61,0x70
0000fc 7469
0000fd 203a
0000fe 203c
0000ff 003e      	.DB  0x69,0x74,0x3A,0x20,0x3C,0x20,0x3E,0x0
000100 6143
000101 6970
000102 3a74
000103 5c20      	.DB  0x43,0x61,0x70,0x69,0x74,0x3A,0x20,0x5C
000104 002f
000105 6143
000106 6970
000107 3a74      	.DB  0x2F,0x0,0x43,0x61,0x70,0x69,0x74,0x3A
000108 2f20
000109 005c
00010a 6f48
00010b 646c      	.DB  0x20,0x2F,0x5C,0x0,0x48,0x6F,0x6C,0x64
00010c 3120
00010d 7420
00010e 206f
00010f 7865      	.DB  0x20,0x31,0x20,0x74,0x6F,0x20,0x65,0x78
000110 7469
000111 5800
000112 0044
000113 2020      	.DB  0x69,0x74,0x0,0x58,0x44,0x0,0x20,0x20
000114 2020
000115 4c20
000116 4745
000117 4f49      	.DB  0x20,0x20,0x20,0x4C,0x45,0x47,0x49,0x4F
000118 204e
000119 2020
00011a 2020
00011b 2000      	.DB  0x4E,0x20,0x20,0x20,0x20,0x20,0x0,0x20
00011c 414d
00011d 204e
00011e 2034
00011f 4f4a      	.DB  0x4D,0x41,0x4E,0x20,0x34,0x20,0x4A,0x4F
000120 424d
000121 4e41
000122 2047
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1212): warning: .cseg .db misalignment - padding zero byte
000123 0000      	.DB  0x4D,0x42,0x41,0x4E,0x47,0x20,0x0
                 _0x2040060:
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1214): warning: .cseg .db misalignment - padding zero byte
000124 0001      	.DB  0x1
                 _0x2040000:
000125 4e2d
000126 4e41
000127 4900
000128 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1217): warning: .cseg .db misalignment - padding zero byte
000129 0000      	.DB  0x0
                 _0x2060003:
00012a c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00012b 0004      	.DW  0x04
00012c 0004      	.DW  0x04
00012d 0066      	.DW  __REG_VARS*2
                 
00012e 0001      	.DW  0x01
00012f 0295      	.DW  _kp
000130 006a      	.DW  _0x6*2
                 
000131 0001      	.DW  0x01
000132 0297      	.DW  _kd
000133 006c      	.DW  _0x7*2
                 
000134 0001      	.DW  0x01
000135 0299      	.DW  _SPEED
000136 006e      	.DW  _0x8*2
                 
000137 0002      	.DW  0x02
000138 029b      	.DW  _MIN_SPEED
000139 0070      	.DW  _0x9*2
                 
00013a 0001      	.DW  0x01
00013b 029d      	.DW  _MAX_SPEED
00013c 0072      	.DW  _0xA*2
                 
00013d 0001      	.DW  0x01
00013e 02a5      	.DW  _maxHijau
00013f 0074      	.DW  _0xB*2
                 
000140 0001      	.DW  0x01
000141 02a7      	.DW  _maxKuning
000142 0076      	.DW  _0xC*2
                 
000143 0001      	.DW  0x01
000144 02a9      	.DW  _maxMerah
000145 0078      	.DW  _0xD*2
                 
000146 0001      	.DW  0x01
000147 02ab      	.DW  _minHijau
000148 007a      	.DW  _0xE*2
                 
000149 0001      	.DW  0x01
00014a 02ad      	.DW  _minKuning
00014b 007c      	.DW  _0xF*2
                 
00014c 0001      	.DW  0x01
00014d 02af      	.DW  _minMerah
00014e 007e      	.DW  _0x10*2
                 
00014f 0001      	.DW  0x01
000150 02b3      	.DW  __seed_G102
000151 0248      	.DW  _0x2040060*2
                 
000152 0002      	.DW  0x02
000153 02b7      	.DW  __base_y_G103
000154 0254      	.DW  _0x2060003*2
                 
                 _0xFFFFFFFF:
000155 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000156 94f8      	CLI
000157 27ee      	CLR  R30
000158 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000159 e0f1      	LDI  R31,1
00015a bffb      	OUT  GICR,R31
00015b bfeb      	OUT  GICR,R30
00015c bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
00015d e1f8      	LDI  R31,0x18
00015e bdf1      	OUT  WDTCR,R31
00015f bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000160 e08d      	LDI  R24,(14-2)+1
000161 e0a2      	LDI  R26,2
000162 27bb      	CLR  R27
                 __CLEAR_REG:
000163 93ed      	ST   X+,R30
000164 958a      	DEC  R24
000165 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000166 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000167 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000168 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000169 93ed      	ST   X+,R30
00016a 9701      	SBIW R24,1
00016b f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00016c e5e6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00016d e0f2      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00016e 9185      	LPM  R24,Z+
00016f 9195      	LPM  R25,Z+
000170 9700      	SBIW R24,0
000171 f061      	BREQ __GLOBAL_INI_END
000172 91a5      	LPM  R26,Z+
000173 91b5      	LPM  R27,Z+
000174 9005      	LPM  R0,Z+
000175 9015      	LPM  R1,Z+
000176 01bf      	MOVW R22,R30
000177 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000178 9005      	LPM  R0,Z+
000179 920d      	ST   X+,R0
00017a 9701      	SBIW R24,1
00017b f7e1      	BRNE __GLOBAL_INI_LOOP
00017c 01fb      	MOVW R30,R22
00017d cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00017e e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00017f bfed      	OUT  SPL,R30
000180 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000181 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000182 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000183 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000184 940c 0a44 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                    .equ __lcd_port=0x18 ;PORTB
                 ; 0000 002F #endasm
                 ;unsigned char read_adc(unsigned char adc_input)
                 ; 0000 0036 {
                 
                 	.CSEG
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 0037 ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
000186 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
000187 81e8      	LD   R30,Y
000188 66e0      	ORI  R30,LOW(0x60)
000189 b9e7      	OUT  0x7,R30
                 ; 0000 0038 // Start the AD conversion
                 ; 0000 0039 ADCSRA|=0x40;
00018a 9a36      	SBI  0x6,6
                 ; 0000 003A // Wait for the AD conversion to complete
                 ; 0000 003B while ((ADCSRA & 0x10)==0);
                 _0x3:
00018b 9b34      	SBIS 0x6,4
00018c cffe      	RJMP _0x3
                 ; 0000 003C ADCSRA|=0x10;
00018d 9a34      	SBI  0x6,4
                 ; 0000 003D return ADCH;
00018e b1e5      	IN   R30,0x5
00018f 9621      	ADIW R28,1
000190 9508      	RET
                 ; 0000 003E }
                 ; .FEND
                 ;int hitung = 0;
                 ;unsigned int nadc7 = 0;
                 ;char buff[33];
                 ;int i, k;
                 ;unsigned char pos_servo1, pos_servo2, a;
                 ;int count_btn = 0;
                 ;int count_child_btn = 0;
                 ;bool isChildSelect = false;
                 ;bool isTestTombol = false;
                 ;eeprom int garis[7], back[7], tengah[7];
                 ;char sen[7];
                 ;int sensor;
                 ;int error = 0;
                 ;int lastError = 0;
                 ;int kp = 10;
                 
                 	.DSEG
                 ;int kd = 100;
                 ;int SPEED = 200;
                 ;int MIN_SPEED = -160;
                 ;int MAX_SPEED = 200;
                 ;int count = 0;
                 ;int second = 0;
                 ;int positionD = 0;
                 ;eeprom int mapMirror; // 0 - map/lintasan bagian biru, 1 - map/lintasan bagian m ...
                 ;int maxHijau = 220;
                 ;int maxKuning = 80;
                 ;int maxMerah = 160;
                 ;int minHijau = 170;
                 ;int minKuning = 5;
                 ;int minMerah = 85;
                 ;void delay(int ms)
                 ; 0000 0060 {
                 
                 	.CSEG
                 _delay:
                 ; .FSTART _delay
                 ;delay_ms(ms);
000191 93ba      	ST   -Y,R27
000192 93aa      	ST   -Y,R26
                 ;	ms -> Y+0
000193 81a8      	LD   R26,Y
000194 81b9      	LDD  R27,Y+1
000195 940e 110d 	CALL _delay_ms
000197 c33c      	RJMP _0x20C000F
                 ; .FEND
                 ;void lcd_kedip(int ulangi)
                 ;for(i = 0; i < ulangi; i++)
                 ;	ulangi -> Y+0
                 ;lampu=0;
                 ;delay_ms(100);
                 ;lampu=1;
                 ;delay_ms(100);
                 ;void konvert_logic()
                 ; 0000 0061 {
                 _konvert_logic:
                 ; .FSTART _konvert_logic
                 ;for(i = 0; i < 7; i++)
000198 2488      	CLR  R8
000199 2499      	CLR  R9
                 _0x19:
00019a 940e 0db9 	CALL SUBOPT_0x0
00019c f4d4      	BRGE _0x1A
                 ;if(read_adc(i) > tengah[i]) {
00019d 940e 0dbe 	CALL SUBOPT_0x1
00019f 17ea      	CP   R30,R26
0001a0 07fb      	CPC  R31,R27
0001a1 f434      	BRGE _0x1B
                 ;sen[i]=1;
0001a2 e8a8      	LDI  R26,LOW(_sen)
0001a3 e0b2      	LDI  R27,HIGH(_sen)
0001a4 0da8      	ADD  R26,R8
0001a5 1db9      	ADC  R27,R9
0001a6 e0e1      	LDI  R30,LOW(1)
0001a7 c00a      	RJMP _0x17C
                 ;else if(read_adc(i) < tengah[i]) {
                 _0x1B:
0001a8 940e 0dbe 	CALL SUBOPT_0x1
0001aa 17ae      	CP   R26,R30
0001ab 07bf      	CPC  R27,R31
0001ac f434      	BRGE _0x1D
                 ;sen[i]=0;
0001ad e8a8      	LDI  R26,LOW(_sen)
0001ae e0b2      	LDI  R27,HIGH(_sen)
0001af 0da8      	ADD  R26,R8
0001b0 1db9      	ADC  R27,R9
0001b1 e0e0      	LDI  R30,LOW(0)
                 _0x17C:
0001b2 93ec      	ST   X,R30
                 _0x1D:
0001b3 01f4      	MOVW R30,R8
0001b4 9631      	ADIW R30,1
0001b5 014f      	MOVW R8,R30
0001b6 cfe3      	RJMP _0x19
                 _0x1A:
0001b7 9508      	RET
                 ; .FEND
                 ;void logika()
                 _logika:
                 ; .FSTART _logika
                 ;sensor = (sen[6] * 64) + (sen[5] * 32) + (sen[4] * 16) + (sen[3] * 8) + (sen[2]  ...
                +
0001b8 91a0 028e+LDS R26 , _sen + ( 6 )
                 	__GETB2MN _sen,6
0001ba e4e0      	LDI  R30,LOW(64)
0001bb 9fea      	MUL  R30,R26
0001bc 01b0      	MOVW R22,R0
                +
0001bd 91a0 028d+LDS R26 , _sen + ( 5 )
                 	__GETB2MN _sen,5
0001bf e2e0      	LDI  R30,LOW(32)
0001c0 940e 0dce 	CALL SUBOPT_0x2
                +
0001c2 91a0 028c+LDS R26 , _sen + ( 4 )
                 	__GETB2MN _sen,4
0001c4 e1e0      	LDI  R30,LOW(16)
0001c5 940e 0dce 	CALL SUBOPT_0x2
                +
0001c7 91a0 028b+LDS R26 , _sen + ( 3 )
                 	__GETB2MN _sen,3
0001c9 e0e8      	LDI  R30,LOW(8)
0001ca 940e 0dce 	CALL SUBOPT_0x2
                +
0001cc 91a0 028a+LDS R26 , _sen + ( 2 )
                 	__GETB2MN _sen,2
0001ce e0e4      	LDI  R30,LOW(4)
0001cf 940e 0dce 	CALL SUBOPT_0x2
                +
0001d1 91a0 0289+LDS R26 , _sen + ( 1 )
                 	__GETB2MN _sen,1
0001d3 e0e2      	LDI  R30,LOW(2)
0001d4 940e 0dce 	CALL SUBOPT_0x2
0001d6 91a0 0288 	LDS  R26,_sen
0001d8 e0e1      	LDI  R30,LOW(1)
0001d9 9fea      	MUL  R30,R26
0001da 01f0      	MOVW R30,R0
0001db 0fe6      	ADD  R30,R22
0001dc 1ff7      	ADC  R31,R23
0001dd 93e0 028f 	STS  _sensor,R30
0001df 93f0 0290 	STS  _sensor+1,R31
0001e1 9508      	RET
                 ; .FEND
                 ;void cek_sensor()
                 _cek_sensor:
                 ; .FSTART _cek_sensor
                 ;konvert_logic();
0001e2 dfb5      	RCALL _konvert_logic
                 ;logika();
0001e3 dfd4      	RCALL _logika
0001e4 9508      	RET
                 ; .FEND
                 ;void display_sensor()
                 _display_sensor:
                 ; .FSTART _display_sensor
                 ;konvert_logic();
0001e5 dfb2      	RCALL _konvert_logic
                 ;lcd_gotoxy(9, 0);
0001e6 e0e9      	LDI  R30,LOW(9)
0001e7 940e 0dd3 	CALL SUBOPT_0x3
                 ;sprintf(buff, "%d%d%d%d%d%d%d", sen[0] , sen[1] , sen[2], sen[3], sen[4], sen[5] ...
0001e9 940e 0dd7 	CALL SUBOPT_0x4
                +
0001eb e8e0     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0001ec e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0001ed 93fa      	ST   -Y,R31
0001ee 93ea      	ST   -Y,R30
0001ef 91e0 0288 	LDS  R30,_sen
0001f1 940e 0ddc 	CALL SUBOPT_0x5
                +
0001f3 91e0 0289+LDS R30 , _sen + ( 1 )
                 	__GETB1MN _sen,1
0001f5 940e 0ddc 	CALL SUBOPT_0x5
                +
0001f7 91e0 028a+LDS R30 , _sen + ( 2 )
                 	__GETB1MN _sen,2
0001f9 940e 0ddc 	CALL SUBOPT_0x5
                +
0001fb 91e0 028b+LDS R30 , _sen + ( 3 )
                 	__GETB1MN _sen,3
0001fd 940e 0ddc 	CALL SUBOPT_0x5
                +
0001ff 91e0 028c+LDS R30 , _sen + ( 4 )
                 	__GETB1MN _sen,4
000201 940e 0ddc 	CALL SUBOPT_0x5
                +
000203 91e0 028d+LDS R30 , _sen + ( 5 )
                 	__GETB1MN _sen,5
000205 940e 0ddc 	CALL SUBOPT_0x5
                +
000207 91e0 028e+LDS R30 , _sen + ( 6 )
                 	__GETB1MN _sen,6
000209 940e 0ddc 	CALL SUBOPT_0x5
00020b e18c      	LDI  R24,28
00020c 940e 0c63 	CALL _sprintf
00020e 96a0      	ADIW R28,32
                 ;lcd_puts(buff);
00020f c2e1      	RJMP _0x20C000E
                 ; .FEND
                 ;void scan_garis()
                 _scan_garis:
                 ; .FSTART _scan_garis
                 ;for (i = 0; i < 7; i++)
000210 2488      	CLR  R8
000211 2499      	CLR  R9
                 _0x1F:
000212 940e 0db9 	CALL SUBOPT_0x0
000214 f4d4      	BRGE _0x20
                 ;garis[i] = read_adc(i);
000215 940e 0de2 	CALL SUBOPT_0x6
000217 0fea      	ADD  R30,R26
000218 1ffb      	ADC  R31,R27
000219 93ff      	PUSH R31
00021a 93ef      	PUSH R30
00021b 2da8      	MOV  R26,R8
00021c df69      	RCALL _read_adc
00021d 91af      	POP  R26
00021e 91bf      	POP  R27
00021f 940e 0de8 	CALL SUBOPT_0x7
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Baca Line");
                +
000221 e8af     +LDI R26 , LOW ( 2 * _0x0 + ( 15 ) )
000222 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 15 ) )
                 	__POINTW2FN _0x0,15
000223 940e 0ded 	CALL SUBOPT_0x8
                 ;lcd_gotoxy(0, 1);
                 ;sprintf(buff, "sensor:%d = %d  ", i, garis[i]);
000225 940e 0df5 	CALL SUBOPT_0x9
000227 940e 0de2 	CALL SUBOPT_0x6
000229 940e 0dff 	CALL SUBOPT_0xA
                 ;lcd_puts(buff);
                 ;lampu = 0;
                 ;delay_ms(10);
                 ;lampu = 1;
00022b 01f4      	MOVW R30,R8
00022c 9631      	ADIW R30,1
00022d 014f      	MOVW R8,R30
00022e cfe3      	RJMP _0x1F
                 _0x20:
00022f 9508      	RET
                 ; .FEND
                 ;void scan_back()
                 _scan_back:
                 ; .FSTART _scan_back
                 ;for (i = 0; i < 7; i++)
000230 2488      	CLR  R8
000231 2499      	CLR  R9
                 _0x26:
000232 940e 0db9 	CALL SUBOPT_0x0
000234 f4d4      	BRGE _0x27
                 ;back[i] = read_adc(i);
000235 940e 0e16 	CALL SUBOPT_0xB
000237 0fea      	ADD  R30,R26
000238 1ffb      	ADC  R31,R27
000239 93ff      	PUSH R31
00023a 93ef      	PUSH R30
00023b 2da8      	MOV  R26,R8
00023c df49      	RCALL _read_adc
00023d 91af      	POP  R26
00023e 91bf      	POP  R27
00023f 940e 0de8 	CALL SUBOPT_0x7
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Baca Background");
                +
000241 eaaa     +LDI R26 , LOW ( 2 * _0x0 + ( 42 ) )
000242 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 42 ) )
                 	__POINTW2FN _0x0,42
000243 940e 0ded 	CALL SUBOPT_0x8
                 ;lcd_gotoxy(0, 1);
                 ;sprintf(buff, "sensor:%d = %d  ", i, back[i]);
000245 940e 0df5 	CALL SUBOPT_0x9
000247 940e 0e16 	CALL SUBOPT_0xB
000249 940e 0dff 	CALL SUBOPT_0xA
                 ;lcd_puts(buff);
                 ;lampu = 0;
                 ;delay_ms(10);
                 ;lampu = 1;
00024b 01f4      	MOVW R30,R8
00024c 9631      	ADIW R30,1
00024d 014f      	MOVW R8,R30
00024e cfe3      	RJMP _0x26
                 _0x27:
00024f 9508      	RET
                 ; .FEND
                 ;void hit_tengah()
                 _hit_tengah:
                 ; .FSTART _hit_tengah
                 ;for (i = 0; i < 7; i++)
000250 2488      	CLR  R8
000251 2499      	CLR  R9
                 _0x2D:
000252 940e 0db9 	CALL SUBOPT_0x0
000254 f00c      	BRLT PC+2
000255 c040      	RJMP _0x2E
                 ;tengah[i] = (back[i] + garis[i]) / 2;
000256 01f4      	MOVW R30,R8
000257 e1ac      	LDI  R26,LOW(_tengah)
000258 e0b0      	LDI  R27,HIGH(_tengah)
000259 0fee      	LSL  R30
00025a 1fff      	ROL  R31
00025b 0fea      	ADD  R30,R26
00025c 1ffb      	ADC  R31,R27
00025d 01bf      	MOVW R22,R30
00025e 940e 0e16 	CALL SUBOPT_0xB
000260 940e 0e1c 	CALL SUBOPT_0xC
000262 010f      	MOVW R0,R30
000263 940e 0de2 	CALL SUBOPT_0x6
000265 940e 0e1c 	CALL SUBOPT_0xC
000267 01d0      	MOVW R26,R0
000268 0fae      	ADD  R26,R30
000269 1fbf      	ADC  R27,R31
00026a e0e2      	LDI  R30,LOW(2)
00026b e0f0      	LDI  R31,HIGH(2)
00026c 940e 0fd9 	CALL __DIVW21
00026e 01db      	MOVW R26,R22
00026f 940e 1009 	CALL __EEPROMWRW
                 ;lcd_gotoxy(0, 0);
000271 e0e0      	LDI  R30,LOW(0)
000272 940e 0dd3 	CALL SUBOPT_0x3
                 ;lcd_putsf("Center Point    ");
                +
000274 ebaa     +LDI R26 , LOW ( 2 * _0x0 + ( 58 ) )
000275 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 58 ) )
                 	__POINTW2FN _0x0,58
000276 940e 0ded 	CALL SUBOPT_0x8
                 ;lcd_gotoxy(0, 1);
                 ;sprintf(buff, "sensor:%d --> %d  ", i, tengah[i]);
                +
000278 eceb     +LDI R30 , LOW ( 2 * _0x0 + ( 75 ) )
000279 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 75 ) )
                 	__POINTW1FN _0x0,75
00027a 93fa      	ST   -Y,R31
00027b 93ea      	ST   -Y,R30
00027c 01f4      	MOVW R30,R8
00027d 940e 0e21 	CALL SUBOPT_0xD
00027f 01f4      	MOVW R30,R8
000280 e1ac      	LDI  R26,LOW(_tengah)
000281 e0b0      	LDI  R27,HIGH(_tengah)
000282 0fee      	LSL  R30
000283 1fff      	ROL  R31
000284 940e 0e1c 	CALL SUBOPT_0xC
000286 940e 0e21 	CALL SUBOPT_0xD
000288 e088      	LDI  R24,8
000289 940e 0c63 	CALL _sprintf
00028b 962c      	ADIW R28,12
                 ;lcd_puts(buff);
00028c e6a0      	LDI  R26,LOW(_buff)
00028d e0b2      	LDI  R27,HIGH(_buff)
00028e 940e 0d52 	CALL _lcd_puts
                 ;lampu = 0;
000290 98c3      	CBI  0x18,3
                 ;lampu = 1;
000291 9ac3      	SBI  0x18,3
000292 01f4      	MOVW R30,R8
000293 9631      	ADIW R30,1
000294 014f      	MOVW R8,R30
000295 cfbc      	RJMP _0x2D
                 _0x2E:
000296 9508      	RET
                 ; .FEND
                 ;void cekdatasensor()
                 ;for (i = 0; i < 7; i++)
                 ;lcd_gotoxy(0, 0);
                 ;sprintf(buff, " %d  ", garis[i]);
                 ;lcd_puts(buff);
                 ;lcd_gotoxy(10, 0);
                 ;sprintf(buff, " %d  ", back[i]);
                 ;lcd_puts(buff);
                 ;lcd_gotoxy(0, 1);
                 ;sprintf(buff, " %d  ", tengah[i]);
                 ;lcd_puts(buff);
                 ;lcd_gotoxy(10, 1);
                 ;sprintf(buff, " %d  ", read_adc(i));
                 ;lcd_puts(buff);
                 ;delay_ms(200);
                 ;void maju(unsigned char ki, unsigned char ka)
                 ; 0000 0062 {
                 _maju:
                 ; .FSTART _maju
                 ;pwmka = ka;
000297 940e 0e26 	CALL SUBOPT_0xE
                 ;	ki -> Y+1
                 ;	ka -> Y+0
                 ;pwmki = ki;
                 ;PORTD.2 = 1;
000299 9a92      	SBI  0x12,2
                 ;PORTD.3 = 0;
00029a 9893      	CBI  0x12,3
                 ;PORTD.6 = 0;
00029b 9896      	CBI  0x12,6
                 ;PORTD.7 = 1;
00029c 9a97      	SBI  0x12,7
00029d c236      	RJMP _0x20C000F
                 ; .FEND
                 ;void mundur(unsigned char ki, unsigned char ka)
                 _mundur:
                 ; .FSTART _mundur
                 ;pwmka = ka;
00029e 940e 0e26 	CALL SUBOPT_0xE
                 ;	ki -> Y+1
                 ;	ka -> Y+0
                 ;pwmki = ki;
                 ;PORTD.2 = 0;
0002a0 9892      	CBI  0x12,2
                 ;PORTD.3 = 1;
0002a1 9a93      	SBI  0x12,3
                 ;PORTD.6 = 1;
0002a2 9a96      	SBI  0x12,6
                 ;PORTD.7 = 0;
0002a3 9897      	CBI  0x12,7
0002a4 c22f      	RJMP _0x20C000F
                 ; .FEND
                 ;void kanan(unsigned char ki, unsigned char ka)
                 _kanan:
                 ; .FSTART _kanan
                 ;pwmka = ka;
0002a5 940e 0e26 	CALL SUBOPT_0xE
                 ;	ki -> Y+1
                 ;	ka -> Y+0
                 ;pwmki = ki;
                 ;PORTD.2 = 0;
0002a7 9892      	CBI  0x12,2
                 ;PORTD.3 = 1;
0002a8 9a93      	SBI  0x12,3
                 ;PORTD.6 = 0;
0002a9 9896      	CBI  0x12,6
                 ;PORTD.7 = 1;
0002aa 9a97      	SBI  0x12,7
0002ab c228      	RJMP _0x20C000F
                 ; .FEND
                 ;void kiri(unsigned char ki, unsigned char ka)
                 _kiri:
                 ; .FSTART _kiri
                 ;pwmka = ka;
0002ac 940e 0e26 	CALL SUBOPT_0xE
                 ;	ki -> Y+1
                 ;	ka -> Y+0
                 ;pwmki = ki;
                 ;PORTD.2 = 1;
0002ae 9a92      	SBI  0x12,2
                 ;PORTD.3 = 0;
0002af 9893      	CBI  0x12,3
                 ;PORTD.6 = 1;
0002b0 9a96      	SBI  0x12,6
                 ;PORTD.7 = 0;
0002b1 9897      	CBI  0x12,7
0002b2 c221      	RJMP _0x20C000F
                 ; .FEND
                 ;void setMotor(int ki, int ka)
                 _setMotor:
                 ; .FSTART _setMotor
                 ;if (ki > 0)
0002b3 93ba      	ST   -Y,R27
0002b4 93aa      	ST   -Y,R26
                 ;	ki -> Y+2
                 ;	ka -> Y+0
0002b5 81aa      	LDD  R26,Y+2
0002b6 81bb      	LDD  R27,Y+2+1
0002b7 940e 1022 	CALL __CPW02
0002b9 f41c      	BRGE _0x56
                 ;PORTD.2 = 1;
0002ba 9a92      	SBI  0x12,2
                 ;PORTD.3 = 0;
0002bb 9893      	CBI  0x12,3
                 ;else
0002bc c008      	RJMP _0x5B
                 _0x56:
                 ;PORTD.2 = 0;
0002bd 9892      	CBI  0x12,2
                 ;PORTD.3 = 1;
0002be 9a93      	SBI  0x12,3
                 ;ki = abs(ki);
0002bf 81aa      	LDD  R26,Y+2
0002c0 81bb      	LDD  R27,Y+2+1
0002c1 940e 0cb8 	CALL _abs
0002c3 83ea      	STD  Y+2,R30
0002c4 83fb      	STD  Y+2+1,R31
                 _0x5B:
                 ;pwmki = ki;
0002c5 81ea      	LDD  R30,Y+2
0002c6 81fb      	LDD  R31,Y+2+1
0002c7 bdfb      	OUT  0x2A+1,R31
0002c8 bdea      	OUT  0x2A,R30
                 ;if (ka > 0)
0002c9 940e 0e30 	CALL SUBOPT_0xF
0002cb f41c      	BRGE _0x60
                 ;PORTD.7 = 1;
0002cc 9a97      	SBI  0x12,7
                 ;PORTD.6 = 0;
0002cd 9896      	CBI  0x12,6
                 ;else
0002ce c008      	RJMP _0x65
                 _0x60:
                 ;PORTD.7 = 0;
0002cf 9897      	CBI  0x12,7
                 ;PORTD.6 = 1;
0002d0 9a96      	SBI  0x12,6
                 ;ka = abs(ka);
0002d1 81a8      	LD   R26,Y
0002d2 81b9      	LDD  R27,Y+1
0002d3 940e 0cb8 	CALL _abs
0002d5 83e8      	ST   Y,R30
0002d6 83f9      	STD  Y+1,R31
                 _0x65:
                 ;pwmka = ka;
0002d7 81e8      	LD   R30,Y
0002d8 81f9      	LDD  R31,Y+1
0002d9 bdf9      	OUT  0x28+1,R31
0002da bde8      	OUT  0x28,R30
0002db c1df      	RJMP _0x20C0010
                 ; .FEND
                 ;void rem(int nilai_rem)
                 _rem:
                 ; .FSTART _rem
                 ;PORTD .4 = 1;
0002dc 93ba      	ST   -Y,R27
0002dd 93aa      	ST   -Y,R26
                 ;	nilai_rem -> Y+0
0002de 9a94      	SBI  0x12,4
                 ;PORTD .5 = 1;
0002df 9a95      	SBI  0x12,5
                 ;PORTD .2 = 0;
0002e0 9892      	CBI  0x12,2
                 ;PORTD .3 = 0;
0002e1 9893      	CBI  0x12,3
                 ;PORTD .6 = 0;
0002e2 9896      	CBI  0x12,6
                 ;PORTD .7 = 0;
0002e3 9897      	CBI  0x12,7
                 ;delay_ms(nilai_rem);
0002e4 81a8      	LD   R26,Y
0002e5 81b9      	LDD  R27,Y+1
0002e6 940e 110d 	CALL _delay_ms
0002e8 c1eb      	RJMP _0x20C000F
                 ; .FEND
                 ;void maju_delay(int kec, int lama)
                 _maju_delay:
                 ; .FSTART _maju_delay
                 ;maju(kec, kec);
0002e9 93ba      	ST   -Y,R27
0002ea 93aa      	ST   -Y,R26
                 ;	kec -> Y+2
                 ;	lama -> Y+0
0002eb 81ea      	LDD  R30,Y+2
0002ec 93ea      	ST   -Y,R30
0002ed 81ab      	LDD  R26,Y+3
0002ee dfa8      	RCALL _maju
                 ;delay(lama);
0002ef 940e 0e35 	CALL SUBOPT_0x10
0002f1 c1c9      	RJMP _0x20C0010
                 ; .FEND
                 ;void pilihSpeed(int kec)
                 _pilihSpeed:
                 ; .FSTART _pilihSpeed
                 ;kp = kec * 0.15;
0002f2 93ba      	ST   -Y,R27
0002f3 93aa      	ST   -Y,R26
                 ;	kec -> Y+0
0002f4 940e 0e39 	CALL SUBOPT_0x11
                +
0002f6 e9aa     +LDI R26 , LOW ( 0x3E19999A )
0002f7 e9b9     +LDI R27 , HIGH ( 0x3E19999A )
0002f8 e189     +LDI R24 , BYTE3 ( 0x3E19999A )
0002f9 e39e     +LDI R25 , BYTE4 ( 0x3E19999A )
                 	__GETD2N 0x3E19999A
0002fa 940e 10bf 	CALL __MULF12
0002fc e9a5      	LDI  R26,LOW(_kp)
0002fd e0b2      	LDI  R27,HIGH(_kp)
0002fe 940e 0e40 	CALL SUBOPT_0x12
                 ;kd = kec * 0.6;
000300 940e 0e39 	CALL SUBOPT_0x11
                +
000302 e9aa     +LDI R26 , LOW ( 0x3F19999A )
000303 e9b9     +LDI R27 , HIGH ( 0x3F19999A )
000304 e189     +LDI R24 , BYTE3 ( 0x3F19999A )
000305 e39f     +LDI R25 , BYTE4 ( 0x3F19999A )
                 	__GETD2N 0x3F19999A
000306 940e 10bf 	CALL __MULF12
000308 e9a7      	LDI  R26,LOW(_kd)
000309 e0b2      	LDI  R27,HIGH(_kd)
00030a 940e 0e40 	CALL SUBOPT_0x12
                 ;SPEED = kec;
00030c 81e8      	LD   R30,Y
00030d 81f9      	LDD  R31,Y+1
00030e 93e0 0299 	STS  _SPEED,R30
000310 93f0 029a 	STS  _SPEED+1,R31
                 ;MIN_SPEED = -(kec * 0.75);
000312 940e 0e39 	CALL SUBOPT_0x11
                +
000314 e0a0     +LDI R26 , LOW ( 0x3F400000 )
000315 e0b0     +LDI R27 , HIGH ( 0x3F400000 )
000316 e480     +LDI R24 , BYTE3 ( 0x3F400000 )
000317 e39f     +LDI R25 , BYTE4 ( 0x3F400000 )
                 	__GETD2N 0x3F400000
000318 940e 10bf 	CALL __MULF12
00031a 940e 1026 	CALL __ANEGF1
00031c e9ab      	LDI  R26,LOW(_MIN_SPEED)
00031d e0b2      	LDI  R27,HIGH(_MIN_SPEED)
00031e 940e 0e40 	CALL SUBOPT_0x12
                 ;MAX_SPEED = kec;
000320 81e8      	LD   R30,Y
000321 81f9      	LDD  R31,Y+1
000322 93e0 029d 	STS  _MAX_SPEED,R30
000324 93f0 029e 	STS  _MAX_SPEED+1,R31
000326 c1ad      	RJMP _0x20C000F
                 ; .FEND
                 ;void maju_cari_garis()
                 ;maju(180, 182);
                 ;cek_sensor(); // 0b01000000)!=0b00000000)
                 ;while ((sensor & 0b00000001) != 0b00000000)
                 ;cek_sensor();
                 ;rem(100);
                 ;void parkir()
                 _parkir:
                 ; .FSTART _parkir
                 ;lampu = 0;
000327 98c3      	CBI  0x18,3
                 ;while (1)
                 _0x7B:
                 ;rem(100);
000328 940e 0e45 	CALL SUBOPT_0x13
00032a cffd      	RJMP _0x7B
                 ; .FEND
                 ;void scan(int kec)
                 _scan:
                 ; .FSTART _scan
                 ;int rateError;
                 ;int moveVal, moveLeft, moveRight;
                 ;pilihSpeed(kec);
00032b 93ba      	ST   -Y,R27
00032c 93aa      	ST   -Y,R26
00032d 9722      	SBIW R28,2
00032e 940e 0f96 	CALL __SAVELOCR6
                 ;	kec -> Y+8
                 ;	rateError -> R16,R17
                 ;	moveVal -> R18,R19
                 ;	moveLeft -> R20,R21
                 ;	moveRight -> Y+6
000330 85a8      	LDD  R26,Y+8
000331 85b9      	LDD  R27,Y+8+1
000332 dfbf      	RCALL _pilihSpeed
                 ;sensor = sensor & 0b01111111;
000333 940e 0e49 	CALL SUBOPT_0x14
000335 77ef      	ANDI R30,LOW(0x7F)
000336 70f0      	ANDI R31,HIGH(0x7F)
000337 93e0 028f 	STS  _sensor,R30
000339 93f0 0290 	STS  _sensor+1,R31
                 ;switch (sensor) //  1=kiri 8=kanan
00033b 940e 0e49 	CALL SUBOPT_0x14
                 ;{               //  7......1
                 ;case 0b00000001:
00033d 30e1      	CPI  R30,LOW(0x1)
00033e e0a0      	LDI  R26,HIGH(0x1)
00033f 07fa      	CPC  R31,R26
000340 f419      	BRNE _0x81
                 ;error = -6;
000341 efea      	LDI  R30,LOW(65530)
000342 efff      	LDI  R31,HIGH(65530)
000343 c056      	RJMP _0x17D
                 ;break; // DOMINAN KANAN
                 ;case 0b00000011:
                 _0x81:
000344 30e3      	CPI  R30,LOW(0x3)
000345 e0a0      	LDI  R26,HIGH(0x3)
000346 07fa      	CPC  R31,R26
000347 f419      	BRNE _0x82
                 ;error = -5;
000348 efeb      	LDI  R30,LOW(65531)
000349 efff      	LDI  R31,HIGH(65531)
00034a c04f      	RJMP _0x17D
                 ;break;
                 ;case 0b00000010:
                 _0x82:
00034b 30e2      	CPI  R30,LOW(0x2)
00034c e0a0      	LDI  R26,HIGH(0x2)
00034d 07fa      	CPC  R31,R26
00034e f419      	BRNE _0x83
                 ;error = -4;
00034f efec      	LDI  R30,LOW(65532)
000350 efff      	LDI  R31,HIGH(65532)
000351 c048      	RJMP _0x17D
                 ;break;
                 ;case 0b00000110:
                 _0x83:
000352 30e6      	CPI  R30,LOW(0x6)
000353 e0a0      	LDI  R26,HIGH(0x6)
000354 07fa      	CPC  R31,R26
000355 f419      	BRNE _0x84
                 ;error = -3;
000356 efed      	LDI  R30,LOW(65533)
000357 efff      	LDI  R31,HIGH(65533)
000358 c041      	RJMP _0x17D
                 ;break;
                 ;case 0b00000100:
                 _0x84:
000359 30e4      	CPI  R30,LOW(0x4)
00035a e0a0      	LDI  R26,HIGH(0x4)
00035b 07fa      	CPC  R31,R26
00035c f419      	BRNE _0x85
                 ;error = -2;
00035d efee      	LDI  R30,LOW(65534)
00035e efff      	LDI  R31,HIGH(65534)
00035f c03a      	RJMP _0x17D
                 ;break;
                 ;case 0b00001100:
                 _0x85:
000360 30ec      	CPI  R30,LOW(0xC)
000361 e0a0      	LDI  R26,HIGH(0xC)
000362 07fa      	CPC  R31,R26
000363 f419      	BRNE _0x86
                 ;error = -1;
000364 efef      	LDI  R30,LOW(65535)
000365 efff      	LDI  R31,HIGH(65535)
000366 c033      	RJMP _0x17D
                 ;break;
                 ;case 0b00001000:
                 _0x86:
000367 30e8      	CPI  R30,LOW(0x8)
000368 e0a0      	LDI  R26,HIGH(0x8)
000369 07fa      	CPC  R31,R26
00036a f431      	BRNE _0x87
                 ;error = 0;
00036b e0e0      	LDI  R30,LOW(0)
00036c 93e0 0291 	STS  _error,R30
00036e 93e0 0292 	STS  _error+1,R30
                 ;break;
000370 c02d      	RJMP _0x80
                 ;case 0b00011000:
                 _0x87:
000371 31e8      	CPI  R30,LOW(0x18)
000372 e0a0      	LDI  R26,HIGH(0x18)
000373 07fa      	CPC  R31,R26
000374 f419      	BRNE _0x88
                 ;error = 1;
000375 e0e1      	LDI  R30,LOW(1)
000376 e0f0      	LDI  R31,HIGH(1)
000377 c022      	RJMP _0x17D
                 ;break;
                 ;case 0b00010000:
                 _0x88:
000378 31e0      	CPI  R30,LOW(0x10)
000379 e0a0      	LDI  R26,HIGH(0x10)
00037a 07fa      	CPC  R31,R26
00037b f419      	BRNE _0x89
                 ;error = 2;
00037c e0e2      	LDI  R30,LOW(2)
00037d e0f0      	LDI  R31,HIGH(2)
00037e c01b      	RJMP _0x17D
                 ;break;
                 ;case 0b00110000:
                 _0x89:
00037f 33e0      	CPI  R30,LOW(0x30)
000380 e0a0      	LDI  R26,HIGH(0x30)
000381 07fa      	CPC  R31,R26
000382 f419      	BRNE _0x8A
                 ;error = 3;
000383 e0e3      	LDI  R30,LOW(3)
000384 e0f0      	LDI  R31,HIGH(3)
000385 c014      	RJMP _0x17D
                 ;break;
                 ;case 0b00100000:
                 _0x8A:
000386 32e0      	CPI  R30,LOW(0x20)
000387 e0a0      	LDI  R26,HIGH(0x20)
000388 07fa      	CPC  R31,R26
000389 f419      	BRNE _0x8B
                 ;error = 4;
00038a e0e4      	LDI  R30,LOW(4)
00038b e0f0      	LDI  R31,HIGH(4)
00038c c00d      	RJMP _0x17D
                 ;break;
                 ;case 0b01100000:
                 _0x8B:
00038d 36e0      	CPI  R30,LOW(0x60)
00038e e0a0      	LDI  R26,HIGH(0x60)
00038f 07fa      	CPC  R31,R26
000390 f419      	BRNE _0x8C
                 ;error = 5;
000391 e0e5      	LDI  R30,LOW(5)
000392 e0f0      	LDI  R31,HIGH(5)
000393 c006      	RJMP _0x17D
                 ;break;
                 ;case 0b01000000:
                 _0x8C:
000394 34e0      	CPI  R30,LOW(0x40)
000395 e0a0      	LDI  R26,HIGH(0x40)
000396 07fa      	CPC  R31,R26
000397 f431      	BRNE _0x80
                 ;error = 6;
000398 e0e6      	LDI  R30,LOW(6)
000399 e0f0      	LDI  R31,HIGH(6)
                 _0x17D:
00039a 93e0 0291 	STS  _error,R30
00039c 93f0 0292 	STS  _error+1,R31
                 ;break; // DOMINAN KIRI
                 _0x80:
                 ;rateError = error - lastError;
00039e 91a0 0293 	LDS  R26,_lastError
0003a0 91b0 0294 	LDS  R27,_lastError+1
0003a2 91e0 0291 	LDS  R30,_error
0003a4 91f0 0292 	LDS  R31,_error+1
0003a6 1bea      	SUB  R30,R26
0003a7 0bfb      	SBC  R31,R27
0003a8 018f      	MOVW R16,R30
                 ;lastError = error;
0003a9 91e0 0291 	LDS  R30,_error
0003ab 91f0 0292 	LDS  R31,_error+1
0003ad 93e0 0293 	STS  _lastError,R30
0003af 93f0 0294 	STS  _lastError+1,R31
                 ;moveVal = (int)(error * kp) + (rateError * kd);
0003b1 91e0 0295 	LDS  R30,_kp
0003b3 91f0 0296 	LDS  R31,_kp+1
0003b5 91a0 0291 	LDS  R26,_error
0003b7 91b0 0292 	LDS  R27,_error+1
0003b9 940e 0fc1 	CALL __MULW12
0003bb 01bf      	MOVW R22,R30
0003bc 91e0 0297 	LDS  R30,_kd
0003be 91f0 0298 	LDS  R31,_kd+1
0003c0 01d8      	MOVW R26,R16
0003c1 940e 0fc1 	CALL __MULW12
0003c3 0fe6      	ADD  R30,R22
0003c4 1ff7      	ADC  R31,R23
0003c5 019f      	MOVW R18,R30
                 ;moveLeft = SPEED + moveVal;
0003c6 91a0 0299 	LDS  R26,_SPEED
0003c8 91b0 029a 	LDS  R27,_SPEED+1
0003ca 0fea      	ADD  R30,R26
0003cb 1ffb      	ADC  R31,R27
0003cc 01af      	MOVW R20,R30
                 ;moveRight = SPEED - moveVal;
0003cd 91e0 0299 	LDS  R30,_SPEED
0003cf 91f0 029a 	LDS  R31,_SPEED+1
0003d1 1be2      	SUB  R30,R18
0003d2 0bf3      	SBC  R31,R19
0003d3 83ee      	STD  Y+6,R30
0003d4 83ff      	STD  Y+6+1,R31
                 ;if (moveLeft > MAX_SPEED)
0003d5 940e 0e4e 	CALL SUBOPT_0x15
0003d7 17e4      	CP   R30,R20
0003d8 07f5      	CPC  R31,R21
0003d9 f424      	BRGE _0x8E
                 ;moveLeft = MAX_SPEED;
                +
0003da 9140 029d+LDS R20 , 0 + ( _MAX_SPEED )
0003dc 9150 029e+LDS R21 , 0 + ( _MAX_SPEED ) + 1
                 	__GETWRMN 20,21,0,_MAX_SPEED
                 ;if (moveLeft < MIN_SPEED)
                 _0x8E:
0003de 940e 0e53 	CALL SUBOPT_0x16
0003e0 174e      	CP   R20,R30
0003e1 075f      	CPC  R21,R31
0003e2 f424      	BRGE _0x8F
                 ;moveLeft = MIN_SPEED;
                +
0003e3 9140 029b+LDS R20 , 0 + ( _MIN_SPEED )
0003e5 9150 029c+LDS R21 , 0 + ( _MIN_SPEED ) + 1
                 	__GETWRMN 20,21,0,_MIN_SPEED
                 ;if (moveRight > MAX_SPEED)
                 _0x8F:
0003e7 940e 0e4e 	CALL SUBOPT_0x15
0003e9 81ae      	LDD  R26,Y+6
0003ea 81bf      	LDD  R27,Y+6+1
0003eb 17ea      	CP   R30,R26
0003ec 07fb      	CPC  R31,R27
0003ed f424      	BRGE _0x90
                 ;moveRight = MAX_SPEED;
0003ee 940e 0e4e 	CALL SUBOPT_0x15
0003f0 83ee      	STD  Y+6,R30
0003f1 83ff      	STD  Y+6+1,R31
                 ;if (moveRight < MIN_SPEED)
                 _0x90:
0003f2 940e 0e53 	CALL SUBOPT_0x16
0003f4 81ae      	LDD  R26,Y+6
0003f5 81bf      	LDD  R27,Y+6+1
0003f6 17ae      	CP   R26,R30
0003f7 07bf      	CPC  R27,R31
0003f8 f424      	BRGE _0x91
                 ;moveRight = MIN_SPEED;
0003f9 940e 0e53 	CALL SUBOPT_0x16
0003fb 83ee      	STD  Y+6,R30
0003fc 83ff      	STD  Y+6+1,R31
                 ;setMotor(moveLeft, moveRight);
                 _0x91:
0003fd 935a      	ST   -Y,R21
0003fe 934a      	ST   -Y,R20
0003ff 85a8      	LDD  R26,Y+8
000400 85b9      	LDD  R27,Y+8+1
000401 deb1      	RCALL _setMotor
000402 940e 0f9d 	CALL __LOADLOCR6
000404 962a      	ADIW R28,10
000405 9508      	RET
                 ; .FEND
                 ;void scanX(int brpkali, int kec)
                 _scanX:
                 ; .FSTART _scanX
                 ;while (hitung < brpkali)
000406 93ba      	ST   -Y,R27
000407 93aa      	ST   -Y,R26
                 ;	brpkali -> Y+2
                 ;	kec -> Y+0
                 _0x92:
000408 81ea      	LDD  R30,Y+2
000409 81fb      	LDD  R31,Y+2+1
00040a 164e      	CP   R4,R30
00040b 065f      	CPC  R5,R31
00040c f4d4      	BRGE _0x94
                 ;while ((sensor & 0b00011100) != 0b00011100)
                 _0x95:
00040d 940e 0e58 	CALL SUBOPT_0x17
00040f f029      	BREQ _0x97
                 ;cek_sensor();
000410 ddd1      	RCALL _cek_sensor
                 ;scan(kec);
000411 81a8      	LD   R26,Y
000412 81b9      	LDD  R27,Y+1
000413 df17      	RCALL _scan
000414 cff8      	RJMP _0x95
                 _0x97:
                 ;while ((sensor & 0b00011100) == 0b00011100)
                 _0x98:
000415 940e 0e58 	CALL SUBOPT_0x17
000417 f471      	BRNE _0x9A
                 ;cek_sensor();
000418 ddc9      	RCALL _cek_sensor
                 ;lampu = 0;
000419 98c3      	CBI  0x18,3
                 ;scan(kec);
00041a 81a8      	LD   R26,Y
00041b 81b9      	LDD  R27,Y+1
00041c df0e      	RCALL _scan
                 ;if ((sensor & 0b00011100) != 0b00011100)
00041d 940e 0e58 	CALL SUBOPT_0x17
00041f f029      	BREQ _0x9D
                 ;hitung++;
000420 01f2      	MOVW R30,R4
000421 9631      	ADIW R30,1
000422 012f      	MOVW R4,R30
000423 9731      	SBIW R30,1
                 ;lampu = 1;
000424 9ac3      	SBI  0x18,3
                 ;};
                 _0x9D:
000425 cfef      	RJMP _0x98
                 _0x9A:
                 ;};
000426 cfe1      	RJMP _0x92
                 _0x94:
                 ;hitung = 0;
000427 2444      	CLR  R4
000428 2455      	CLR  R5
000429 c091      	RJMP _0x20C0010
                 ; .FEND
                 ;void scanTimer(int countGoal, int kec, int lama)
                 _scanTimer:
                 ; .FSTART _scanTimer
                 ;count = 0;
00042a 93ba      	ST   -Y,R27
00042b 93aa      	ST   -Y,R26
                 ;	countGoal -> Y+4
                 ;	kec -> Y+2
                 ;	lama -> Y+0
00042c e0e0      	LDI  R30,LOW(0)
00042d 93e0 029f 	STS  _count,R30
00042f 93e0 02a0 	STS  _count+1,R30
                 ;while (count < countGoal)
                 _0xA0:
000431 81ec      	LDD  R30,Y+4
000432 81fd      	LDD  R31,Y+4+1
000433 91a0 029f 	LDS  R26,_count
000435 91b0 02a0 	LDS  R27,_count+1
000437 17ae      	CP   R26,R30
000438 07bf      	CPC  R27,R31
000439 f43c      	BRGE _0xA2
                 ;cek_sensor();
00043a 940e 0e5c 	CALL SUBOPT_0x18
                 ;scan(kec);
                 ;count++;
00043c e9af      	LDI  R26,LOW(_count)
00043d e0b2      	LDI  R27,HIGH(_count)
00043e 940e 0e62 	CALL SUBOPT_0x19
000440 cff0      	RJMP _0xA0
                 _0xA2:
                 ;rem(lama);
000441 940e 0e68 	CALL SUBOPT_0x1A
000443 c020      	RJMP _0x20C0011
                 ; .FEND
                 ;void scanKotak(int brpkali, int kec, int lama_rem) {
                 _scanKotak:
                 ; .FSTART _scanKotak
                 ;while (hitung < brpkali) {
000444 93ba      	ST   -Y,R27
000445 93aa      	ST   -Y,R26
                 ;	brpkali -> Y+4
                 ;	kec -> Y+2
                 ;	lama_rem -> Y+0
                 _0xA3:
000446 81ec      	LDD  R30,Y+4
000447 81fd      	LDD  R31,Y+4+1
000448 164e      	CP   R4,R30
000449 065f      	CPC  R5,R31
00044a f4bc      	BRGE _0xA5
                 ;while(1)
                 _0xA6:
                 ;cek_sensor();
00044b 940e 0e5c 	CALL SUBOPT_0x18
                 ;scan(kec);
                 ;if((sensor & 0b01111111) == 0b01111111) {
00044d 940e 0e49 	CALL SUBOPT_0x14
00044f 77ef      	ANDI R30,0x7F
000450 37ef      	CPI  R30,LOW(0x7F)
000451 f471      	BRNE _0xA9
                 ;hitung++; mundur(kec, kec); delay(lama_rem); rem(10); break;
000452 01f2      	MOVW R30,R4
000453 9631      	ADIW R30,1
000454 012f      	MOVW R4,R30
000455 9731      	SBIW R30,1
000456 81ea      	LDD  R30,Y+2
000457 93ea      	ST   -Y,R30
000458 81ab      	LDD  R26,Y+3
000459 de44      	RCALL _mundur
00045a 940e 0e35 	CALL SUBOPT_0x10
00045c e0aa      	LDI  R26,LOW(10)
00045d e0b0      	LDI  R27,0
00045e de7d      	RCALL _rem
00045f c001      	RJMP _0xA8
                 _0xA9:
000460 cfea      	RJMP _0xA6
                 _0xA8:
000461 cfe4      	RJMP _0xA3
                 _0xA5:
                 ;hitung = 0;
000462 2444      	CLR  R4
000463 2455      	CLR  R5
                 _0x20C0011:
000464 9626      	ADIW R28,6
000465 9508      	RET
                 ; .FEND
                 ;void scanTka(int brpkali)
                 ;while (hitung < brpkali)
                 ;	brpkali -> Y+0
                 ;cek_sensor();
                 ;while ((sensor & 0b01110000) != 0b01110000) // kanan
                 ;cek_sensor();
                 ;scan(170);
                 ;while ((sensor & 0b01110000) == 0b01110000)
                 ;cek_sensor();
                 ;scan(170);
                 ;if ((sensor & 0b01110000) != 0b01110000)
                 ;hitung++;
                 ;lcd_kedip(1);
                 ;};
                 ;};
                 ;hitung = 0;
                 ;void scanTki(int brpkali)
                 ;while (hitung < brpkali)
                 ;	brpkali -> Y+0
                 ;cek_sensor();
                 ;while ((sensor & 0b00000111) != 0b00000111) // kanan
                 ;cek_sensor();
                 ;scan(170);
                 ;while ((sensor & 0b00000111) == 0b00000111)
                 ;cek_sensor();
                 ;scan(170);
                 ;if ((sensor & 0b00000111) != 0b00000111)
                 ;hitung++;
                 ;lcd_kedip(1);
                 ;};
                 ;};
                 ;hitung = 0;
                 ;void scan7ki()
                 ;cek_sensor();
                 ;while ((sensor & 0b01000000) != 0b01000000)
                 ;cek_sensor();
                 ;scan(170);
                 ;void scan7ka()
                 ;cek_sensor();
                 ;while ((sensor & 0b01000000) != 0b00000000)
                 ;cek_sensor();
                 ;scan(170);
                 ;void scan7ki2()
                 ;cek_sensor();
                 ;while (sensor == 0b00000000) // sensor !=0b00111111||0b00000011|| 0b00000001
                 ;cek_sensor();
                 ;scan(170);
                 ;void belki(int kec, int lama)
                 _belki:
                 ; .FSTART _belki
                 ;cek_sensor();
000466 93ba      	ST   -Y,R27
000467 93aa      	ST   -Y,R26
                 ;	kec -> Y+2
                 ;	lama -> Y+0
000468 dd79      	RCALL _cek_sensor
                 ;while (sen[0] || sen[1])
                 _0xC7:
000469 91e0 0288 	LDS  R30,_sen
00046b 30e0      	CPI  R30,0
00046c f421      	BRNE _0xCA
                +
00046d 91e0 0289+LDS R30 , _sen + ( 1 )
                 	__GETB1MN _sen,1
00046f 30e0      	CPI  R30,0
000470 f019      	BREQ _0xC9
                 _0xCA:
                 ;kiri(kec, kec);
000471 940e 0e6c 	CALL SUBOPT_0x1B
                 ;cek_sensor();
000473 cff5      	RJMP _0xC7
                 _0xC9:
                 ;while (!sen[0] && !sen[1])
                 _0xCC:
000474 91e0 0288 	LDS  R30,_sen
000476 30e0      	CPI  R30,0
000477 f421      	BRNE _0xCF
                +
000478 91e0 0289+LDS R30 , _sen + ( 1 )
                 	__GETB1MN _sen,1
00047a 30e0      	CPI  R30,0
00047b f009      	BREQ _0xD0
                 _0xCF:
00047c c003      	RJMP _0xCE
                 _0xD0:
                 ;kiri(kec, kec);
00047d 940e 0e6c 	CALL SUBOPT_0x1B
                 ;cek_sensor();
00047f cff4      	RJMP _0xCC
                 _0xCE:
                 ;if (lama > 0)
000480 940e 0e30 	CALL SUBOPT_0xF
000482 f414      	BRGE _0xD1
                 ;rem(lama);
000483 940e 0e68 	CALL SUBOPT_0x1A
                 _0xD1:
000485 c035      	RJMP _0x20C0010
                 ; .FEND
                 ;void belki2()
                 ;cek_sensor();
                 ;while ((sensor & 0b00000001) != 0b00000000)
                 ;cek_sensor();
                 ;kiri(150, 150);
                 ;void belka(int kec, int lama)
                 _belka:
                 ; .FSTART _belka
                 ;cek_sensor();
000486 93ba      	ST   -Y,R27
000487 93aa      	ST   -Y,R26
                 ;	kec -> Y+2
                 ;	lama -> Y+0
000488 dd59      	RCALL _cek_sensor
                 ;while (sen[5] || sen[6])
                 _0xD5:
                +
000489 91e0 028d+LDS R30 , _sen + ( 5 )
                 	__GETB1MN _sen,5
00048b 30e0      	CPI  R30,0
00048c f421      	BRNE _0xD8
                +
00048d 91e0 028e+LDS R30 , _sen + ( 6 )
                 	__GETB1MN _sen,6
00048f 30e0      	CPI  R30,0
000490 f019      	BREQ _0xD7
                 _0xD8:
                 ;kanan(kec, kec);
000491 940e 0e73 	CALL SUBOPT_0x1C
                 ;cek_sensor();
000493 cff5      	RJMP _0xD5
                 _0xD7:
                 ;while (!sen[5] && !sen[6])
                 _0xDA:
                +
000494 91e0 028d+LDS R30 , _sen + ( 5 )
                 	__GETB1MN _sen,5
000496 30e0      	CPI  R30,0
000497 f421      	BRNE _0xDD
                +
000498 91e0 028e+LDS R30 , _sen + ( 6 )
                 	__GETB1MN _sen,6
00049a 30e0      	CPI  R30,0
00049b f009      	BREQ _0xDE
                 _0xDD:
00049c c003      	RJMP _0xDC
                 _0xDE:
                 ;kanan(kec, kec);
00049d 940e 0e73 	CALL SUBOPT_0x1C
                 ;cek_sensor();
00049f cff4      	RJMP _0xDA
                 _0xDC:
                 ;if (lama > 0)
0004a0 940e 0e30 	CALL SUBOPT_0xF
0004a2 f414      	BRGE _0xDF
                 ;rem(lama);
0004a3 940e 0e68 	CALL SUBOPT_0x1A
                 _0xDF:
0004a5 c015      	RJMP _0x20C0010
                 ; .FEND
                 ;void belkacenter()
                 ;cek_sensor();
                 ;while ((sensor & 0b00001000) != 0b00001000)
                 ;cek_sensor();
                 ;kanan(180, 180);
                 ;if ((sensor & 0b10000000) == 0b10000000)
                 ;lcd_kedip(1);
                 ;void scan_delay(int ms)
                 ;k = 0;
                 ;	ms -> Y+0
                 ;maju(172, 170);
                 ;while (k < ms / 10)
                 ;delay_ms(10);
                 ;k++;
                 ;cek_sensor();
                 ;scan(180);
                 ;void belokKanan(int kec, int lama_rem) {
                 _belokKanan:
                 ; .FSTART _belokKanan
                 ;if(mapMirror == 0) {
0004a6 940e 0e7a 	CALL SUBOPT_0x1D
                 ;	kec -> Y+2
                 ;	lama_rem -> Y+0
0004a8 f421      	BRNE _0xE7
                 ;belka(kec, lama_rem);
0004a9 940e 0e82 	CALL SUBOPT_0x1E
0004ab dfda      	RCALL _belka
                 ;} else {
0004ac c003      	RJMP _0xE8
                 _0xE7:
                 ;belki(kec, lama_rem);
0004ad 940e 0e82 	CALL SUBOPT_0x1E
0004af dfb6      	RCALL _belki
                 _0xE8:
0004b0 c00a      	RJMP _0x20C0010
                 ; .FEND
                 ;void belokKiri(int kec, int lama_rem) {
                 _belokKiri:
                 ; .FSTART _belokKiri
                 ;if(mapMirror == 0) {
0004b1 940e 0e7a 	CALL SUBOPT_0x1D
                 ;	kec -> Y+2
                 ;	lama_rem -> Y+0
0004b3 f421      	BRNE _0xE9
                 ;belki(kec, lama_rem);
0004b4 940e 0e82 	CALL SUBOPT_0x1E
0004b6 dfaf      	RCALL _belki
                 ;} else {
0004b7 c003      	RJMP _0xEA
                 _0xE9:
                 ;belka(kec, lama_rem);
0004b8 940e 0e82 	CALL SUBOPT_0x1E
0004ba dfcb      	RCALL _belka
                 _0xEA:
                 _0x20C0010:
0004bb 9624      	ADIW R28,4
0004bc 9508      	RET
                 ; .FEND
                 ;void griper()
                 ; 0000 0064 {
                 ;capit_lepas;
                 ;lengan_tengah;
                 ;delay_ms(5000);
                 ;lengan_bawah;
                 ;delay_ms(5000);
                 ;capit_ambil;
                 ;delay_ms(7000);
                 ;lengan_atas;
                 ;delay_ms(5000);
                 ;lengan_bawah;
                 ;delay_ms(5000);
                 ;capit_lepas;
                 ;void ambil(int lama)
                 _ambil:
                 ; .FSTART _ambil
                 ;capit_ambil;
0004bd 93ba      	ST   -Y,R27
0004be 93aa      	ST   -Y,R26
                 ;	lama -> Y+0
0004bf eeed      	LDI  R30,LOW(237)
0004c0 2ede      	MOV  R13,R30
                 ;delay(lama);
0004c1 940e 0e35 	CALL SUBOPT_0x10
                 ;lengan_atas;
0004c3 eeea      	LDI  R30,LOW(234)
0004c4 2ece      	MOV  R12,R30
                 ;delay(lama);
0004c5 940e 0e35 	CALL SUBOPT_0x10
0004c7 c00c      	RJMP _0x20C000F
                 ; .FEND
                 ;void taruh(int lama)
                 _taruh:
                 ; .FSTART _taruh
                 ;lengan_bawah;
0004c8 93ba      	ST   -Y,R27
0004c9 93aa      	ST   -Y,R26
                 ;	lama -> Y+0
0004ca efe0      	LDI  R30,LOW(240)
0004cb 2ece      	MOV  R12,R30
                 ;delay(lama);
0004cc 940e 0e35 	CALL SUBOPT_0x10
                 ;capit_lepas;
0004ce eee6      	LDI  R30,LOW(230)
0004cf 2ede      	MOV  R13,R30
                 ;delay(lama);
0004d0 940e 0e35 	CALL SUBOPT_0x10
                 ;lengan_atas;
0004d2 eeea      	LDI  R30,LOW(234)
0004d3 2ece      	MOV  R12,R30
                 _0x20C000F:
0004d4 9622      	ADIW R28,2
0004d5 9508      	RET
                 ; .FEND
                 ;void bawah_lepas()
                 _bawah_lepas:
                 ; .FSTART _bawah_lepas
                 ;lengan_bawah;
0004d6 efe0      	LDI  R30,LOW(240)
0004d7 2ece      	MOV  R12,R30
                 ;capit_lepas;
0004d8 eee6      	LDI  R30,LOW(230)
0004d9 2ede      	MOV  R13,R30
0004da 9508      	RET
                 ; .FEND
                 ;void atas_lepas()
                 ;lengan_atas;
                 ;capit_lepas;
                 ;void bacawarna()
                 ; 0000 0065 {
                 _bacawarna:
                 ; .FSTART _bacawarna
                 ;nadc7 = read_adc(7);
0004db e0a7      	LDI  R26,LOW(7)
0004dc dca9      	RCALL _read_adc
0004dd 2e6e      	MOV  R6,R30
0004de 2477      	CLR  R7
                 ;lcd_gotoxy(13, 1);
0004df e0ed      	LDI  R30,LOW(13)
0004e0 940e 0e89 	CALL SUBOPT_0x1F
                 ;sprintf(buff, "%d   ", nadc7);
0004e2 940e 0dd7 	CALL SUBOPT_0x4
                +
0004e4 edee     +LDI R30 , LOW ( 2 * _0x0 + ( 94 ) )
0004e5 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 94 ) )
                 	__POINTW1FN _0x0,94
0004e6 93fa      	ST   -Y,R31
0004e7 93ea      	ST   -Y,R30
0004e8 01f3      	MOVW R30,R6
0004e9 2766      	CLR  R22
0004ea 2777      	CLR  R23
0004eb 940e 0ff4 	CALL __PUTPARD1
0004ed e084      	LDI  R24,4
0004ee 940e 0c63 	CALL _sprintf
0004f0 9628      	ADIW R28,8
                 ;lcd_puts(buff);
                 _0x20C000E:
0004f1 e6a0      	LDI  R26,LOW(_buff)
0004f2 e0b2      	LDI  R27,HIGH(_buff)
0004f3 940e 0d52 	CALL _lcd_puts
0004f5 9508      	RET
                 ; .FEND
                 ;int checkWarna() {
                 _checkWarna:
                 ; .FSTART _checkWarna
                 ;int warna;
                 ;nadc7 = read_adc(7);
0004f6 931a      	ST   -Y,R17
0004f7 930a      	ST   -Y,R16
                 ;	warna -> R16,R17
0004f8 e0a7      	LDI  R26,LOW(7)
0004f9 dc8c      	RCALL _read_adc
0004fa 2e6e      	MOV  R6,R30
0004fb 2477      	CLR  R7
                 ;if(nadc7>minMerah && nadc7<maxMerah){
0004fc 91e0 02af 	LDS  R30,_minMerah
0004fe 91f0 02b0 	LDS  R31,_minMerah+1
000500 15e6      	CP   R30,R6
000501 05f7      	CPC  R31,R7
000502 f438      	BRSH _0xEC
000503 91e0 02a9 	LDS  R30,_maxMerah
000505 91f0 02aa 	LDS  R31,_maxMerah+1
000507 166e      	CP   R6,R30
000508 067f      	CPC  R7,R31
000509 f008      	BRLO _0xED
                 _0xEC:
00050a c003      	RJMP _0xEB
                 _0xED:
                 ;warna = 0;
                +
00050b e000     +LDI R16 , LOW ( 0 )
00050c e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ;else if(nadc7>minKuning && nadc7<maxKuning){
00050d c026      	RJMP _0xEE
                 _0xEB:
00050e 91e0 02ad 	LDS  R30,_minKuning
000510 91f0 02ae 	LDS  R31,_minKuning+1
000512 15e6      	CP   R30,R6
000513 05f7      	CPC  R31,R7
000514 f438      	BRSH _0xF0
000515 91e0 02a7 	LDS  R30,_maxKuning
000517 91f0 02a8 	LDS  R31,_maxKuning+1
000519 166e      	CP   R6,R30
00051a 067f      	CPC  R7,R31
00051b f008      	BRLO _0xF1
                 _0xF0:
00051c c003      	RJMP _0xEF
                 _0xF1:
                 ;warna = 1;
                +
00051d e001     +LDI R16 , LOW ( 1 )
00051e e010     +LDI R17 , HIGH ( 1 )
                 	__GETWRN 16,17,1
                 ;else if(nadc7>minHijau && nadc7<maxHijau){
00051f c014      	RJMP _0xF2
                 _0xEF:
000520 91e0 02ab 	LDS  R30,_minHijau
000522 91f0 02ac 	LDS  R31,_minHijau+1
000524 15e6      	CP   R30,R6
000525 05f7      	CPC  R31,R7
000526 f438      	BRSH _0xF4
000527 91e0 02a5 	LDS  R30,_maxHijau
000529 91f0 02a6 	LDS  R31,_maxHijau+1
00052b 166e      	CP   R6,R30
00052c 067f      	CPC  R7,R31
00052d f008      	BRLO _0xF5
                 _0xF4:
00052e c003      	RJMP _0xF3
                 _0xF5:
                 ;warna = 2;
                +
00052f e002     +LDI R16 , LOW ( 2 )
000530 e010     +LDI R17 , HIGH ( 2 )
                 	__GETWRN 16,17,2
                 ;}else{
000531 c002      	RJMP _0xF6
                 _0xF3:
                 ;warna = 3;
                +
000532 e003     +LDI R16 , LOW ( 3 )
000533 e010     +LDI R17 , HIGH ( 3 )
                 	__GETWRN 16,17,3
                 _0xF6:
                 _0xF2:
                 _0xEE:
                 ;return warna;
000534 01f8      	MOVW R30,R16
000535 9109      	LD   R16,Y+
000536 9119      	LD   R17,Y+
000537 9508      	RET
                 ; .FEND
                 ;int isWarna;
                 ;void balikKiri(void);
                 ;void fromBtoGreen()
                 ; 0000 0066 {
                 _fromBtoGreen:
                 ; .FSTART _fromBtoGreen
                 ;scanX(2, 120);
000538 940e 0e8d 	CALL SUBOPT_0x20
00053a 940e 0e92 	CALL SUBOPT_0x21
                 ;scanX(1, 100);
00053c 940e 0e96 	CALL SUBOPT_0x22
00053e 940e 0e9b 	CALL SUBOPT_0x23
                 ;delay(15); scanKotak(1, 90, 5);
000540 940e 0e9f 	CALL SUBOPT_0x24
000542 940e 0ea4 	CALL SUBOPT_0x25
                 ;taruh(20);
                 ;mundur(100, 100); delay(38);
                 ;belokKiri(100, 20);
000544 940e 0ebe 	CALL SUBOPT_0x26
                 ;scanX(2, 100);
000546 940e 0e9b 	CALL SUBOPT_0x23
                 ;belokKiri(100, 20);
000548 940e 0ec3 	CALL SUBOPT_0x27
00054a 940e 0ebe 	CALL SUBOPT_0x26
                 ;scanX(2, 120);
00054c 940e 0e92 	CALL SUBOPT_0x21
                 ;bawah_lepas();
00054e 940e 0ec8 	CALL SUBOPT_0x28
                 ;scanX(1, 90);
000550 e5aa      	LDI  R26,LOW(90)
000551 c0e6      	RJMP _0x20C000D
                 ;scanTimer(33, 80, 50);
                 ;ambil(20);
                 ; .FEND
                 ;void fromBtoYellow()
                 _fromBtoYellow:
                 ; .FSTART _fromBtoYellow
                 ;scanX(1, 100);
000552 940e 0e96 	CALL SUBOPT_0x22
000554 940e 0e9b 	CALL SUBOPT_0x23
                 ;belokKanan(100, 20);
000556 940e 0ec3 	CALL SUBOPT_0x27
000558 940e 0ecb 	CALL SUBOPT_0x29
                 ;scanX(2, 120);
00055a 940e 0e8d 	CALL SUBOPT_0x20
00055c 940e 0e92 	CALL SUBOPT_0x21
                 ;scanX(1, 100);
00055e 940e 0e96 	CALL SUBOPT_0x22
000560 940e 0e9b 	CALL SUBOPT_0x23
                 ;delay(15); scanKotak(1, 90, 5);
000562 940e 0e9f 	CALL SUBOPT_0x24
000564 940e 0ea4 	CALL SUBOPT_0x25
                 ;taruh(20);
                 ;mundur(100, 100); delay(38);
                 ;belokKiri(100, 5); belokKiri(100, 20);
000566 e0a5      	LDI  R26,LOW(5)
000567 e0b0      	LDI  R27,0
000568 df48      	RCALL _belokKiri
000569 940e 0ec3 	CALL SUBOPT_0x27
00056b 940e 0ecf 	CALL SUBOPT_0x2A
                 ;scanX(1, 100);
00056d 940e 0e96 	CALL SUBOPT_0x22
00056f 940e 0e9b 	CALL SUBOPT_0x23
                 ;scanX(3, 120);
000571 940e 0ed3 	CALL SUBOPT_0x2B
                 ;scanX(1, 100);
000573 940e 0e96 	CALL SUBOPT_0x22
000575 940e 0e9b 	CALL SUBOPT_0x23
                 ;belokKiri(100, 20);
000577 940e 0ec3 	CALL SUBOPT_0x27
000579 940e 0ecf 	CALL SUBOPT_0x2A
                 ;bawah_lepas();
00057b 940e 0ec8 	CALL SUBOPT_0x28
                 ;scanX(1, 100);
00057d 940e 0e9b 	CALL SUBOPT_0x23
                 ;scanTimer(50, 90, 50);
00057f e3e2      	LDI  R30,LOW(50)
000580 e0f0      	LDI  R31,HIGH(50)
000581 93fa      	ST   -Y,R31
000582 93ea      	ST   -Y,R30
000583 e5ea      	LDI  R30,LOW(90)
000584 e0f0      	LDI  R31,HIGH(90)
000585 c0ba      	RJMP _0x20C000C
                 ;ambil(20);
                 ; .FEND
                 ;void fromBtoRed() {
                 _fromBtoRed:
                 ; .FSTART _fromBtoRed
                 ;scanX(1, 100);
000586 940e 0e96 	CALL SUBOPT_0x22
000588 940e 0e9b 	CALL SUBOPT_0x23
                 ;belokKiri(100, 20);
00058a 940e 0ec3 	CALL SUBOPT_0x27
00058c 940e 0ebe 	CALL SUBOPT_0x26
                 ;scanX(2, 120);
00058e 940e 0e92 	CALL SUBOPT_0x21
                 ;scanX(1, 100);
000590 940e 0e96 	CALL SUBOPT_0x22
000592 940e 0e9b 	CALL SUBOPT_0x23
                 ;delay(15); scanKotak(1, 90, 5);
000594 940e 0e9f 	CALL SUBOPT_0x24
000596 940e 0ea4 	CALL SUBOPT_0x25
                 ;taruh(20);
                 ;mundur(100, 100); delay(38);
                 ;belokKanan(100, 5); belokKanan(100, 20);
000598 940e 0ed8 	CALL SUBOPT_0x2C
00059a 940e 0ecb 	CALL SUBOPT_0x29
                 ;scanX(1, 100);
00059c 940e 0e96 	CALL SUBOPT_0x22
00059e 940e 0e9b 	CALL SUBOPT_0x23
                 ;belokKanan(100, 20);
0005a0 940e 0ec3 	CALL SUBOPT_0x27
0005a2 940e 0ecb 	CALL SUBOPT_0x29
                 ;bawah_lepas();
0005a4 940e 0ec8 	CALL SUBOPT_0x28
                 ;scanX(1, 100);
0005a6 940e 0e9b 	CALL SUBOPT_0x23
                 ;scanTimer(43, 95, 50);
0005a8 e2eb      	LDI  R30,LOW(43)
0005a9 e0f0      	LDI  R31,HIGH(43)
0005aa 93fa      	ST   -Y,R31
0005ab 93ea      	ST   -Y,R30
0005ac e5ef      	LDI  R30,LOW(95)
0005ad e0f0      	LDI  R31,HIGH(95)
0005ae c091      	RJMP _0x20C000C
                 ;ambil(20);
                 ; .FEND
                 ;void fromCtoGreen() {
                 _fromCtoGreen:
                 ; .FSTART _fromCtoGreen
                 ;scanX(1, 100);
0005af 940e 0e96 	CALL SUBOPT_0x22
0005b1 940e 0e9b 	CALL SUBOPT_0x23
                 ;belokKiri(100, 20);
0005b3 940e 0ec3 	CALL SUBOPT_0x27
0005b5 940e 0ecf 	CALL SUBOPT_0x2A
                 ;scanX(1, 100);
0005b7 940e 0e96 	CALL SUBOPT_0x22
0005b9 940e 0e9b 	CALL SUBOPT_0x23
                 ;scanX(2, 120);
0005bb 940e 0e8d 	CALL SUBOPT_0x20
0005bd 940e 0e92 	CALL SUBOPT_0x21
                 ;scanX(2, 100);
0005bf 940e 0e8d 	CALL SUBOPT_0x20
0005c1 940e 0e9b 	CALL SUBOPT_0x23
                 ;delay(15); scanKotak(1, 90, 5);
0005c3 940e 0e9f 	CALL SUBOPT_0x24
0005c5 940e 0ea4 	CALL SUBOPT_0x25
                 ;taruh(20);
                 ;mundur(100, 100); delay(38);
                 ;belokKanan(100, 5); belokKanan(100, 20);
0005c7 940e 0ed8 	CALL SUBOPT_0x2C
0005c9 940e 0ecb 	CALL SUBOPT_0x29
                 ;scanX(1, 100);
0005cb 940e 0e96 	CALL SUBOPT_0x22
0005cd 940e 0e9b 	CALL SUBOPT_0x23
                 ;scanX(2, 100);
0005cf 940e 0e8d 	CALL SUBOPT_0x20
0005d1 940e 0e9b 	CALL SUBOPT_0x23
                 ;belokKanan(100, 20);
0005d3 940e 0ec3 	CALL SUBOPT_0x27
0005d5 940e 0ecb 	CALL SUBOPT_0x29
                 ;scanX(2, 120);
0005d7 940e 0e8d 	CALL SUBOPT_0x20
0005d9 940e 0e92 	CALL SUBOPT_0x21
                 ;scanX(1, 100);
0005db 940e 0e96 	CALL SUBOPT_0x22
0005dd 940e 0e9b 	CALL SUBOPT_0x23
                 ;scanX(1, 100);
0005df 940e 0e96 	CALL SUBOPT_0x22
0005e1 940e 0e9b 	CALL SUBOPT_0x23
                 ;belokKanan(90, 10);
0005e3 940e 0edd 	CALL SUBOPT_0x2D
0005e5 e0aa      	LDI  R26,LOW(10)
0005e6 e0b0      	LDI  R27,0
0005e7 debe      	RCALL _belokKanan
                 ;scanX(1, 100);
0005e8 940e 0e96 	CALL SUBOPT_0x22
0005ea 940e 0e9b 	CALL SUBOPT_0x23
                 ;bawah_lepas();
0005ec dee9      	RCALL _bawah_lepas
                 ;scanTimer(63, 80, 50);
0005ed e3ef      	LDI  R30,LOW(63)
0005ee e0f0      	LDI  R31,HIGH(63)
0005ef c04c      	RJMP _0x20C000B
                 ;ambil(20);
                 ; .FEND
                 ;void fromCtoYellow() {
                 _fromCtoYellow:
                 ; .FSTART _fromCtoYellow
                 ;scanX(1, 100);
0005f0 940e 0e96 	CALL SUBOPT_0x22
0005f2 940e 0e9b 	CALL SUBOPT_0x23
                 ;belokKanan(100, 20);
0005f4 940e 0ec3 	CALL SUBOPT_0x27
0005f6 940e 0ecb 	CALL SUBOPT_0x29
                 ;scanX(1, 100);
0005f8 940e 0e96 	CALL SUBOPT_0x22
0005fa 940e 0e9b 	CALL SUBOPT_0x23
                 ;delay(15); scanKotak(1, 90, 5);
0005fc 940e 0e9f 	CALL SUBOPT_0x24
0005fe 940e 0ea4 	CALL SUBOPT_0x25
                 ;taruh(20);
                 ;mundur(100, 100); delay(38);
                 ;belokKanan(100, 20);
000600 940e 0ecb 	CALL SUBOPT_0x29
                 ;scanX(2, 120);
000602 940e 0e8d 	CALL SUBOPT_0x20
000604 940e 0e92 	CALL SUBOPT_0x21
                 ;scanX(1, 100);
000606 940e 0e96 	CALL SUBOPT_0x22
000608 940e 0e9b 	CALL SUBOPT_0x23
                 ;scanX(1, 100);
00060a 940e 0e96 	CALL SUBOPT_0x22
00060c 940e 0e9b 	CALL SUBOPT_0x23
                 ;belokKanan(100, 20);
00060e 940e 0ec3 	CALL SUBOPT_0x27
000610 940e 0ecb 	CALL SUBOPT_0x29
                 ;scanX(2, 120);
000612 e0e2      	LDI  R30,LOW(2)
000613 e0f0      	LDI  R31,HIGH(2)
000614 c018      	RJMP _0x20C000A
                 ;scanX(1, 100);
                 ;bawah_lepas();
                 ;scanX(1, 100);
                 ;scanTimer(33, 80, 50);
                 ;ambil(20);
                 ; .FEND
                 ;void fromCtoRed() {
                 _fromCtoRed:
                 ; .FSTART _fromCtoRed
                 ;mundur(100, 100); delay(33);
000615 940e 0ee2 	CALL SUBOPT_0x2E
                 ;belokKanan(100, 5); belokKanan(100, 20);
000617 940e 0ed8 	CALL SUBOPT_0x2C
000619 940e 0ecb 	CALL SUBOPT_0x29
                 ;scanX(1, 90);
00061b 940e 0e96 	CALL SUBOPT_0x22
00061d 940e 0eec 	CALL SUBOPT_0x2F
                 ;scanX(1, 120);
00061f 940e 0e92 	CALL SUBOPT_0x21
                 ;scanX(1, 100);
000621 940e 0e96 	CALL SUBOPT_0x22
000623 940e 0e9b 	CALL SUBOPT_0x23
                 ;delay(15); scanKotak(1, 90, 5);
000625 940e 0e9f 	CALL SUBOPT_0x24
000627 940e 0ea4 	CALL SUBOPT_0x25
                 ;taruh(20);
                 ;mundur(100, 100); delay(38);
                 ;belokKanan(100, 20);
000629 940e 0ecb 	CALL SUBOPT_0x29
                 ;scanX(1, 120);
00062b e0e1      	LDI  R30,LOW(1)
00062c e0f0      	LDI  R31,HIGH(1)
                 _0x20C000A:
00062d 93fa      	ST   -Y,R31
00062e 93ea      	ST   -Y,R30
00062f 940e 0e92 	CALL SUBOPT_0x21
                 ;scanX(1, 100);
000631 940e 0e96 	CALL SUBOPT_0x22
000633 940e 0e9b 	CALL SUBOPT_0x23
                 ;bawah_lepas();
000635 940e 0ec8 	CALL SUBOPT_0x28
                 ;scanX(1, 100);
000637 e6a4      	LDI  R26,LOW(100)
                 _0x20C000D:
000638 e0b0      	LDI  R27,0
000639 ddcc      	RCALL _scanX
                 ;scanTimer(33, 80, 50);
00063a e2e1      	LDI  R30,LOW(33)
00063b e0f0      	LDI  R31,HIGH(33)
                 _0x20C000B:
00063c 93fa      	ST   -Y,R31
00063d 93ea      	ST   -Y,R30
00063e e5e0      	LDI  R30,LOW(80)
00063f e0f0      	LDI  R31,HIGH(80)
                 _0x20C000C:
000640 93fa      	ST   -Y,R31
000641 93ea      	ST   -Y,R30
000642 940e 0ef1 	CALL SUBOPT_0x30
                 ;ambil(20);
000644 9508      	RET
                 ; .FEND
                 ;void fromAtoGreen() {
                 _fromAtoGreen:
                 ; .FSTART _fromAtoGreen
                 ;mundur(100, 100); delay(33);
000645 940e 0ee2 	CALL SUBOPT_0x2E
                 ;belokKanan(100, 5); belokKanan(100, 20);
000647 940e 0ed8 	CALL SUBOPT_0x2C
000649 940e 0ecb 	CALL SUBOPT_0x29
                 ;scanX(1, 100);
00064b 940e 0e96 	CALL SUBOPT_0x22
00064d 940e 0e9b 	CALL SUBOPT_0x23
                 ;scanX(1, 120);
00064f 940e 0e96 	CALL SUBOPT_0x22
000651 940e 0e92 	CALL SUBOPT_0x21
                 ;scanX(1, 120);
000653 c00d      	RJMP _0x20C0009
                 ;scanX(1, 100);
                 ;delay(15); scanKotak(1, 90, 5);
                 ;taruh(20);
                 ; .FEND
                 ;void fromAtoYellow() {
                 _fromAtoYellow:
                 ; .FSTART _fromAtoYellow
                 ;scanX(1, 100);
000654 940e 0e96 	CALL SUBOPT_0x22
000656 940e 0e9b 	CALL SUBOPT_0x23
                 ;belokKiri(100, 20);
000658 940e 0ec3 	CALL SUBOPT_0x27
00065a 940e 0ecf 	CALL SUBOPT_0x2A
                 ;delay(15); scanKotak(1, 100, 5);
00065c 940e 0e9f 	CALL SUBOPT_0x24
00065e e6e4      	LDI  R30,LOW(100)
00065f e0f0      	LDI  R31,HIGH(100)
000660 c00e      	RJMP _0x20C0008
                 ;taruh(20);
                 ; .FEND
                 ;void fromAtoRed() {
                 _fromAtoRed:
                 ; .FSTART _fromAtoRed
                 ;scanX(1, 120);
                 _0x20C0009:
000661 e0e1      	LDI  R30,LOW(1)
000662 e0f0      	LDI  R31,HIGH(1)
000663 93fa      	ST   -Y,R31
000664 93ea      	ST   -Y,R30
000665 940e 0e92 	CALL SUBOPT_0x21
                 ;scanX(1, 100);
000667 940e 0e96 	CALL SUBOPT_0x22
000669 940e 0e9b 	CALL SUBOPT_0x23
                 ;delay(15); scanKotak(1, 90, 5);
00066b 940e 0e9f 	CALL SUBOPT_0x24
00066d e5ea      	LDI  R30,LOW(90)
00066e e0f0      	LDI  R31,HIGH(90)
                 _0x20C0008:
00066f 93fa      	ST   -Y,R31
000670 93ea      	ST   -Y,R30
000671 940e 0ef9 	CALL SUBOPT_0x31
                 ;taruh(20);
000673 de54      	RCALL _taruh
000674 9508      	RET
                 ; .FEND
                 ;void vertikalLineD(void);
                 ;void fromGreenAtoD() {
                 _fromGreenAtoD:
                 ; .FSTART _fromGreenAtoD
                 ;if(positionD == 0) {
000675 940e 0f00 	CALL SUBOPT_0x32
000677 f429      	BRNE _0xF7
                 ;mundur(100, 100); delay(38);
000678 940e 0f06 	CALL SUBOPT_0x33
                 ;belokKiri(100, 20);
00067a 940e 0ecf 	CALL SUBOPT_0x2A
                 ;} else if(positionD == 1) {
00067c c03c      	RJMP _0xF8
                 _0xF7:
00067d 940e 0f10 	CALL SUBOPT_0x34
00067f 9711      	SBIW R26,1
000680 f451      	BRNE _0xF9
                 ;mundur(100, 100); delay(38);
000681 940e 0f06 	CALL SUBOPT_0x33
                 ;belokKanan(100, 5); belokKanan(100, 20);
000683 940e 0ed8 	CALL SUBOPT_0x2C
000685 940e 0ecb 	CALL SUBOPT_0x29
                 ;scanX(1, 100);
000687 940e 0e96 	CALL SUBOPT_0x22
000689 e6a4      	LDI  R26,LOW(100)
00068a c024      	RJMP _0x17E
                 ;scanX(1, 100);
                 ;belokKanan(100, 20);
                 ;} else if(positionD == 2) {
                 _0xF9:
00068b 940e 0f10 	CALL SUBOPT_0x34
00068d 9712      	SBIW R26,2
00068e f469      	BRNE _0xFB
                 ;mundur(100, 100); delay(38);
00068f 940e 0f06 	CALL SUBOPT_0x33
                 ;belokKanan(100, 5); belokKanan(100, 20);
000691 940e 0ed8 	CALL SUBOPT_0x2C
000693 940e 0ecb 	CALL SUBOPT_0x29
                 ;scanX(1, 100);
000695 940e 0e96 	CALL SUBOPT_0x22
000697 940e 0e9b 	CALL SUBOPT_0x23
                 ;scanX(2, 120);
000699 e0e2      	LDI  R30,LOW(2)
00069a e0f0      	LDI  R31,HIGH(2)
00069b c010      	RJMP _0x17F
                 ;scanX(1, 100);
                 ;belokKanan(100, 20);
                 ;} else if(positionD == 3) {
                 _0xFB:
00069c 940e 0f10 	CALL SUBOPT_0x34
00069e 9713      	SBIW R26,3
00069f f4c9      	BRNE _0xFD
                 ;mundur(100, 100); delay(38);
0006a0 940e 0f06 	CALL SUBOPT_0x33
                 ;belokKanan(100, 5); belokKanan(100, 20);
0006a2 940e 0ed8 	CALL SUBOPT_0x2C
0006a4 940e 0ecb 	CALL SUBOPT_0x29
                 ;scanX(1, 100);
0006a6 940e 0e96 	CALL SUBOPT_0x22
0006a8 940e 0e9b 	CALL SUBOPT_0x23
                 ;scanX(4, 120);
0006aa e0e4      	LDI  R30,LOW(4)
0006ab e0f0      	LDI  R31,HIGH(4)
                 _0x17F:
0006ac 93fa      	ST   -Y,R31
0006ad 93ea      	ST   -Y,R30
0006ae e7a8      	LDI  R26,LOW(120)
                 _0x17E:
0006af e0b0      	LDI  R27,0
0006b0 dd55      	RCALL _scanX
                 ;scanX(1, 100);
0006b1 940e 0e96 	CALL SUBOPT_0x22
0006b3 940e 0e9b 	CALL SUBOPT_0x23
                 ;belokKanan(100, 20);
0006b5 940e 0ec3 	CALL SUBOPT_0x27
0006b7 940e 0ecb 	CALL SUBOPT_0x29
                 ;vertikalLineD();
                 _0xFD:
                 _0xF8:
0006b9 c0ac      	RJMP _0x20C0007
                 ; .FEND
                 ;void fromYellowAtoD() {
                 _fromYellowAtoD:
                 ; .FSTART _fromYellowAtoD
                 ;if(positionD == 0) {
0006ba 940e 0f00 	CALL SUBOPT_0x32
0006bc f4d1      	BRNE _0xFE
                 ;mundur(100, 100); delay(38);
0006bd e6e4      	LDI  R30,LOW(100)
0006be 93ea      	ST   -Y,R30
0006bf e6a4      	LDI  R26,LOW(100)
0006c0 dbdd      	RCALL _mundur
0006c1 e2a6      	LDI  R26,LOW(38)
0006c2 e0b0      	LDI  R27,0
0006c3 dacd      	RCALL _delay
                 ;belokKiri(80, 20);
0006c4 940e 0f15 	CALL SUBOPT_0x35
0006c6 940e 0ecf 	CALL SUBOPT_0x2A
                 ;scanX(1, 100);
0006c8 940e 0e96 	CALL SUBOPT_0x22
0006ca 940e 0e9b 	CALL SUBOPT_0x23
                 ;scanX(3, 120);
0006cc 940e 0ed3 	CALL SUBOPT_0x2B
                 ;scanX(1, 100);
0006ce 940e 0e96 	CALL SUBOPT_0x22
0006d0 940e 0e9b 	CALL SUBOPT_0x23
                 ;belokKiri(100, 20);
0006d2 940e 0ec3 	CALL SUBOPT_0x27
0006d4 940e 0ecf 	CALL SUBOPT_0x2A
                 ;} else if(positionD == 1) {
0006d6 c03a      	RJMP _0xFF
                 _0xFE:
0006d7 940e 0f10 	CALL SUBOPT_0x34
0006d9 9711      	SBIW R26,1
0006da f4a9      	BRNE _0x100
                 ;mundur(100, 100); delay(38);
0006db 940e 0f06 	CALL SUBOPT_0x33
                 ;belokKiri(100, 20);
0006dd 940e 0ecf 	CALL SUBOPT_0x2A
                 ;scanX(1, 100);
0006df 940e 0e96 	CALL SUBOPT_0x22
0006e1 940e 0e9b 	CALL SUBOPT_0x23
                 ;scanX(1, 120);
0006e3 940e 0e96 	CALL SUBOPT_0x22
0006e5 940e 0e92 	CALL SUBOPT_0x21
                 ;scanX(1, 100);
0006e7 940e 0e96 	CALL SUBOPT_0x22
0006e9 940e 0e9b 	CALL SUBOPT_0x23
                 ;belokKiri(100, 20);
0006eb 940e 0ec3 	CALL SUBOPT_0x27
0006ed 940e 0ecf 	CALL SUBOPT_0x2A
                 ;} else if(positionD == 2) {
0006ef c021      	RJMP _0x101
                 _0x100:
0006f0 940e 0f10 	CALL SUBOPT_0x34
0006f2 9712      	SBIW R26,2
0006f3 f469      	BRNE _0x102
                 ;mundur(100, 100); delay(38);
0006f4 940e 0f06 	CALL SUBOPT_0x33
                 ;belokKiri(100, 20);
0006f6 940e 0ecf 	CALL SUBOPT_0x2A
                 ;scanX(1, 100);
0006f8 940e 0e96 	CALL SUBOPT_0x22
0006fa 940e 0e9b 	CALL SUBOPT_0x23
                 ;belokKiri(100, 20);
0006fc 940e 0ec3 	CALL SUBOPT_0x27
0006fe 940e 0ecf 	CALL SUBOPT_0x2A
                 ;} else if(positionD == 3) {
000700 c010      	RJMP _0x103
                 _0x102:
000701 940e 0f10 	CALL SUBOPT_0x34
000703 9713      	SBIW R26,3
000704 f461      	BRNE _0x104
                 ;mundur(100, 100); delay(38);
000705 940e 0f06 	CALL SUBOPT_0x33
                 ;belokKanan(100, 20);
000707 940e 0ecb 	CALL SUBOPT_0x29
                 ;scanX(1, 100);
000709 940e 0e96 	CALL SUBOPT_0x22
00070b 940e 0e9b 	CALL SUBOPT_0x23
                 ;belokKanan(100, 20);
00070d 940e 0ec3 	CALL SUBOPT_0x27
00070f 940e 0ecb 	CALL SUBOPT_0x29
                 ;vertikalLineD();
                 _0x104:
                 _0x103:
                 _0x101:
                 _0xFF:
000711 c054      	RJMP _0x20C0007
                 ; .FEND
                 ;void fromRedAtoD() {
                 _fromRedAtoD:
                 ; .FSTART _fromRedAtoD
                 ;if(positionD == 0) {
000712 940e 0f00 	CALL SUBOPT_0x32
000714 f4c9      	BRNE _0x105
                 ;mundur(100, 100); delay(38);
000715 940e 0f06 	CALL SUBOPT_0x33
                 ;belokKanan(100, 5); belokKanan(100, 20);
000717 940e 0ed8 	CALL SUBOPT_0x2C
000719 940e 0ecb 	CALL SUBOPT_0x29
                 ;scanX(1, 100);
00071b 940e 0e96 	CALL SUBOPT_0x22
00071d 940e 0e9b 	CALL SUBOPT_0x23
                 ;scanX(4, 120);
00071f e0e4      	LDI  R30,LOW(4)
000720 e0f0      	LDI  R31,HIGH(4)
000721 93fa      	ST   -Y,R31
000722 93ea      	ST   -Y,R30
000723 940e 0e92 	CALL SUBOPT_0x21
                 ;scanX(1, 100);
000725 940e 0e96 	CALL SUBOPT_0x22
000727 940e 0e9b 	CALL SUBOPT_0x23
                 ;belokKiri(100, 20);
000729 940e 0ec3 	CALL SUBOPT_0x27
00072b 940e 0ecf 	CALL SUBOPT_0x2A
                 ;} else if(positionD == 1) {
00072d c038      	RJMP _0x106
                 _0x105:
00072e 940e 0f10 	CALL SUBOPT_0x34
000730 9711      	SBIW R26,1
000731 f4b9      	BRNE _0x107
                 ;mundur(100, 100); delay(38);
000732 940e 0f06 	CALL SUBOPT_0x33
                 ;belokKanan(100, 5); belokKanan(100, 20);
000734 940e 0ed8 	CALL SUBOPT_0x2C
000736 940e 0ecb 	CALL SUBOPT_0x29
                 ;scanX(1, 100);
000738 940e 0e96 	CALL SUBOPT_0x22
00073a 940e 0e9b 	CALL SUBOPT_0x23
                 ;scanX(2, 120);
00073c 940e 0e8d 	CALL SUBOPT_0x20
00073e 940e 0e92 	CALL SUBOPT_0x21
                 ;scanX(1, 100);
000740 940e 0e96 	CALL SUBOPT_0x22
000742 940e 0e9b 	CALL SUBOPT_0x23
                 ;belokKiri(100, 20);
000744 940e 0ec3 	CALL SUBOPT_0x27
000746 940e 0ecf 	CALL SUBOPT_0x2A
                 ;} else if(positionD == 2) {
000748 c01d      	RJMP _0x108
                 _0x107:
000749 940e 0f10 	CALL SUBOPT_0x34
00074b 9712      	SBIW R26,2
00074c f489      	BRNE _0x109
                 ;mundur(100, 100); delay(38);
00074d 940e 0f06 	CALL SUBOPT_0x33
                 ;belokKiri(100, 20);
00074f 940e 0ecf 	CALL SUBOPT_0x2A
                 ;scanX(1, 100);
000751 940e 0e96 	CALL SUBOPT_0x22
000753 940e 0e9b 	CALL SUBOPT_0x23
                 ;scanX(1, 100);
000755 940e 0e96 	CALL SUBOPT_0x22
000757 940e 0e9b 	CALL SUBOPT_0x23
                 ;belokKiri(100, 20);
000759 940e 0ec3 	CALL SUBOPT_0x27
00075b 940e 0ecf 	CALL SUBOPT_0x2A
                 ;} else if(positionD == 3) {
00075d c008      	RJMP _0x10A
                 _0x109:
00075e 940e 0f10 	CALL SUBOPT_0x34
000760 9713      	SBIW R26,3
000761 f421      	BRNE _0x10B
                 ;mundur(100, 100); delay(38);
000762 940e 0f06 	CALL SUBOPT_0x33
                 ;belokKanan(100, 20);
000764 940e 0ecb 	CALL SUBOPT_0x29
                 ;vertikalLineD();
                 _0x10B:
                 _0x10A:
                 _0x108:
                 _0x106:
                 _0x20C0007:
000766 d001      	RCALL _vertikalLineD
000767 9508      	RET
                 ; .FEND
                 ;void fromDto4(void);
                 ;void vertikalLineD() {
                 _vertikalLineD:
                 ; .FSTART _vertikalLineD
                 ;scanX(3, 120);
000768 940e 0ed3 	CALL SUBOPT_0x2B
                 ;scanX(1, 100);
00076a 940e 0e96 	CALL SUBOPT_0x22
00076c 940e 0e9b 	CALL SUBOPT_0x23
                 ;bawah_lepas();
00076e 940e 0ec8 	CALL SUBOPT_0x28
                 ;scanX(1, 100);
000770 940e 0e9b 	CALL SUBOPT_0x23
                 ;delay(15); scanKotak(1, 90, 5);
000772 940e 0e9f 	CALL SUBOPT_0x24
000774 940e 0edd 	CALL SUBOPT_0x2D
000776 940e 0ef9 	CALL SUBOPT_0x31
                 ;ambil(20);
000778 dd44      	RCALL _ambil
                 ;fromDto4();
000779 d001      	RCALL _fromDto4
00077a 9508      	RET
                 ; .FEND
                 ;void returnHome(void);
                 ;void fromDto4() {
                 _fromDto4:
                 ; .FSTART _fromDto4
                 ;mundur(100, 100); delay(38);
00077b 940e 0f06 	CALL SUBOPT_0x33
                 ;belokKanan(100, 10); belokKanan(100, 20);
00077d e0aa      	LDI  R26,LOW(10)
00077e e0b0      	LDI  R27,0
00077f dd26      	RCALL _belokKanan
000780 940e 0ec3 	CALL SUBOPT_0x27
000782 940e 0ecb 	CALL SUBOPT_0x29
                 ;scanX(1, 90);
000784 940e 0e96 	CALL SUBOPT_0x22
000786 940e 0eec 	CALL SUBOPT_0x2F
                 ;scanX(1, 120);
000788 940e 0e92 	CALL SUBOPT_0x21
                 ;belokKiri(100, 20);
00078a 940e 0ec3 	CALL SUBOPT_0x27
00078c 940e 0ecf 	CALL SUBOPT_0x2A
                 ;if(positionD == 0) {
00078e 940e 0f00 	CALL SUBOPT_0x32
000790 f421      	BRNE _0x10C
                 ;scanX(1, 100);
000791 940e 0e96 	CALL SUBOPT_0x22
000793 e6a4      	LDI  R26,LOW(100)
000794 c027      	RJMP _0x180
                 ;} else if(positionD == 1) {
                 _0x10C:
000795 940e 0f10 	CALL SUBOPT_0x34
000797 9711      	SBIW R26,1
000798 f459      	BRNE _0x10E
                 ;scanX(1, 100);
000799 940e 0e96 	CALL SUBOPT_0x22
00079b 940e 0e9b 	CALL SUBOPT_0x23
                 ;scanX(1, 120);
00079d 940e 0e96 	CALL SUBOPT_0x22
00079f 940e 0e92 	CALL SUBOPT_0x21
                 ;scanX(1, 120);
0007a1 e0e1      	LDI  R30,LOW(1)
0007a2 e0f0      	LDI  R31,HIGH(1)
0007a3 c015      	RJMP _0x181
                 ;} else if(positionD == 2) {
                 _0x10E:
0007a4 940e 0f10 	CALL SUBOPT_0x34
0007a6 9712      	SBIW R26,2
0007a7 f439      	BRNE _0x110
                 ;scanX(1, 100);
0007a8 940e 0e96 	CALL SUBOPT_0x22
0007aa 940e 0e9b 	CALL SUBOPT_0x23
                 ;scanX(4, 120);
0007ac e0e4      	LDI  R30,LOW(4)
0007ad e0f0      	LDI  R31,HIGH(4)
0007ae c00a      	RJMP _0x181
                 ;} else if(positionD == 3) {
                 _0x110:
0007af 940e 0f10 	CALL SUBOPT_0x34
0007b1 9713      	SBIW R26,3
0007b2 f459      	BRNE _0x112
                 ;scanX(1, 100);
0007b3 940e 0e96 	CALL SUBOPT_0x22
0007b5 940e 0e9b 	CALL SUBOPT_0x23
                 ;scanX(6, 120);
0007b7 e0e6      	LDI  R30,LOW(6)
0007b8 e0f0      	LDI  R31,HIGH(6)
                 _0x181:
0007b9 93fa      	ST   -Y,R31
0007ba 93ea      	ST   -Y,R30
0007bb e7a8      	LDI  R26,LOW(120)
                 _0x180:
0007bc e0b0      	LDI  R27,0
0007bd dc48      	RCALL _scanX
                 ;delay(15); scanKotak(1, 90, 5);
                 _0x112:
0007be 940e 0e9f 	CALL SUBOPT_0x24
0007c0 940e 0edd 	CALL SUBOPT_0x2D
0007c2 940e 0ef9 	CALL SUBOPT_0x31
                 ;taruh(20);
0007c4 dd03      	RCALL _taruh
                 ;returnHome();
0007c5 d001      	RCALL _returnHome
0007c6 9508      	RET
                 ; .FEND
                 ;void returnHome() {
                 _returnHome:
                 ; .FSTART _returnHome
                 ;mundur(100, 100); delay(20);
0007c7 e6e4      	LDI  R30,LOW(100)
0007c8 93ea      	ST   -Y,R30
0007c9 e6a4      	LDI  R26,LOW(100)
0007ca dad3      	RCALL _mundur
0007cb e1a4      	LDI  R26,LOW(20)
0007cc e0b0      	LDI  R27,0
0007cd d9c3      	RCALL _delay
                 ;belokKanan(100, 20);
0007ce 940e 0ec3 	CALL SUBOPT_0x27
0007d0 940e 0ecb 	CALL SUBOPT_0x29
                 ;scanX(1, 100);
0007d2 940e 0e96 	CALL SUBOPT_0x22
0007d4 940e 0e9b 	CALL SUBOPT_0x23
                 ;scanX(3, 120);
0007d6 940e 0ed3 	CALL SUBOPT_0x2B
                 ;scanX(1, 100);
0007d8 940e 0e96 	CALL SUBOPT_0x22
0007da 940e 0e9b 	CALL SUBOPT_0x23
                 ;belokKanan(100, 20);
0007dc 940e 0ec3 	CALL SUBOPT_0x27
0007de 940e 0ecb 	CALL SUBOPT_0x29
                 ;scanX(1, 120);
0007e0 940e 0e96 	CALL SUBOPT_0x22
0007e2 940e 0e92 	CALL SUBOPT_0x21
                 ;scanX(1, 100);
0007e4 940e 0e96 	CALL SUBOPT_0x22
0007e6 940e 0e9b 	CALL SUBOPT_0x23
                 ;delay(15); scanKotak(1, 90, 5);
0007e8 940e 0e9f 	CALL SUBOPT_0x24
0007ea 940e 0edd 	CALL SUBOPT_0x2D
0007ec e0a5      	LDI  R26,LOW(5)
0007ed e0b0      	LDI  R27,0
0007ee dc55      	RCALL _scanKotak
                 ;maju(100, 100); delay(30); rem(100);
0007ef e6e4      	LDI  R30,LOW(100)
0007f0 93ea      	ST   -Y,R30
0007f1 e6a4      	LDI  R26,LOW(100)
0007f2 daa4      	RCALL _maju
0007f3 e1ae      	LDI  R26,LOW(30)
0007f4 e0b0      	LDI  R27,0
0007f5 d99b      	RCALL _delay
0007f6 940e 0e45 	CALL SUBOPT_0x13
                 ;parkir();
0007f8 db2e      	RCALL _parkir
0007f9 9508      	RET
                 ; .FEND
                 ;void Program_Jalan()
                 _Program_Jalan:
                 ; .FSTART _Program_Jalan
                 ;maju_delay(80, 60);
0007fa 940e 0f15 	CALL SUBOPT_0x35
0007fc e3ac      	LDI  R26,LOW(60)
0007fd e0b0      	LDI  R27,0
0007fe daea      	RCALL _maju_delay
                 ;scanX(2, 120);
0007ff 940e 0e8d 	CALL SUBOPT_0x20
000801 940e 0e92 	CALL SUBOPT_0x21
                 ;bawah_lepas();
000803 940e 0ec8 	CALL SUBOPT_0x28
                 ;scanX(1, 100);
000805 940e 0e9b 	CALL SUBOPT_0x23
                 ;scanTimer(28, 80, 50);
000807 e1ec      	LDI  R30,LOW(28)
000808 e0f0      	LDI  R31,HIGH(28)
000809 93fa      	ST   -Y,R31
00080a 93ea      	ST   -Y,R30
00080b 940e 0f15 	CALL SUBOPT_0x35
00080d 940e 0ef1 	CALL SUBOPT_0x30
                 ;ambil(20);
                 ;delay(50);
00080f 940e 0f1a 	CALL SUBOPT_0x36
                 ;isWarna = checkWarna();
                 ;if(isWarna == merah) {
000811 f411      	BRNE _0x113
                 ;fromBtoRed();
000812 dd73      	RCALL _fromBtoRed
                 ;} else if(isWarna == kuning) {
000813 c00b      	RJMP _0x114
                 _0x113:
000814 940e 0f26 	CALL SUBOPT_0x37
000816 9711      	SBIW R26,1
000817 f411      	BRNE _0x115
                 ;fromBtoYellow();
000818 dd39      	RCALL _fromBtoYellow
                 ;} else if(isWarna == hijau) {
000819 c005      	RJMP _0x116
                 _0x115:
00081a 940e 0f26 	CALL SUBOPT_0x37
00081c 9712      	SBIW R26,2
00081d f401      	BRNE _0x117
                 ;fromBtoGreen();
                 ;} else {
                 _0x117:
                 ;fromBtoGreen();
                 _0x182:
00081e dd19      	RCALL _fromBtoGreen
                 _0x116:
                 _0x114:
                 ;isWarna = checkWarna();
00081f dcd6      	RCALL _checkWarna
000820 93e0 02b1 	STS  _isWarna,R30
000822 93f0 02b2 	STS  _isWarna+1,R31
                 ;if(isWarna == merah) {
000824 9730      	SBIW R30,0
000825 f411      	BRNE _0x119
                 ;fromCtoRed();
000826 ddee      	RCALL _fromCtoRed
                 ;} else if(isWarna == kuning) {
000827 c00b      	RJMP _0x11A
                 _0x119:
000828 940e 0f26 	CALL SUBOPT_0x37
00082a 9711      	SBIW R26,1
00082b f411      	BRNE _0x11B
                 ;fromCtoYellow();
00082c ddc3      	RCALL _fromCtoYellow
                 ;} else if(isWarna == hijau) {
00082d c005      	RJMP _0x11C
                 _0x11B:
00082e 940e 0f26 	CALL SUBOPT_0x37
000830 9712      	SBIW R26,2
000831 f401      	BRNE _0x11D
                 ;fromCtoGreen();
                 ;} else {
                 _0x11D:
                 ;fromCtoGreen();
                 _0x183:
000832 dd7c      	RCALL _fromCtoGreen
                 _0x11C:
                 _0x11A:
                 ;delay(50);
000833 940e 0f1a 	CALL SUBOPT_0x36
                 ;isWarna = checkWarna();
                 ;if(isWarna == merah) {
000835 f419      	BRNE _0x11F
                 ;fromAtoRed();
000836 de2a      	RCALL _fromAtoRed
                 ;fromRedAtoD();
000837 deda      	RCALL _fromRedAtoD
                 ;} else if(isWarna == kuning) {
000838 c00d      	RJMP _0x120
                 _0x11F:
000839 940e 0f26 	CALL SUBOPT_0x37
00083b 9711      	SBIW R26,1
00083c f419      	BRNE _0x121
                 ;fromAtoYellow();
00083d de16      	RCALL _fromAtoYellow
                 ;fromYellowAtoD();
00083e de7b      	RCALL _fromYellowAtoD
                 ;} else if(isWarna == hijau) {
00083f c006      	RJMP _0x122
                 _0x121:
000840 940e 0f26 	CALL SUBOPT_0x37
000842 9712      	SBIW R26,2
000843 f401      	BRNE _0x123
                 ;fromAtoGreen();
                 ;fromGreenAtoD();
                 ;} else {
                 _0x123:
                 ;fromAtoGreen();
                 _0x184:
000844 de00      	RCALL _fromAtoGreen
                 ;fromGreenAtoD();
000845 de2f      	RCALL _fromGreenAtoD
                 _0x122:
                 _0x120:
000846 9508      	RET
                 ; .FEND
                 ;void balikKanan() {
                 ;mundur(100, 100); delay(38);
                 ;belokKanan(80, 0); belokKanan(80, 10);
                 ;void balikKiri() {
                 ;belki(100, 5); belki(100, 20);
                 ;void mundurKanan() {
                 ;mundur(100, 100); delay(38);
                 ;belokKanan(80, 10);
                 ;void runBot(void);
                 ;void calibration(void);
                 ;void Program_Jalan(void);
                 ;void test_motor(void);
                 ;void test_tombol(void);
                 ;void map_select(int map_num);
                 ;void sens_warna(void);
                 ;void test_capit(void);
                 ;void changeMenu(int menuSelect, bool isSelect, int childMenuSelect) {
                 ; 0000 0067 void changeMenu(int menuSelect, _Bool isSelect, int childMenuSelect) {
                 _changeMenu:
                 ; .FSTART _changeMenu
                 ;lampu = 0;
000847 93ba      	ST   -Y,R27
000848 93aa      	ST   -Y,R26
                 ;	menuSelect -> Y+3
                 ;	isSelect -> Y+2
                 ;	childMenuSelect -> Y+0
000849 98c3      	CBI  0x18,3
                 ;count_btn = menuSelect;
00084a 81eb      	LDD  R30,Y+3
00084b 81fc      	LDD  R31,Y+3+1
00084c 93e0 0282 	STS  _count_btn,R30
00084e 93f0 0283 	STS  _count_btn+1,R31
                 ;count_child_btn = childMenuSelect;
000850 81e8      	LD   R30,Y
000851 81f9      	LDD  R31,Y+1
000852 93e0 0284 	STS  _count_child_btn,R30
000854 93f0 0285 	STS  _count_child_btn+1,R31
                 ;if(!isSelect && !isChildSelect) {
000856 81ea      	LDD  R30,Y+2
000857 30e0      	CPI  R30,0
000858 f421      	BRNE _0x128
000859 91e0 0286 	LDS  R30,_isChildSelect
00085b 30e0      	CPI  R30,0
00085c f009      	BREQ _0x129
                 _0x128:
00085d c006      	RJMP _0x127
                 _0x129:
                 ;lcd_clear();
00085e 940e 0f2b 	CALL SUBOPT_0x38
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Menu");
                +
000860 eea4     +LDI R26 , LOW ( 2 * _0x0 + ( 100 ) )
000861 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 100 ) )
                 	__POINTW2FN _0x0,100
000862 940e 0d61 	CALL _lcd_putsf
                 ;switch (menuSelect) {
                 _0x127:
000864 81eb      	LDD  R30,Y+3
000865 81fc      	LDD  R31,Y+3+1
                 ;case 0: // Calibration
000866 9730      	SBIW R30,0
000867 f469      	BRNE _0x12D
                 ;if(isSelect) { calibration(); break; }
000868 81ea      	LDD  R30,Y+2
000869 30e0      	CPI  R30,0
00086a f011      	BREQ _0x12E
00086b d0ba      	RCALL _calibration
00086c c08e      	RJMP _0x12C
                 ;lcd_gotoxy(0, 1);
                 _0x12E:
00086d e0e0      	LDI  R30,LOW(0)
00086e 940e 0e89 	CALL SUBOPT_0x1F
                 ;lcd_putsf("Calibration");
                +
000870 eea9     +LDI R26 , LOW ( 2 * _0x0 + ( 105 ) )
000871 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 105 ) )
                 	__POINTW2FN _0x0,105
000872 940e 0d61 	CALL _lcd_putsf
                 ;break;
000874 c086      	RJMP _0x12C
                 ;case 1: // Run bot
                 _0x12D:
000875 30e1      	CPI  R30,LOW(0x1)
000876 e0a0      	LDI  R26,HIGH(0x1)
000877 07fa      	CPC  R31,R26
000878 f489      	BRNE _0x12F
                 ;if(isSelect || isChildSelect) { runBot(); break; }
000879 81ea      	LDD  R30,Y+2
00087a 30e0      	CPI  R30,0
00087b f421      	BRNE _0x131
00087c 91e0 0286 	LDS  R30,_isChildSelect
00087e 30e0      	CPI  R30,0
00087f f011      	BREQ _0x130
                 _0x131:
000880 d07b      	RCALL _runBot
000881 c079      	RJMP _0x12C
                 ;lcd_gotoxy(0, 1);
                 _0x130:
000882 e0e0      	LDI  R30,LOW(0)
000883 940e 0e89 	CALL SUBOPT_0x1F
                 ;lcd_putsf("Run Bot");
                +
000885 efa5     +LDI R26 , LOW ( 2 * _0x0 + ( 117 ) )
000886 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 117 ) )
                 	__POINTW2FN _0x0,117
000887 940e 0d61 	CALL _lcd_putsf
                 ;break;
000889 c071      	RJMP _0x12C
                 ;case 2: // Sensor Warna
                 _0x12F:
00088a 30e2      	CPI  R30,LOW(0x2)
00088b e0a0      	LDI  R26,HIGH(0x2)
00088c 07fa      	CPC  R31,R26
00088d f469      	BRNE _0x133
                 ;if(isSelect) { sens_warna(); break; }
00088e 81ea      	LDD  R30,Y+2
00088f 30e0      	CPI  R30,0
000890 f011      	BREQ _0x134
000891 d11b      	RCALL _sens_warna
000892 c068      	RJMP _0x12C
                 ;lcd_gotoxy(0, 1);
                 _0x134:
000893 e0e0      	LDI  R30,LOW(0)
000894 940e 0e89 	CALL SUBOPT_0x1F
                 ;lcd_putsf("Sens Warna");
                +
000896 efad     +LDI R26 , LOW ( 2 * _0x0 + ( 125 ) )
000897 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 125 ) )
                 	__POINTW2FN _0x0,125
000898 940e 0d61 	CALL _lcd_putsf
                 ;break;
00089a c060      	RJMP _0x12C
                 ;case 3: // Map Select
                 _0x133:
00089b 30e3      	CPI  R30,LOW(0x3)
00089c e0a0      	LDI  R26,HIGH(0x3)
00089d 07fa      	CPC  R31,R26
00089e f499      	BRNE _0x135
                 ;if(isSelect || isChildSelect) { map_select(0); break; }
00089f 81ea      	LDD  R30,Y+2
0008a0 30e0      	CPI  R30,0
0008a1 f421      	BRNE _0x137
0008a2 91e0 0286 	LDS  R30,_isChildSelect
0008a4 30e0      	CPI  R30,0
0008a5 f021      	BREQ _0x136
                 _0x137:
0008a6 e0a0      	LDI  R26,LOW(0)
0008a7 e0b0      	LDI  R27,0
0008a8 d086      	RCALL _map_select
0008a9 c051      	RJMP _0x12C
                 ;lcd_gotoxy(0, 1);
                 _0x136:
0008aa e0e0      	LDI  R30,LOW(0)
0008ab 940e 0e89 	CALL SUBOPT_0x1F
                 ;lcd_putsf("Map Biru");
                +
0008ad e0a8     +LDI R26 , LOW ( 2 * _0x0 + ( 136 ) )
0008ae e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 136 ) )
                 	__POINTW2FN _0x0,136
0008af 940e 0d61 	CALL _lcd_putsf
                 ;break;
0008b1 c049      	RJMP _0x12C
                 ;case 4: // Map Select
                 _0x135:
0008b2 30e4      	CPI  R30,LOW(0x4)
0008b3 e0a0      	LDI  R26,HIGH(0x4)
0008b4 07fa      	CPC  R31,R26
0008b5 f499      	BRNE _0x139
                 ;if(isSelect || isChildSelect) { map_select(1); break; }
0008b6 81ea      	LDD  R30,Y+2
0008b7 30e0      	CPI  R30,0
0008b8 f421      	BRNE _0x13B
0008b9 91e0 0286 	LDS  R30,_isChildSelect
0008bb 30e0      	CPI  R30,0
0008bc f021      	BREQ _0x13A
                 _0x13B:
0008bd e0a1      	LDI  R26,LOW(1)
0008be e0b0      	LDI  R27,0
0008bf d06f      	RCALL _map_select
0008c0 c03a      	RJMP _0x12C
                 ;lcd_gotoxy(0, 1);
                 _0x13A:
0008c1 e0e0      	LDI  R30,LOW(0)
0008c2 940e 0e89 	CALL SUBOPT_0x1F
                 ;lcd_putsf("Map Merah");
                +
0008c4 e1a1     +LDI R26 , LOW ( 2 * _0x0 + ( 145 ) )
0008c5 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 145 ) )
                 	__POINTW2FN _0x0,145
0008c6 940e 0d61 	CALL _lcd_putsf
                 ;break;
0008c8 c032      	RJMP _0x12C
                 ;case 5: // Test Motor
                 _0x139:
0008c9 30e5      	CPI  R30,LOW(0x5)
0008ca e0a0      	LDI  R26,HIGH(0x5)
0008cb 07fa      	CPC  R31,R26
0008cc f469      	BRNE _0x13D
                 ;if(isSelect) { test_motor(); break; }
0008cd 81ea      	LDD  R30,Y+2
0008ce 30e0      	CPI  R30,0
0008cf f011      	BREQ _0x13E
0008d0 d077      	RCALL _test_motor
0008d1 c029      	RJMP _0x12C
                 ;lcd_gotoxy(0, 1);
                 _0x13E:
0008d2 e0e0      	LDI  R30,LOW(0)
0008d3 940e 0e89 	CALL SUBOPT_0x1F
                 ;lcd_putsf("Motor");
                +
0008d5 e1ab     +LDI R26 , LOW ( 2 * _0x0 + ( 155 ) )
0008d6 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 155 ) )
                 	__POINTW2FN _0x0,155
0008d7 940e 0d61 	CALL _lcd_putsf
                 ;break;
0008d9 c021      	RJMP _0x12C
                 ;case 6: // Test tombol
                 _0x13D:
0008da 30e6      	CPI  R30,LOW(0x6)
0008db e0a0      	LDI  R26,HIGH(0x6)
0008dc 07fa      	CPC  R31,R26
0008dd f469      	BRNE _0x13F
                 ;if(isSelect) { test_tombol(); break; }
0008de 81ea      	LDD  R30,Y+2
0008df 30e0      	CPI  R30,0
0008e0 f011      	BREQ _0x140
0008e1 d095      	RCALL _test_tombol
0008e2 c018      	RJMP _0x12C
                 ;lcd_gotoxy(0, 1);
                 _0x140:
0008e3 e0e0      	LDI  R30,LOW(0)
0008e4 940e 0e89 	CALL SUBOPT_0x1F
                 ;lcd_putsf("Button");
                +
0008e6 e2a1     +LDI R26 , LOW ( 2 * _0x0 + ( 161 ) )
0008e7 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 161 ) )
                 	__POINTW2FN _0x0,161
0008e8 940e 0d61 	CALL _lcd_putsf
                 ;break;
0008ea c010      	RJMP _0x12C
                 ;case 7: // Test Capit
                 _0x13F:
0008eb 30e7      	CPI  R30,LOW(0x7)
0008ec e0a0      	LDI  R26,HIGH(0x7)
0008ed 07fa      	CPC  R31,R26
0008ee f461      	BRNE _0x143
                 ;if(isSelect) { test_capit(); break; }
0008ef 81ea      	LDD  R30,Y+2
0008f0 30e0      	CPI  R30,0
0008f1 f011      	BREQ _0x142
0008f2 d0e6      	RCALL _test_capit
0008f3 c007      	RJMP _0x12C
                 ;lcd_gotoxy(0, 1);
                 _0x142:
0008f4 e0e0      	LDI  R30,LOW(0)
0008f5 940e 0e89 	CALL SUBOPT_0x1F
                 ;lcd_putsf("Capit");
                +
0008f7 e2a8     +LDI R26 , LOW ( 2 * _0x0 + ( 168 ) )
0008f8 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 168 ) )
                 	__POINTW2FN _0x0,168
0008f9 940e 0d61 	CALL _lcd_putsf
                 ;break;
                 ;default:
                 _0x143:
                 ;break;
                 _0x12C:
0008fb c229      	RJMP _0x20C0005
                 ; .FEND
                 ;void runBot() {
                 _runBot:
                 ; .FSTART _runBot
                 ;if(!isChildSelect) {
0008fc 91e0 0286 	LDS  R30,_isChildSelect
0008fe 30e0      	CPI  R30,0
0008ff f471      	BRNE _0x144
                 ;lcd_clear();
000900 940e 0f2b 	CALL SUBOPT_0x38
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Run Bot");
                +
000902 efa5     +LDI R26 , LOW ( 2 * _0x0 + ( 117 ) )
000903 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 117 ) )
                 	__POINTW2FN _0x0,117
000904 940e 0f2f 	CALL SUBOPT_0x39
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("Click 2 to start");
                +
000906 e2ae     +LDI R26 , LOW ( 2 * _0x0 + ( 174 ) )
000907 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 174 ) )
                 	__POINTW2FN _0x0,174
000908 940e 0d61 	CALL _lcd_putsf
                 ;isChildSelect = true;
00090a e0e1      	LDI  R30,LOW(1)
00090b 93e0 0286 	STS  _isChildSelect,R30
                 ;} else if(isChildSelect) {
00090d c017      	RJMP _0x145
                 _0x144:
00090e 91e0 0286 	LDS  R30,_isChildSelect
000910 30e0      	CPI  R30,0
000911 f099      	BREQ _0x146
                 ;lcd_clear();
000912 940e 0d16 	CALL _lcd_clear
                 ;lcd_gotoxy(0, 1);
000914 e0e0      	LDI  R30,LOW(0)
000915 940e 0e89 	CALL SUBOPT_0x1F
                 ;lcd_putsf("Running...");
                +
000917 e3af     +LDI R26 , LOW ( 2 * _0x0 + ( 191 ) )
000918 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 191 ) )
                 	__POINTW2FN _0x0,191
000919 940e 0d61 	CALL _lcd_putsf
                 ;Program_Jalan();
00091b dede      	RCALL _Program_Jalan
                 ;isChildSelect = false;
00091c e0e0      	LDI  R30,LOW(0)
00091d 93e0 0286 	STS  _isChildSelect,R30
                 ;count_child_btn = 0;
00091f 93e0 0284 	STS  _count_child_btn,R30
000921 93e0 0285 	STS  _count_child_btn+1,R30
                 ;changeMenu(0, false, 0);
000923 940e 0f33 	CALL SUBOPT_0x3A
                 _0x146:
                 _0x145:
000925 9508      	RET
                 ; .FEND
                 ;void calibration() {
                 _calibration:
                 ; .FSTART _calibration
                 ;scan_garis();
000926 d8e9      	RCALL _scan_garis
                 ;delay(300);
000927 e2ac      	LDI  R26,LOW(300)
000928 e0b1      	LDI  R27,HIGH(300)
000929 d867      	RCALL _delay
                 ;scan_back();
00092a d905      	RCALL _scan_back
                 ;delay(100);
00092b 940e 0f3c 	CALL SUBOPT_0x3B
                 ;hit_tengah();
00092d d922      	RCALL _hit_tengah
                 ;isChildSelect = false;
00092e c042      	RJMP _0x20C0006
                 ;changeMenu(0, false, 0);
                 ; .FEND
                 ;void map_select(int map_num) {
                 _map_select:
                 ; .FSTART _map_select
                 ;if(map_num != 0 && map_num != 1) map_num = 0;
00092f 93ba      	ST   -Y,R27
000930 93aa      	ST   -Y,R26
                 ;	map_num -> Y+0
000931 81a8      	LD   R26,Y
000932 81b9      	LDD  R27,Y+1
000933 9710      	SBIW R26,0
000934 f011      	BREQ _0x148
000935 9711      	SBIW R26,1
000936 f409      	BRNE _0x149
                 _0x148:
000937 c003      	RJMP _0x147
                 _0x149:
000938 e0e0      	LDI  R30,LOW(0)
000939 83e8      	STD  Y+0,R30
00093a 83e9      	STD  Y+0+1,R30
                 ;mapMirror = map_num;
                 _0x147:
00093b 81e8      	LD   R30,Y
00093c 81f9      	LDD  R31,Y+1
00093d e2aa      	LDI  R26,LOW(_mapMirror)
00093e e0b0      	LDI  R27,HIGH(_mapMirror)
00093f 940e 1009 	CALL __EEPROMWRW
                 ;isChildSelect = false;
000941 e0e0      	LDI  R30,LOW(0)
000942 93e0 0286 	STS  _isChildSelect,R30
                 ;changeMenu(0, false, 0);
000944 940e 0f33 	CALL SUBOPT_0x3A
000946 940c 0d14 	JMP  _0x20C0003
                 ; .FEND
                 ;void test_motor()
                 _test_motor:
                 ; .FSTART _test_motor
                 ;lcd_clear();
000948 940e 0f2b 	CALL SUBOPT_0x38
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Test Motor");
                +
00094a e4aa     +LDI R26 , LOW ( 2 * _0x0 + ( 202 ) )
00094b e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 202 ) )
                 	__POINTW2FN _0x0,202
00094c 940e 0f2f 	CALL SUBOPT_0x39
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("+100 +100");
                +
00094e e5a5     +LDI R26 , LOW ( 2 * _0x0 + ( 213 ) )
00094f e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 213 ) )
                 	__POINTW2FN _0x0,213
000950 940e 0d61 	CALL _lcd_putsf
                 ;setMotor(100, 100);
000952 940e 0ec3 	CALL SUBOPT_0x27
000954 940e 0f40 	CALL SUBOPT_0x3C
                 ;delay_ms(200);
                 ;lcd_gotoxy(0, 1);
000956 e0e0      	LDI  R30,LOW(0)
000957 940e 0e89 	CALL SUBOPT_0x1F
                 ;lcd_putsf("-100 -100");
                +
000959 e5af     +LDI R26 , LOW ( 2 * _0x0 + ( 223 ) )
00095a e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 223 ) )
                 	__POINTW2FN _0x0,223
00095b 940e 0f48 	CALL SUBOPT_0x3D
                 ;setMotor(-100, -100);
00095d 940e 0f4f 	CALL SUBOPT_0x3E
                 ;delay_ms(200);
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("+100 -100");
                +
00095f e6a9     +LDI R26 , LOW ( 2 * _0x0 + ( 233 ) )
000960 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 233 ) )
                 	__POINTW2FN _0x0,233
000961 940e 0d61 	CALL _lcd_putsf
                 ;setMotor(100, -100);
000963 940e 0ec3 	CALL SUBOPT_0x27
000965 940e 0f4f 	CALL SUBOPT_0x3E
                 ;delay_ms(200);
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("-100 +100");
                +
000967 e7a3     +LDI R26 , LOW ( 2 * _0x0 + ( 243 ) )
000968 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 243 ) )
                 	__POINTW2FN _0x0,243
000969 940e 0f48 	CALL SUBOPT_0x3D
                 ;setMotor(-100, 100);
00096b 940e 0f40 	CALL SUBOPT_0x3C
                 ;delay_ms(200);
                 ;rem(100);
00096d 940e 0e45 	CALL SUBOPT_0x13
                 ;lcd_clear();
00096f 940e 0f2b 	CALL SUBOPT_0x38
                 ;lcd_gotoxy(0, 0);
                 ;isChildSelect = false;
                 _0x20C0006:
000971 e0e0      	LDI  R30,LOW(0)
000972 93e0 0286 	STS  _isChildSelect,R30
                 ;changeMenu(0, false, 0);
000974 940e 0f33 	CALL SUBOPT_0x3A
000976 9508      	RET
                 ; .FEND
                 ;void test_tombol()
                 _test_tombol:
                 ; .FSTART _test_tombol
                 ;lcd_gotoxy(0, 1);
000977 e0e0      	LDI  R30,LOW(0)
000978 940e 0e89 	CALL SUBOPT_0x1F
                 ;lcd_putsf("Click 1 to exit");
                +
00097a e7ad     +LDI R26 , LOW ( 2 * _0x0 + ( 253 ) )
00097b e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 253 ) )
                 	__POINTW2FN _0x0,253
00097c 940e 0d61 	CALL _lcd_putsf
                 ;isTestTombol = true;
00097e e0e1      	LDI  R30,LOW(1)
00097f 93e0 0287 	STS  _isTestTombol,R30
                 ;while (1)
                 _0x14A:
                 ;if (!isTestTombol) break;
000981 91e0 0287 	LDS  R30,_isTestTombol
000983 30e0      	CPI  R30,0
000984 f139      	BREQ _0x14C
                 ;if ((t1 == 0))
000985 9998      	SBIC 0x13,0
000986 c009      	RJMP _0x14E
                 ;lcd_gotoxy(0, 0);
000987 e0e0      	LDI  R30,LOW(0)
000988 940e 0dd3 	CALL SUBOPT_0x3
                 ;lcd_putsf("tombol = 1     ");
                +
00098a e8ad     +LDI R26 , LOW ( 2 * _0x0 + ( 269 ) )
00098b e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 269 ) )
                 	__POINTW2FN _0x0,269
00098c 940e 0f59 	CALL SUBOPT_0x3F
                 ;isTestTombol = false;
                 ;delay(50);
                 ;changeMenu(0, false, 0);
00098e 940e 0f33 	CALL SUBOPT_0x3A
                 ;if (t2 == 0)
                 _0x14E:
000990 9999      	SBIC 0x13,1
000991 c007      	RJMP _0x14F
                 ;lcd_gotoxy(0, 0);
000992 e0e0      	LDI  R30,LOW(0)
000993 940e 0dd3 	CALL SUBOPT_0x3
                 ;lcd_putsf("tombol = 2     ");
                +
000995 e9ad     +LDI R26 , LOW ( 2 * _0x0 + ( 285 ) )
000996 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 285 ) )
                 	__POINTW2FN _0x0,285
000997 940e 0d61 	CALL _lcd_putsf
                 ;if (t3 == 0)
                 _0x14F:
000999 999a      	SBIC 0x13,2
00099a c007      	RJMP _0x150
                 ;lcd_gotoxy(0, 0);
00099b e0e0      	LDI  R30,LOW(0)
00099c 940e 0dd3 	CALL SUBOPT_0x3
                 ;lcd_putsf("tombol = 3     ");
                +
00099e eaad     +LDI R26 , LOW ( 2 * _0x0 + ( 301 ) )
00099f e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 301 ) )
                 	__POINTW2FN _0x0,301
0009a0 940e 0d61 	CALL _lcd_putsf
                 ;if (t4 == 0)
                 _0x150:
0009a2 999b      	SBIC 0x13,3
0009a3 c007      	RJMP _0x151
                 ;lcd_gotoxy(0, 0);
0009a4 e0e0      	LDI  R30,LOW(0)
0009a5 940e 0dd3 	CALL SUBOPT_0x3
                 ;lcd_putsf("tombol = 4     ");
                +
0009a7 ebad     +LDI R26 , LOW ( 2 * _0x0 + ( 317 ) )
0009a8 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 317 ) )
                 	__POINTW2FN _0x0,317
0009a9 940e 0d61 	CALL _lcd_putsf
                 _0x151:
0009ab cfd5      	RJMP _0x14A
                 _0x14C:
0009ac 9508      	RET
                 ; .FEND
                 ;void sens_warna()
                 _sens_warna:
                 ; .FSTART _sens_warna
                 ;lcd_clear();
0009ad 940e 0f2b 	CALL SUBOPT_0x38
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Sens Warna");
                +
0009af efad     +LDI R26 , LOW ( 2 * _0x0 + ( 125 ) )
0009b0 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 125 ) )
                 	__POINTW2FN _0x0,125
0009b1 940e 0f2f 	CALL SUBOPT_0x39
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("Warna:");
                +
0009b3 ecad     +LDI R26 , LOW ( 2 * _0x0 + ( 333 ) )
0009b4 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 333 ) )
                 	__POINTW2FN _0x0,333
0009b5 940e 0d61 	CALL _lcd_putsf
                 ;isTestTombol = true;
0009b7 e0e1      	LDI  R30,LOW(1)
0009b8 93e0 0287 	STS  _isTestTombol,R30
                 ;bawah_lepas();
0009ba db1b      	RCALL _bawah_lepas
                 ;delay(200);
0009bb eca8      	LDI  R26,LOW(200)
0009bc e0b0      	LDI  R27,0
0009bd 940e 0191 	CALL _delay
                 ;ambil(20);
0009bf e1a4      	LDI  R26,LOW(20)
0009c0 e0b0      	LDI  R27,0
0009c1 dafb      	RCALL _ambil
                 ;while (1)
                 _0x152:
                 ;bacawarna();
0009c2 db18      	RCALL _bacawarna
                 ;if (!isTestTombol) { lcd_clear(); capit_lepas; changeMenu(0, false, 0); break; }
0009c3 91e0 0287 	LDS  R30,_isTestTombol
0009c5 30e0      	CPI  R30,0
0009c6 f439      	BRNE _0x155
0009c7 940e 0d16 	CALL _lcd_clear
0009c9 eee6      	LDI  R30,LOW(230)
0009ca 2ede      	MOV  R13,R30
0009cb 940e 0f33 	CALL SUBOPT_0x3A
0009cd c00a      	RJMP _0x154
                 ;if ((t1 == 0))
                 _0x155:
0009ce 9998      	SBIC 0x13,0
0009cf c007      	RJMP _0x156
                 ;lcd_gotoxy(0, 0);
0009d0 e0e0      	LDI  R30,LOW(0)
0009d1 940e 0dd3 	CALL SUBOPT_0x3
                 ;lcd_putsf("Exiting...");
                +
0009d3 eda4     +LDI R26 , LOW ( 2 * _0x0 + ( 340 ) )
0009d4 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 340 ) )
                 	__POINTW2FN _0x0,340
0009d5 940e 0f59 	CALL SUBOPT_0x3F
                 ;isTestTombol = false;
                 ;delay(50);
                 _0x156:
0009d7 cfea      	RJMP _0x152
                 _0x154:
0009d8 9508      	RET
                 ; .FEND
                 ;void test_capit()
                 _test_capit:
                 ; .FSTART _test_capit
                 ;lcd_clear();
0009d9 940e 0f2b 	CALL SUBOPT_0x38
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Test Capit");
                +
0009db edaf     +LDI R26 , LOW ( 2 * _0x0 + ( 351 ) )
0009dc e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 351 ) )
                 	__POINTW2FN _0x0,351
0009dd 940e 0f2f 	CALL SUBOPT_0x39
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("Capit: > <");
                +
0009df eeaa     +LDI R26 , LOW ( 2 * _0x0 + ( 362 ) )
0009e0 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 362 ) )
                 	__POINTW2FN _0x0,362
0009e1 940e 0d61 	CALL _lcd_putsf
                 ;capit_ambil;
0009e3 eeed      	LDI  R30,LOW(237)
0009e4 2ede      	MOV  R13,R30
                 ;delay(50);
0009e5 e3a2      	LDI  R26,LOW(50)
0009e6 e0b0      	LDI  R27,0
0009e7 940e 0191 	CALL _delay
                 ;lcd_gotoxy(0, 1);
0009e9 e0e0      	LDI  R30,LOW(0)
0009ea 940e 0e89 	CALL SUBOPT_0x1F
                 ;lcd_putsf("Capit: < >");
                +
0009ec efa5     +LDI R26 , LOW ( 2 * _0x0 + ( 373 ) )
0009ed e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 373 ) )
                 	__POINTW2FN _0x0,373
0009ee 940e 0d61 	CALL _lcd_putsf
                 ;capit_lepas;
0009f0 eee6      	LDI  R30,LOW(230)
0009f1 2ede      	MOV  R13,R30
                 ;delay(100);
0009f2 940e 0f3c 	CALL SUBOPT_0x3B
                 ;lcd_gotoxy(0, 1);
0009f4 e0e0      	LDI  R30,LOW(0)
0009f5 940e 0e89 	CALL SUBOPT_0x1F
                 ;lcd_putsf("Capit: \\/");
                +
0009f7 e0a0     +LDI R26 , LOW ( 2 * _0x0 + ( 384 ) )
0009f8 e0b2     +LDI R27 , HIGH ( 2 * _0x0 + ( 384 ) )
                 	__POINTW2FN _0x0,384
0009f9 940e 0d61 	CALL _lcd_putsf
                 ;lengan_bawah;
0009fb efe0      	LDI  R30,LOW(240)
0009fc 2ece      	MOV  R12,R30
                 ;delay(100);
0009fd 940e 0f3c 	CALL SUBOPT_0x3B
                 ;lcd_gotoxy(0, 1);
0009ff e0e0      	LDI  R30,LOW(0)
000a00 940e 0e89 	CALL SUBOPT_0x1F
                 ;lcd_putsf("Capit: /\\");
                +
000a02 e0aa     +LDI R26 , LOW ( 2 * _0x0 + ( 394 ) )
000a03 e0b2     +LDI R27 , HIGH ( 2 * _0x0 + ( 394 ) )
                 	__POINTW2FN _0x0,394
000a04 940e 0d61 	CALL _lcd_putsf
                 ;lengan_atas;
000a06 eeea      	LDI  R30,LOW(234)
000a07 2ece      	MOV  R12,R30
                 ;delay(100);
000a08 940e 0f3c 	CALL SUBOPT_0x3B
000a0a 9508      	RET
                 ; .FEND
                 ;void tepuk_tangan() {
                 ;lcd_clear();
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("Hold 1 to exit");
                 ;lcd_gotoxy(0, 0);
                 ;while (1)
                 ;lcd_putsf("XD");
                 ;if(t1 == 0) break;
                 ;capit_lepas;
                 ;if(t1 == 0) break;
                 ;delay(50);
                 ;if(t1 == 0) break;
                 ;capit_ambil;
                 ;if(t1 == 0) break;
                 ;delay(50);
                 ;if(t1 == 0) break;
                 ;void display_map() {
                 _display_map:
                 ; .FSTART _display_map
                 ;cek_sensor();
000a0b 940e 01e2 	CALL _cek_sensor
                 ;lcd_gotoxy(7, 0);
000a0d e0e7      	LDI  R30,LOW(7)
000a0e 940e 0dd3 	CALL SUBOPT_0x3
                 ;sprintf(buff, "%d", mapMirror);
000a10 940e 0dd7 	CALL SUBOPT_0x4
                +
000a12 e8ec     +LDI R30 , LOW ( 2 * _0x0 + ( 12 ) )
000a13 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 12 ) )
                 	__POINTW1FN _0x0,12
000a14 93fa      	ST   -Y,R31
000a15 93ea      	ST   -Y,R30
000a16 e2aa      	LDI  R26,LOW(_mapMirror)
000a17 e0b0      	LDI  R27,HIGH(_mapMirror)
000a18 940e 0ff9 	CALL __EEPROMRDW
000a1a 940e 0e21 	CALL SUBOPT_0xD
000a1c e084      	LDI  R24,4
000a1d 940e 0c63 	CALL _sprintf
000a1f 9628      	ADIW R28,8
                 ;lcd_puts(buff);
000a20 e6a0      	LDI  R26,LOW(_buff)
000a21 e0b2      	LDI  R27,HIGH(_buff)
000a22 940e 0d52 	CALL _lcd_puts
000a24 9508      	RET
                 ; .FEND
                 ;void tes_sensor()
                 ;for (i = 0; i < 7; i++)
                 ;lcd_gotoxy(0, 0);
                 ;sprintf(buff, "sensor:%d = %d  ", i, read_adc(i));
                 ;lcd_puts(buff);
                 ;delay_ms(100);
                 ;void tampil_count()
                 ;lcd_gotoxy(0, 0);
                 ;sprintf(buff, " %d  ", second);
                 ;lcd_puts(buff);
                 ;interrupt[TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 006C {
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
000a25 93aa      	ST   -Y,R26
000a26 93ea      	ST   -Y,R30
000a27 b7ef      	IN   R30,SREG
000a28 93ea      	ST   -Y,R30
                 ; 0000 006D TCNT0 = 0x96; // BE
000a29 e9e6      	LDI  R30,LOW(150)
000a2a bfe2      	OUT  0x32,R30
                 ; 0000 006E a++;
000a2b 91e0 0281 	LDS  R30,_a
000a2d 5fef      	SUBI R30,-LOW(1)
000a2e 93e0 0281 	STS  _a,R30
                 ; 0000 006F 
                 ; 0000 0070 if (a <= pos_servo1)
000a30 91a0 0281 	LDS  R26,_a
000a32 16da      	CP   R13,R26
000a33 f010      	BRLO _0x162
                 ; 0000 0071 {
                 ; 0000 0072 servo1 = 0;
000a34 98ae      	CBI  0x15,6
                 ; 0000 0073 }
                 ; 0000 0074 else
000a35 c001      	RJMP _0x165
                 _0x162:
                 ; 0000 0075 {
                 ; 0000 0076 servo1 = 1;
000a36 9aae      	SBI  0x15,6
                 ; 0000 0077 }
                 _0x165:
                 ; 0000 0078 if (a <= pos_servo2)
000a37 91a0 0281 	LDS  R26,_a
000a39 16ca      	CP   R12,R26
000a3a f010      	BRLO _0x168
                 ; 0000 0079 {
                 ; 0000 007A servo2 = 0;
000a3b 98af      	CBI  0x15,7
                 ; 0000 007B }
                 ; 0000 007C else
000a3c c001      	RJMP _0x16B
                 _0x168:
                 ; 0000 007D {
                 ; 0000 007E servo2 = 1;
000a3d 9aaf      	SBI  0x15,7
                 ; 0000 007F }
                 _0x16B:
                 ; 0000 0080 // if (a <= pos_gulung)
                 ; 0000 0081 // {
                 ; 0000 0082 //     servo_gulung = 0;
                 ; 0000 0083 // }
                 ; 0000 0084 // else
                 ; 0000 0085 // {
                 ; 0000 0086 //     servo_gulung = 1;
                 ; 0000 0087 // }
                 ; 0000 0088 }
000a3e 91e9      	LD   R30,Y+
000a3f bfef      	OUT  SREG,R30
000a40 91e9      	LD   R30,Y+
000a41 91a9      	LD   R26,Y+
000a42 9518      	RETI
                 ; .FEND
                 ;interrupt[TIM0_COMP] void timer0_comp_isr(void)
                 ; 0000 008C {
                 _timer0_comp_isr:
                 ; .FSTART _timer0_comp_isr
                 ; 0000 008D // Place your code here
                 ; 0000 008E }
000a43 9518      	RETI
                 ; .FEND
                 ;void main(void)
                 ; 0000 0091 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0092 // Declare your local variables here
                 ; 0000 0093 
                 ; 0000 0094 // Input/Output Ports initialization
                 ; 0000 0095 // Port A initialization
                 ; 0000 0096 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0097 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0098 PORTA = 0x00;
000a44 e0e0      	LDI  R30,LOW(0)
000a45 bbeb      	OUT  0x1B,R30
                 ; 0000 0099 DDRA = 0x00;
000a46 bbea      	OUT  0x1A,R30
                 ; 0000 009A 
                 ; 0000 009B // Port B initialization
                 ; 0000 009C // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 009D // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 009E PORTB = 0x08;
000a47 e0e8      	LDI  R30,LOW(8)
000a48 bbe8      	OUT  0x18,R30
                 ; 0000 009F DDRB = 0Xff; // 0x08;
000a49 efef      	LDI  R30,LOW(255)
000a4a bbe7      	OUT  0x17,R30
                 ; 0000 00A0 
                 ; 0000 00A1 // Port C initialization
                 ; 0000 00A2 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 00A3 // State7=T State6=T State5=T State4=T State3=P State2=P State1=P State0=P
                 ; 0000 00A4 PORTC = 0xFF;
000a4b bbe5      	OUT  0x15,R30
                 ; 0000 00A5 DDRC = 0xF0; // C0
000a4c efe0      	LDI  R30,LOW(240)
000a4d bbe4      	OUT  0x14,R30
                 ; 0000 00A6 
                 ; 0000 00A7 // Port D initialization
                 ; 0000 00A8 // Func7=In Func6=In Func5=Out Func4=Out Func3=In Func2=In Func1=In Func0=In
                 ; 0000 00A9 // State7=T State6=T State5=0 State4=0 State3=T State2=T State1=T State0=T
                 ; 0000 00AA PORTD = 0x03;
000a4e e0e3      	LDI  R30,LOW(3)
000a4f bbe2      	OUT  0x12,R30
                 ; 0000 00AB DDRD = 0xFC; // 3F
000a50 efec      	LDI  R30,LOW(252)
000a51 bbe1      	OUT  0x11,R30
                 ; 0000 00AC 
                 ; 0000 00AD // Timer/Counter 0 initialization
                 ; 0000 00AE TCCR0 = 0x4A;
000a52 e4ea      	LDI  R30,LOW(74)
000a53 bfe3      	OUT  0x33,R30
                 ; 0000 00AF TCNT0 = 0x96;
000a54 e9e6      	LDI  R30,LOW(150)
000a55 bfe2      	OUT  0x32,R30
                 ; 0000 00B0 OCR0 = 0x00;
000a56 e0e0      	LDI  R30,LOW(0)
000a57 bfec      	OUT  0x3C,R30
                 ; 0000 00B1 
                 ; 0000 00B2 // Timer/Counter 1 initialization
                 ; 0000 00B3 TCCR1A = 0xA1;
000a58 eae1      	LDI  R30,LOW(161)
000a59 bdef      	OUT  0x2F,R30
                 ; 0000 00B4 TCCR1B = 0x09;
000a5a e0e9      	LDI  R30,LOW(9)
000a5b bdee      	OUT  0x2E,R30
                 ; 0000 00B5 TCNT1H = 0x00;
000a5c e0e0      	LDI  R30,LOW(0)
000a5d bded      	OUT  0x2D,R30
                 ; 0000 00B6 TCNT1L = 0x00;
000a5e bdec      	OUT  0x2C,R30
                 ; 0000 00B7 ICR1H = 0x00;
000a5f bde7      	OUT  0x27,R30
                 ; 0000 00B8 ICR1L = 0x00;
000a60 bde6      	OUT  0x26,R30
                 ; 0000 00B9 OCR1AH = 0x00;
000a61 bdeb      	OUT  0x2B,R30
                 ; 0000 00BA OCR1AL = 0x00;
000a62 bdea      	OUT  0x2A,R30
                 ; 0000 00BB OCR1BH = 0x00;
000a63 bde9      	OUT  0x29,R30
                 ; 0000 00BC OCR1BL = 0x00;
000a64 bde8      	OUT  0x28,R30
                 ; 0000 00BD 
                 ; 0000 00BE // Timer/Counter 2 initialization
                 ; 0000 00BF // Clock source: System Clock
                 ; 0000 00C0 // Clock value: Timer 2 Stopped
                 ; 0000 00C1 // Mode: Normal top=FFh
                 ; 0000 00C2 // OC2 output: Disconnected
                 ; 0000 00C3 ASSR = 0x00;
000a65 bde2      	OUT  0x22,R30
                 ; 0000 00C4 TCCR2 = 0x00;
000a66 bde5      	OUT  0x25,R30
                 ; 0000 00C5 TCNT2 = 0x00;
000a67 bde4      	OUT  0x24,R30
                 ; 0000 00C6 OCR2 = 0x00;
000a68 bde3      	OUT  0x23,R30
                 ; 0000 00C7 
                 ; 0000 00C8 // External Interrupt(s) initialization
                 ; 0000 00C9 // INT0: Off
                 ; 0000 00CA // INT1: Off
                 ; 0000 00CB // INT2: Off
                 ; 0000 00CC MCUCR = 0x00;
000a69 bfe5      	OUT  0x35,R30
                 ; 0000 00CD MCUCSR = 0x00;
000a6a bfe4      	OUT  0x34,R30
                 ; 0000 00CE 
                 ; 0000 00CF // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 00D0 TIMSK = 0x01;
000a6b e0e1      	LDI  R30,LOW(1)
000a6c bfe9      	OUT  0x39,R30
                 ; 0000 00D1 
                 ; 0000 00D2 // Analog Comparator initialization
                 ; 0000 00D3 // Analog Comparator: Off
                 ; 0000 00D4 // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0000 00D5 ACSR = 0x80;
000a6d e8e0      	LDI  R30,LOW(128)
000a6e b9e8      	OUT  0x8,R30
                 ; 0000 00D6 SFIOR = 0x00;
000a6f e0e0      	LDI  R30,LOW(0)
000a70 bfe0      	OUT  0x30,R30
                 ; 0000 00D7 
                 ; 0000 00D8 MCUCR = 0x00;
000a71 bfe5      	OUT  0x35,R30
                 ; 0000 00D9 MCUCSR = 0x00;
000a72 bfe4      	OUT  0x34,R30
                 ; 0000 00DA 
                 ; 0000 00DB // USART, UNTUK KOMUNIKASI BLUETOOTH
                 ; 0000 00DC UCSRA = 0x00;
000a73 b9eb      	OUT  0xB,R30
                 ; 0000 00DD UCSRB = 0x18;
000a74 e1e8      	LDI  R30,LOW(24)
000a75 b9ea      	OUT  0xA,R30
                 ; 0000 00DE UCSRC = 0x86;
000a76 e8e6      	LDI  R30,LOW(134)
000a77 bde0      	OUT  0x20,R30
                 ; 0000 00DF UBRRH = 0x00;
000a78 e0e0      	LDI  R30,LOW(0)
000a79 bde0      	OUT  0x20,R30
                 ; 0000 00E0 UBRRL = 0x47;
000a7a e4e7      	LDI  R30,LOW(71)
000a7b b9e9      	OUT  0x9,R30
                 ; 0000 00E1 // ADC initialization
                 ; 0000 00E2 // ADC Clock frequency: 691.200 kHz
                 ; 0000 00E3 // ADC Voltage Reference: AVCC pin
                 ; 0000 00E4 // ADC Auto Trigger Source: None
                 ; 0000 00E5 // Only the 8 most significant bits of
                 ; 0000 00E6 // the AD conversion result are used
                 ; 0000 00E7 ADMUX = ADC_VREF_TYPE & 0xff;
000a7c e6e0      	LDI  R30,LOW(96)
000a7d b9e7      	OUT  0x7,R30
                 ; 0000 00E8 ADCSRA = 0x84;
000a7e e8e4      	LDI  R30,LOW(132)
000a7f b9e6      	OUT  0x6,R30
                 ; 0000 00E9 // ADCSRA=0xA6;
                 ; 0000 00EA SFIOR &= 0x1F;
000a80 b7e0      	IN   R30,0x30
000a81 71ef      	ANDI R30,LOW(0x1F)
000a82 bfe0      	OUT  0x30,R30
                 ; 0000 00EB 
                 ; 0000 00EC // LCD module initialization
                 ; 0000 00ED lcd_init(16); //
000a83 e1a0      	LDI  R26,LOW(16)
000a84 940e 0d85 	CALL _lcd_init
                 ; 0000 00EE lcd_clear();  //
000a86 940e 0d16 	CALL _lcd_clear
                 ; 0000 00EF lampu = 0;    //
000a88 98c3      	CBI  0x18,3
                 ; 0000 00F0 // k,b
                 ; 0000 00F1 lcd_gotoxy(0, 0);
000a89 e0e0      	LDI  R30,LOW(0)
000a8a 940e 0dd3 	CALL SUBOPT_0x3
                 ; 0000 00F2 lcd_putsf("     LEGION     ");
                +
000a8c e2a6     +LDI R26 , LOW ( 2 * _0x0 + ( 422 ) )
000a8d e0b2     +LDI R27 , HIGH ( 2 * _0x0 + ( 422 ) )
                 	__POINTW2FN _0x0,422
000a8e 940e 0f2f 	CALL SUBOPT_0x39
                 ; 0000 00F3 lcd_gotoxy(0, 1);
                 ; 0000 00F4 lcd_putsf(" MAN 4 JOMBANG ");
                +
000a90 e3a7     +LDI R26 , LOW ( 2 * _0x0 + ( 439 ) )
000a91 e0b2     +LDI R27 , HIGH ( 2 * _0x0 + ( 439 ) )
                 	__POINTW2FN _0x0,439
000a92 940e 0d61 	CALL _lcd_putsf
                 ; 0000 00F5 delay_ms(50);
000a94 e3a2      	LDI  R26,LOW(50)
000a95 e0b0      	LDI  R27,0
000a96 940e 110d 	CALL _delay_ms
                 ; 0000 00F6 lcd_clear();
000a98 940e 0d16 	CALL _lcd_clear
                 ; 0000 00F7 
                 ; 0000 00F8 // PROGRAM UTAMA
                 ; 0000 00F9 // Global enable interrupts
                 ; 0000 00FA #asm("sei")
000a9a 9478      	SEI
                 ; 0000 00FB lengan_atas;
000a9b eeea      	LDI  R30,LOW(234)
000a9c 2ece      	MOV  R12,R30
                 ; 0000 00FC capit_lepas;
000a9d eee6      	LDI  R30,LOW(230)
000a9e 2ede      	MOV  R13,R30
                 ; 0000 00FD // gulung_stop;
                 ; 0000 00FE 
                 ; 0000 00FF /// mapMirror = 0 - map/lintasan bagian biru
                 ; 0000 0100 /// mapMirror = 1 - map/lintasan bagian merah
                 ; 0000 0101 if(mapMirror != 0 && mapMirror != 1) mapMirror = 0;
000a9f e2aa      	LDI  R26,LOW(_mapMirror)
000aa0 e0b0      	LDI  R27,HIGH(_mapMirror)
000aa1 940e 0ff9 	CALL __EEPROMRDW
000aa3 9730      	SBIW R30,0
000aa4 f021      	BREQ _0x171
000aa5 30e1      	CPI  R30,LOW(0x1)
000aa6 e0a0      	LDI  R26,HIGH(0x1)
000aa7 07fa      	CPC  R31,R26
000aa8 f409      	BRNE _0x172
                 _0x171:
000aa9 c006      	RJMP _0x170
                 _0x172:
000aaa e2aa      	LDI  R26,LOW(_mapMirror)
000aab e0b0      	LDI  R27,HIGH(_mapMirror)
000aac e0e0      	LDI  R30,LOW(0)
000aad e0f0      	LDI  R31,HIGH(0)
000aae 940e 1009 	CALL __EEPROMWRW
                 ; 0000 0102 
                 ; 0000 0103 lcd_clear();
                 _0x170:
000ab0 940e 0f2b 	CALL SUBOPT_0x38
                 ; 0000 0104 lcd_gotoxy(0, 0);
                 ; 0000 0105 lcd_putsf("Menu");
                +
000ab2 eea4     +LDI R26 , LOW ( 2 * _0x0 + ( 100 ) )
000ab3 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 100 ) )
                 	__POINTW2FN _0x0,100
000ab4 940e 0f2f 	CALL SUBOPT_0x39
                 ; 0000 0106 lcd_gotoxy(0, 1);
                 ; 0000 0107 lcd_putsf("Calibration");
                +
000ab6 eea9     +LDI R26 , LOW ( 2 * _0x0 + ( 105 ) )
000ab7 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 105 ) )
                 	__POINTW2FN _0x0,105
000ab8 940e 0d61 	CALL _lcd_putsf
                 ; 0000 0108 
                 ; 0000 0109 while(1) {
                 _0x173:
                 ; 0000 010A if(!isChildSelect) {
000aba 91e0 0286 	LDS  R30,_isChildSelect
000abc 30e0      	CPI  R30,0
000abd f421      	BRNE _0x176
                 ; 0000 010B display_sensor();
000abe 940e 01e5 	CALL _display_sensor
                 ; 0000 010C bacawarna();
000ac0 da1a      	RCALL _bacawarna
                 ; 0000 010D display_map();
000ac1 df49      	RCALL _display_map
                 ; 0000 010E }
                 ; 0000 010F 
                 ; 0000 0110 // lcd_gotoxy(0, 1);
                 ; 0000 0111 // sprintf(buff, "button1 = %d  ", count_btn);
                 ; 0000 0112 // lcd_puts(buff);
                 ; 0000 0113 
                 ; 0000 0114 //bacawarna();
                 ; 0000 0115 if((t1 == 0)) {
                 _0x176:
000ac2 9998      	SBIC 0x13,0
000ac3 c01c      	RJMP _0x177
                 ; 0000 0116 // Program_Jalan();
                 ; 0000 0117 
                 ; 0000 0118 if(!isChildSelect) count_btn ++;
000ac4 91e0 0286 	LDS  R30,_isChildSelect
000ac6 30e0      	CPI  R30,0
000ac7 f421      	BRNE _0x178
000ac8 e8a2      	LDI  R26,LOW(_count_btn)
000ac9 e0b2      	LDI  R27,HIGH(_count_btn)
000aca 940e 0e62 	CALL SUBOPT_0x19
                 ; 0000 0119 // if(isChildSelect) count_child_btn ++;
                 ; 0000 011A if(count_btn >= 7) count_btn = 0;
                 _0x178:
000acc 91a0 0282 	LDS  R26,_count_btn
000ace 91b0 0283 	LDS  R27,_count_btn+1
000ad0 9717      	SBIW R26,7
000ad1 f02c      	BRLT _0x179
000ad2 e0e0      	LDI  R30,LOW(0)
000ad3 93e0 0282 	STS  _count_btn,R30
000ad5 93e0 0283 	STS  _count_btn+1,R30
                 ; 0000 011B delay(10);
                 _0x179:
000ad7 e0aa      	LDI  R26,LOW(10)
000ad8 e0b0      	LDI  R27,0
000ad9 940e 0191 	CALL _delay
                 ; 0000 011C changeMenu(count_btn, false, count_child_btn);
000adb 940e 0f62 	CALL SUBOPT_0x40
000add e0e0      	LDI  R30,LOW(0)
000ade 940e 0f69 	CALL SUBOPT_0x41
                 ; 0000 011D 
                 ; 0000 011E // buttonhold[0] += 1;
                 ; 0000 011F // while((t1 == 0) && !isTestTombol && !isDelayClick1) {
                 ; 0000 0120 //     isDelayClick1 = true;
                 ; 0000 0121 //     delay(3);
                 ; 0000 0122 //     if(buttonhold[0] > 20) {
                 ; 0000 0123 //         isSelect = true;
                 ; 0000 0124 //         changeMenu();
                 ; 0000 0125 //     } else {
                 ; 0000 0126 //         isSelect = false; isChildSelect = false;
                 ; 0000 0127 //         changeMenu();
                 ; 0000 0128 //         buttonhold[0] = 0;
                 ; 0000 0129 //     }
                 ; 0000 012A //     isDelayClick1 = false; break;
                 ; 0000 012B // }
                 ; 0000 012C // lcd_gotoxy(0, 0);
                 ; 0000 012D // sprintf(buff, "button1 = %d  ", button1click);
                 ; 0000 012E }
                 ; 0000 012F if((t2 == 0)) {
                 _0x177:
000ae0 9999      	SBIC 0x13,1
000ae1 c009      	RJMP _0x17A
                 ; 0000 0130 changeMenu(count_btn, true, count_child_btn);
000ae2 940e 0f62 	CALL SUBOPT_0x40
000ae4 e0e1      	LDI  R30,LOW(1)
000ae5 940e 0f69 	CALL SUBOPT_0x41
                 ; 0000 0131 delay(10);
000ae7 e0aa      	LDI  R26,LOW(10)
000ae8 e0b0      	LDI  R27,0
000ae9 940e 0191 	CALL _delay
                 ; 0000 0132 }
                 ; 0000 0133 // lcd_puts(buff);
                 ; 0000 0134 // } else if((t1 == 1)) {
                 ; 0000 0135 //     buttonhold[0] = 0;
                 ; 0000 0136 //     isDelayClick1 = false;
                 ; 0000 0137 // }
                 ; 0000 0138 
                 ; 0000 0139 // if ((count_btn==0) && (t2==0)){
                 ; 0000 013A //     lcd_clear();
                 ; 0000 013B //     lcd_gotoxy(0, 0);
                 ; 0000 013C //     lcd_putsf("menu 1");
                 ; 0000 013D // } else if((count_btn == 1) && (t2 == 0)) {
                 ; 0000 013E //     lcd_clear();
                 ; 0000 013F //     lcd_gotoxy(0, 0);
                 ; 0000 0140 //     lcd_putsf("menu 2");
                 ; 0000 0141 // } else if((count_btn == 2) && (t2 == 0)) {
                 ; 0000 0142 //     lcd_clear();
                 ; 0000 0143 //     lcd_gotoxy(0, 0);
                 ; 0000 0144 //     lcd_putsf("menu 3");
                 ; 0000 0145 // } else if((count_btn == 3) && (t2 == 0)) {
                 ; 0000 0146 //     lcd_clear();
                 ; 0000 0147 //     lcd_gotoxy(0, 0);
                 ; 0000 0148 //     lcd_putsf("menu 4");
                 ; 0000 0149 // } else if((count_btn == 4) && (t2 == 0)) {
                 ; 0000 014A //     lcd_clear();
                 ; 0000 014B //     lcd_gotoxy(0, 0);
                 ; 0000 014C //     lcd_putsf("menu 5");
                 ; 0000 014D // } else if((count_btn == 5) && (t2 == 0)) {
                 ; 0000 014E //     lcd_clear();
                 ; 0000 014F //     lcd_gotoxy(0, 0);
                 ; 0000 0150 //     lcd_putsf("menu 6");
                 ; 0000 0151 // } else if((count_btn == 6) && (t2 == 0)) {
                 ; 0000 0152 //     lcd_clear();
                 ; 0000 0153 //     lcd_gotoxy(0, 0);
                 ; 0000 0154 //     lcd_putsf("menu 7");
                 ; 0000 0155 // } else if((count_btn == 7) && (t2 == 0)) {
                 ; 0000 0156 //     lcd_clear();
                 ; 0000 0157 //     lcd_gotoxy(0, 0);
                 ; 0000 0158 //     lcd_putsf("menu 8");
                 ; 0000 0159 // } else if((count_btn == 8) && (t2 == 0)) {
                 ; 0000 015A //     lcd_clear();
                 ; 0000 015B //     lcd_gotoxy(0, 0);
                 ; 0000 015C //     lcd_putsf("menu 9");
                 ; 0000 015D // } else if((count_btn == 9) && (t2 == 0)) {
                 ; 0000 015E //     lcd_clear();
                 ; 0000 015F //     lcd_gotoxy(0, 0);
                 ; 0000 0160 //     lcd_putsf("menu 10");
                 ; 0000 0161 // } else if((count_btn == 10) && (t2 == 0)) {
                 ; 0000 0162 //     lcd_clear();
                 ; 0000 0163 //     lcd_gotoxy(0, 0);
                 ; 0000 0164 // }
                 ; 0000 0165 
                 ; 0000 0166 // if (    (t2 == 0)
                 ; 0000 0167 //         && !isTestTombol
                 ; 0000 0168 //         && (!isChildSelect && menuSelect == 0) // Jika Menu di Run Bot, janga ...
                 ; 0000 0169 //     ) {
                 ; 0000 016A 
                 ; 0000 016B //         // lengan_bawah;
                 ; 0000 016C //         // delay(50);
                 ; 0000 016D //     // menuSelect += 1;
                 ; 0000 016E //     // if(menuSelect >= 4) menuSelect = 0;
                 ; 0000 016F //     // changeMenu();
                 ; 0000 0170 
                 ; 0000 0171 //     scan_garis();
                 ; 0000 0172 //     delay(300);
                 ; 0000 0173 //     scan_back();
                 ; 0000 0174 //     delay(100);
                 ; 0000 0175 //     hit_tengah();
                 ; 0000 0176 
                 ; 0000 0177 //     // button1click = 0;
                 ; 0000 0178 //     // lcd_gotoxy(0, 0);
                 ; 0000 0179 //     // sprintf(buff, "button1 = %d  ", button1click);
                 ; 0000 017A //     // lcd_puts(buff);
                 ; 0000 017B // }
                 ; 0000 017C }
                 _0x17A:
000aeb cfce      	RJMP _0x173
                 ; 0000 017D }
                 _0x17B:
000aec cfff      	RJMP _0x17B
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
000aed 93ba      	ST   -Y,R27
000aee 93aa      	ST   -Y,R26
000aef 931a      	ST   -Y,R17
000af0 930a      	ST   -Y,R16
000af1 81aa      	LDD  R26,Y+2
000af2 81bb      	LDD  R27,Y+2+1
000af3 9612      	ADIW R26,2
000af4 940e 0fec 	CALL __GETW1P
000af6 9730      	SBIW R30,0
000af7 f129      	BREQ _0x2000010
000af8 81aa      	LDD  R26,Y+2
000af9 81bb      	LDD  R27,Y+2+1
000afa 9614      	ADIW R26,4
000afb 940e 0fec 	CALL __GETW1P
000afd 018f      	MOVW R16,R30
000afe 9730      	SBIW R30,0
000aff f061      	BREQ _0x2000012
                +
000b00 3002     +CPI R16 , LOW ( 2 )
000b01 e0e0     +LDI R30 , HIGH ( 2 )
000b02 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000b03 f080      	BRLO _0x2000013
000b04 01f8      	MOVW R30,R16
000b05 9731      	SBIW R30,1
000b06 018f      	MOVW R16,R30
                +
000b07 81aa     +LDD R26 , Y + 2
000b08 81bb     +LDD R27 , Y + 2 + 1
000b09 9614     +ADIW R26 , 4
000b0a 93ed     +ST X + , R30
000b0b 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
000b0c 81aa      	LDD  R26,Y+2
000b0d 81bb      	LDD  R27,Y+2+1
000b0e 9612      	ADIW R26,2
000b0f 940e 0e62 	CALL SUBOPT_0x19
000b11 9731      	SBIW R30,1
000b12 81ac      	LDD  R26,Y+4
000b13 83a0      	STD  Z+0,R26
                 _0x2000013:
000b14 81aa      	LDD  R26,Y+2
000b15 81bb      	LDD  R27,Y+2+1
000b16 940e 0fec 	CALL __GETW1P
000b18 23ff      	TST  R31
000b19 f012      	BRMI _0x2000014
000b1a 940e 0e62 	CALL SUBOPT_0x19
                 _0x2000014:
000b1c c006      	RJMP _0x2000015
                 _0x2000010:
000b1d 81aa      	LDD  R26,Y+2
000b1e 81bb      	LDD  R27,Y+2+1
000b1f efef      	LDI  R30,LOW(65535)
000b20 efff      	LDI  R31,HIGH(65535)
000b21 93ed      	ST   X+,R30
000b22 93fc      	ST   X,R31
                 _0x2000015:
000b23 8119      	LDD  R17,Y+1
000b24 8108      	LDD  R16,Y+0
                 _0x20C0005:
000b25 9625      	ADIW R28,5
000b26 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
000b27 93ba      	ST   -Y,R27
000b28 93aa      	ST   -Y,R26
000b29 9726      	SBIW R28,6
000b2a 940e 0f96 	CALL __SAVELOCR6
000b2c e010      	LDI  R17,0
000b2d 85ac      	LDD  R26,Y+12
000b2e 85bd      	LDD  R27,Y+12+1
000b2f e0e0      	LDI  R30,LOW(0)
000b30 e0f0      	LDI  R31,HIGH(0)
000b31 93ed      	ST   X+,R30
000b32 93fc      	ST   X,R31
                 _0x2000016:
000b33 89ea      	LDD  R30,Y+18
000b34 89fb      	LDD  R31,Y+18+1
000b35 9631      	ADIW R30,1
000b36 8bea      	STD  Y+18,R30
000b37 8bfb      	STD  Y+18+1,R31
000b38 9731      	SBIW R30,1
000b39 91e4      	LPM  R30,Z
000b3a 2f2e      	MOV  R18,R30
000b3b 30e0      	CPI  R30,0
000b3c f409      	BRNE PC+2
000b3d c11d      	RJMP _0x2000018
000b3e 2fe1      	MOV  R30,R17
000b3f 30e0      	CPI  R30,0
000b40 f439      	BRNE _0x200001C
000b41 3225      	CPI  R18,37
000b42 f411      	BRNE _0x200001D
000b43 e011      	LDI  R17,LOW(1)
000b44 c002      	RJMP _0x200001E
                 _0x200001D:
000b45 940e 0f70 	CALL SUBOPT_0x42
                 _0x200001E:
000b47 c112      	RJMP _0x200001B
                 _0x200001C:
000b48 30e1      	CPI  R30,LOW(0x1)
000b49 f4a9      	BRNE _0x200001F
000b4a 3225      	CPI  R18,37
000b4b f419      	BRNE _0x2000020
000b4c 940e 0f70 	CALL SUBOPT_0x42
000b4e c10a      	RJMP _0x20000CC
                 _0x2000020:
000b4f e012      	LDI  R17,LOW(2)
000b50 e040      	LDI  R20,LOW(0)
000b51 e000      	LDI  R16,LOW(0)
000b52 322d      	CPI  R18,45
000b53 f411      	BRNE _0x2000021
000b54 e001      	LDI  R16,LOW(1)
000b55 c104      	RJMP _0x200001B
                 _0x2000021:
000b56 322b      	CPI  R18,43
000b57 f411      	BRNE _0x2000022
000b58 e24b      	LDI  R20,LOW(43)
000b59 c100      	RJMP _0x200001B
                 _0x2000022:
000b5a 3220      	CPI  R18,32
000b5b f411      	BRNE _0x2000023
000b5c e240      	LDI  R20,LOW(32)
000b5d c0fc      	RJMP _0x200001B
                 _0x2000023:
000b5e c002      	RJMP _0x2000024
                 _0x200001F:
000b5f 30e2      	CPI  R30,LOW(0x2)
000b60 f439      	BRNE _0x2000025
                 _0x2000024:
000b61 e050      	LDI  R21,LOW(0)
000b62 e013      	LDI  R17,LOW(3)
000b63 3320      	CPI  R18,48
000b64 f411      	BRNE _0x2000026
000b65 6800      	ORI  R16,LOW(128)
000b66 c0f3      	RJMP _0x200001B
                 _0x2000026:
000b67 c003      	RJMP _0x2000027
                 _0x2000025:
000b68 30e3      	CPI  R30,LOW(0x3)
000b69 f009      	BREQ PC+2
000b6a c0ef      	RJMP _0x200001B
                 _0x2000027:
000b6b 3320      	CPI  R18,48
000b6c f010      	BRLO _0x200002A
000b6d 332a      	CPI  R18,58
000b6e f008      	BRLO _0x200002B
                 _0x200002A:
000b6f c007      	RJMP _0x2000029
                 _0x200002B:
000b70 e0aa      	LDI  R26,LOW(10)
000b71 9f5a      	MUL  R21,R26
000b72 2d50      	MOV  R21,R0
000b73 2fe2      	MOV  R30,R18
000b74 53e0      	SUBI R30,LOW(48)
000b75 0f5e      	ADD  R21,R30
000b76 c0e3      	RJMP _0x200001B
                 _0x2000029:
000b77 2fe2      	MOV  R30,R18
000b78 36e3      	CPI  R30,LOW(0x63)
000b79 f449      	BRNE _0x200002F
000b7a 940e 0f77 	CALL SUBOPT_0x43
000b7c 89e8      	LDD  R30,Y+16
000b7d 89f9      	LDD  R31,Y+16+1
000b7e 81a4      	LDD  R26,Z+4
000b7f 93aa      	ST   -Y,R26
000b80 940e 0f7d 	CALL SUBOPT_0x44
000b82 c0d6      	RJMP _0x2000030
                 _0x200002F:
000b83 37e3      	CPI  R30,LOW(0x73)
000b84 f441      	BRNE _0x2000032
000b85 940e 0f77 	CALL SUBOPT_0x43
000b87 940e 0f83 	CALL SUBOPT_0x45
000b89 940e 0c9f 	CALL _strlen
000b8b 2f1e      	MOV  R17,R30
000b8c c00a      	RJMP _0x2000033
                 _0x2000032:
000b8d 37e0      	CPI  R30,LOW(0x70)
000b8e f461      	BRNE _0x2000035
000b8f 940e 0f77 	CALL SUBOPT_0x43
000b91 940e 0f83 	CALL SUBOPT_0x45
000b93 940e 0cab 	CALL _strlenf
000b95 2f1e      	MOV  R17,R30
000b96 6008      	ORI  R16,LOW(8)
                 _0x2000033:
000b97 6002      	ORI  R16,LOW(2)
000b98 770f      	ANDI R16,LOW(127)
000b99 e030      	LDI  R19,LOW(0)
000b9a c03c      	RJMP _0x2000036
                 _0x2000035:
000b9b 36e4      	CPI  R30,LOW(0x64)
000b9c f011      	BREQ _0x2000039
000b9d 36e9      	CPI  R30,LOW(0x69)
000b9e f411      	BRNE _0x200003A
                 _0x2000039:
000b9f 6004      	ORI  R16,LOW(4)
000ba0 c002      	RJMP _0x200003B
                 _0x200003A:
000ba1 37e5      	CPI  R30,LOW(0x75)
000ba2 f431      	BRNE _0x200003C
                 _0x200003B:
000ba3 e5e4      	LDI  R30,LOW(_tbl10_G100*2)
000ba4 e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
000ba5 83ee      	STD  Y+6,R30
000ba6 83ff      	STD  Y+6+1,R31
000ba7 e015      	LDI  R17,LOW(5)
000ba8 c00c      	RJMP _0x200003D
                 _0x200003C:
000ba9 35e8      	CPI  R30,LOW(0x58)
000baa f411      	BRNE _0x200003F
000bab 6008      	ORI  R16,LOW(8)
000bac c003      	RJMP _0x2000040
                 _0x200003F:
000bad 37e8      	CPI  R30,LOW(0x78)
000bae f009      	BREQ PC+2
000baf c0a9      	RJMP _0x2000071
                 _0x2000040:
000bb0 e5ee      	LDI  R30,LOW(_tbl16_G100*2)
000bb1 e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
000bb2 83ee      	STD  Y+6,R30
000bb3 83ff      	STD  Y+6+1,R31
000bb4 e014      	LDI  R17,LOW(4)
                 _0x200003D:
000bb5 ff02      	SBRS R16,2
000bb6 c017      	RJMP _0x2000042
000bb7 940e 0f77 	CALL SUBOPT_0x43
000bb9 89a8      	LDD  R26,Y+16
000bba 89b9      	LDD  R27,Y+16+1
000bbb 9614      	ADIW R26,4
000bbc 91ed      	LD   R30,X+
000bbd 91fd      	LD   R31,X+
000bbe 87ea      	STD  Y+10,R30
000bbf 87fb      	STD  Y+10+1,R31
000bc0 85ab      	LDD  R26,Y+11
000bc1 23aa      	TST  R26
000bc2 f42a      	BRPL _0x2000043
000bc3 940e 0fa8 	CALL __ANEGW1
000bc5 87ea      	STD  Y+10,R30
000bc6 87fb      	STD  Y+10+1,R31
000bc7 e24d      	LDI  R20,LOW(45)
                 _0x2000043:
000bc8 3040      	CPI  R20,0
000bc9 f011      	BREQ _0x2000044
000bca 5f1f      	SUBI R17,-LOW(1)
000bcb c001      	RJMP _0x2000045
                 _0x2000044:
000bcc 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
000bcd c009      	RJMP _0x2000046
                 _0x2000042:
000bce 940e 0f77 	CALL SUBOPT_0x43
000bd0 89a8      	LDD  R26,Y+16
000bd1 89b9      	LDD  R27,Y+16+1
000bd2 9614      	ADIW R26,4
000bd3 940e 0fec 	CALL __GETW1P
000bd5 87ea      	STD  Y+10,R30
000bd6 87fb      	STD  Y+10+1,R31
                 _0x2000046:
                 _0x2000036:
000bd7 fd00      	SBRC R16,0
000bd8 c011      	RJMP _0x2000047
                 _0x2000048:
000bd9 1715      	CP   R17,R21
000bda f478      	BRSH _0x200004A
000bdb ff07      	SBRS R16,7
000bdc c008      	RJMP _0x200004B
000bdd ff02      	SBRS R16,2
000bde c004      	RJMP _0x200004C
000bdf 7f0b      	ANDI R16,LOW(251)
000be0 2f24      	MOV  R18,R20
000be1 5011      	SUBI R17,LOW(1)
000be2 c001      	RJMP _0x200004D
                 _0x200004C:
000be3 e320      	LDI  R18,LOW(48)
                 _0x200004D:
000be4 c001      	RJMP _0x200004E
                 _0x200004B:
000be5 e220      	LDI  R18,LOW(32)
                 _0x200004E:
000be6 940e 0f70 	CALL SUBOPT_0x42
000be8 5051      	SUBI R21,LOW(1)
000be9 cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
000bea 2f31      	MOV  R19,R17
000beb ff01      	SBRS R16,1
000bec c017      	RJMP _0x200004F
                 _0x2000050:
000bed 3030      	CPI  R19,0
000bee f0a1      	BREQ _0x2000052
000bef ff03      	SBRS R16,3
000bf0 c006      	RJMP _0x2000053
000bf1 81ee      	LDD  R30,Y+6
000bf2 81ff      	LDD  R31,Y+6+1
000bf3 9125      	LPM  R18,Z+
000bf4 83ee      	STD  Y+6,R30
000bf5 83ff      	STD  Y+6+1,R31
000bf6 c005      	RJMP _0x2000054
                 _0x2000053:
000bf7 81ae      	LDD  R26,Y+6
000bf8 81bf      	LDD  R27,Y+6+1
000bf9 912d      	LD   R18,X+
000bfa 83ae      	STD  Y+6,R26
000bfb 83bf      	STD  Y+6+1,R27
                 _0x2000054:
000bfc 940e 0f70 	CALL SUBOPT_0x42
000bfe 3050      	CPI  R21,0
000bff f009      	BREQ _0x2000055
000c00 5051      	SUBI R21,LOW(1)
                 _0x2000055:
000c01 5031      	SUBI R19,LOW(1)
000c02 cfea      	RJMP _0x2000050
                 _0x2000052:
000c03 c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
000c04 e320      	LDI  R18,LOW(48)
000c05 81ee      	LDD  R30,Y+6
000c06 81ff      	LDD  R31,Y+6+1
000c07 940e 0ff0 	CALL __GETW1PF
000c09 87e8      	STD  Y+8,R30
000c0a 87f9      	STD  Y+8+1,R31
000c0b 81ee      	LDD  R30,Y+6
000c0c 81ff      	LDD  R31,Y+6+1
000c0d 9632      	ADIW R30,2
000c0e 83ee      	STD  Y+6,R30
000c0f 83ff      	STD  Y+6+1,R31
                 _0x200005A:
000c10 85e8      	LDD  R30,Y+8
000c11 85f9      	LDD  R31,Y+8+1
000c12 85aa      	LDD  R26,Y+10
000c13 85bb      	LDD  R27,Y+10+1
000c14 17ae      	CP   R26,R30
000c15 07bf      	CPC  R27,R31
000c16 f050      	BRLO _0x200005C
000c17 5f2f      	SUBI R18,-LOW(1)
000c18 85a8      	LDD  R26,Y+8
000c19 85b9      	LDD  R27,Y+8+1
000c1a 85ea      	LDD  R30,Y+10
000c1b 85fb      	LDD  R31,Y+10+1
000c1c 1bea      	SUB  R30,R26
000c1d 0bfb      	SBC  R31,R27
000c1e 87ea      	STD  Y+10,R30
000c1f 87fb      	STD  Y+10+1,R31
000c20 cfef      	RJMP _0x200005A
                 _0x200005C:
000c21 332a      	CPI  R18,58
000c22 f028      	BRLO _0x200005D
000c23 ff03      	SBRS R16,3
000c24 c002      	RJMP _0x200005E
000c25 5f29      	SUBI R18,-LOW(7)
000c26 c001      	RJMP _0x200005F
                 _0x200005E:
000c27 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
000c28 fd04      	SBRC R16,4
000c29 c01a      	RJMP _0x2000061
000c2a 3321      	CPI  R18,49
000c2b f420      	BRSH _0x2000063
000c2c 85a8      	LDD  R26,Y+8
000c2d 85b9      	LDD  R27,Y+8+1
000c2e 9711      	SBIW R26,1
000c2f f409      	BRNE _0x2000062
                 _0x2000063:
000c30 c009      	RJMP _0x20000CD
                 _0x2000062:
000c31 1753      	CP   R21,R19
000c32 f010      	BRLO _0x2000067
000c33 ff00      	SBRS R16,0
000c34 c001      	RJMP _0x2000068
                 _0x2000067:
000c35 c013      	RJMP _0x2000066
                 _0x2000068:
000c36 e220      	LDI  R18,LOW(32)
000c37 ff07      	SBRS R16,7
000c38 c00b      	RJMP _0x2000069
000c39 e320      	LDI  R18,LOW(48)
                 _0x20000CD:
000c3a 6100      	ORI  R16,LOW(16)
000c3b ff02      	SBRS R16,2
000c3c c007      	RJMP _0x200006A
000c3d 7f0b      	ANDI R16,LOW(251)
000c3e 934a      	ST   -Y,R20
000c3f 940e 0f7d 	CALL SUBOPT_0x44
000c41 3050      	CPI  R21,0
000c42 f009      	BREQ _0x200006B
000c43 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
000c44 940e 0f70 	CALL SUBOPT_0x42
000c46 3050      	CPI  R21,0
000c47 f009      	BREQ _0x200006C
000c48 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
000c49 5031      	SUBI R19,LOW(1)
000c4a 85a8      	LDD  R26,Y+8
000c4b 85b9      	LDD  R27,Y+8+1
000c4c 9712      	SBIW R26,2
000c4d f008      	BRLO _0x2000059
000c4e cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
000c4f ff00      	SBRS R16,0
000c50 c008      	RJMP _0x200006D
                 _0x200006E:
000c51 3050      	CPI  R21,0
000c52 f031      	BREQ _0x2000070
000c53 5051      	SUBI R21,LOW(1)
000c54 e2e0      	LDI  R30,LOW(32)
000c55 93ea      	ST   -Y,R30
000c56 940e 0f7d 	CALL SUBOPT_0x44
000c58 cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
000c59 e010      	LDI  R17,LOW(0)
                 _0x200001B:
000c5a ced8      	RJMP _0x2000016
                 _0x2000018:
000c5b 85ac      	LDD  R26,Y+12
000c5c 85bd      	LDD  R27,Y+12+1
000c5d 91ed      	LD   R30,X+
000c5e 91fd      	LD   R31,X+
000c5f 940e 0f9d 	CALL __LOADLOCR6
000c61 9664      	ADIW R28,20
000c62 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
000c63 92ff      	PUSH R15
000c64 2ef8      	MOV  R15,R24
000c65 9726      	SBIW R28,6
000c66 940e 0f98 	CALL __SAVELOCR4
000c68 01de      	MOVW R26,R28
000c69 961c      	ADIW R26,12
000c6a 940e 0fa4 	CALL __ADDW2R15
000c6c 940e 0fec 	CALL __GETW1P
000c6e 9730      	SBIW R30,0
000c6f f419      	BRNE _0x2000072
000c70 efef      	LDI  R30,LOW(65535)
000c71 efff      	LDI  R31,HIGH(65535)
000c72 c027      	RJMP _0x20C0004
                 _0x2000072:
000c73 01de      	MOVW R26,R28
000c74 9616      	ADIW R26,6
000c75 940e 0fa4 	CALL __ADDW2R15
000c77 018d      	MOVW R16,R26
000c78 01de      	MOVW R26,R28
000c79 961c      	ADIW R26,12
000c7a 940e 0fa4 	CALL __ADDW2R15
000c7c 91ed      	LD   R30,X+
000c7d 91fd      	LD   R31,X+
000c7e 83ee      	STD  Y+6,R30
000c7f 83ff      	STD  Y+6+1,R31
000c80 e0e0      	LDI  R30,LOW(0)
000c81 87e8      	STD  Y+8,R30
000c82 87e9      	STD  Y+8+1,R30
000c83 01de      	MOVW R26,R28
000c84 961a      	ADIW R26,10
000c85 940e 0fa4 	CALL __ADDW2R15
000c87 91ed      	LD   R30,X+
000c88 91fd      	LD   R31,X+
000c89 93fa      	ST   -Y,R31
000c8a 93ea      	ST   -Y,R30
000c8b 931a      	ST   -Y,R17
000c8c 930a      	ST   -Y,R16
000c8d eeed      	LDI  R30,LOW(_put_buff_G100)
000c8e e0fa      	LDI  R31,HIGH(_put_buff_G100)
000c8f 93fa      	ST   -Y,R31
000c90 93ea      	ST   -Y,R30
000c91 01de      	MOVW R26,R28
000c92 961a      	ADIW R26,10
000c93 de93      	RCALL __print_G100
000c94 019f      	MOVW R18,R30
000c95 81ae      	LDD  R26,Y+6
000c96 81bf      	LDD  R27,Y+6+1
000c97 e0e0      	LDI  R30,LOW(0)
000c98 93ec      	ST   X,R30
000c99 01f9      	MOVW R30,R18
                 _0x20C0004:
000c9a 940e 0f9f 	CALL __LOADLOCR4
000c9c 962a      	ADIW R28,10
000c9d 90ff      	POP  R15
000c9e 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000c9f 93ba      	ST   -Y,R27
000ca0 93aa      	ST   -Y,R26
000ca1 91a9          ld   r26,y+
000ca2 91b9          ld   r27,y+
000ca3 27ee          clr  r30
000ca4 27ff          clr  r31
                 strlen0:
000ca5 916d          ld   r22,x+
000ca6 2366          tst  r22
000ca7 f011          breq strlen1
000ca8 9631          adiw r30,1
000ca9 cffb          rjmp strlen0
                 strlen1:
000caa 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000cab 93ba      	ST   -Y,R27
000cac 93aa      	ST   -Y,R26
000cad 27aa          clr  r26
000cae 27bb          clr  r27
000caf 91e9          ld   r30,y+
000cb0 91f9          ld   r31,y+
                 strlenf0:
000cb1 9005      	lpm  r0,z+
000cb2 2000          tst  r0
000cb3 f011          breq strlenf1
000cb4 9611          adiw r26,1
000cb5 cffb          rjmp strlenf0
                 strlenf1:
000cb6 01fd          movw r30,r26
000cb7 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 _abs:
                 ; .FSTART _abs
000cb8 93ba      	ST   -Y,R27
000cb9 93aa      	ST   -Y,R26
000cba 91e9          ld   r30,y+
000cbb 91f9          ld   r31,y+
000cbc 9730          sbiw r30,0
000cbd f41a          brpl __abs0
000cbe 95e0          com  r30
000cbf 95f0          com  r31
000cc0 9631          adiw r30,1
                 __abs0:
000cc1 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                     .equ __lcd_direction=__lcd_port-1
                     .equ __lcd_pin=__lcd_port-2
                     .equ __lcd_rs=0
                     .equ __lcd_rd=1
                     .equ __lcd_enable=2
                     .equ __lcd_busy_flag=7
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_delay_G103:
                 ; .FSTART __lcd_delay_G103
000cc2 e0ff          ldi   r31,15
                 __lcd_delay0:
000cc3 95fa          dec   r31
000cc4 f7f1          brne  __lcd_delay0
000cc5 9508      	RET
                 ; .FEND
                 __lcd_ready:
                 ; .FSTART __lcd_ready
000cc6 b3a7          in    r26,__lcd_direction
000cc7 70af          andi  r26,0xf                 ;set as input
000cc8 bba7          out   __lcd_direction,r26
000cc9 9ac1          sbi   __lcd_port,__lcd_rd     ;RD=1
000cca 98c0          cbi   __lcd_port,__lcd_rs     ;RS=0
                 __lcd_busy:
000ccb dff6      	RCALL __lcd_delay_G103
000ccc 9ac2          sbi   __lcd_port,__lcd_enable ;EN=1
000ccd dff4      	RCALL __lcd_delay_G103
000cce b3a6          in    r26,__lcd_pin
000ccf 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
000cd0 dff1      	RCALL __lcd_delay_G103
000cd1 9ac2          sbi   __lcd_port,__lcd_enable ;EN=1
000cd2 dfef      	RCALL __lcd_delay_G103
000cd3 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
000cd4 fda7          sbrc  r26,__lcd_busy_flag
000cd5 cff5          rjmp  __lcd_busy
000cd6 9508      	RET
                 ; .FEND
                 __lcd_write_nibble_G103:
                 ; .FSTART __lcd_write_nibble_G103
000cd7 7fa0          andi  r26,0xf0
000cd8 2bab          or    r26,r27
000cd9 bba8          out   __lcd_port,r26          ;write
000cda 9ac2          sbi   __lcd_port,__lcd_enable ;EN=1
000cdb 940e 0cc2 	CALL __lcd_delay_G103
000cdd 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
000cde 940e 0cc2 	CALL __lcd_delay_G103
000ce0 9508      	RET
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000ce1 93aa      	ST   -Y,R26
000ce2 98c1          cbi  __lcd_port,__lcd_rd 	  ;RD=0
000ce3 b3a7          in    r26,__lcd_direction
000ce4 6fa7          ori   r26,0xf0 | (1<<__lcd_rs) | (1<<__lcd_rd) | (1<<__lcd_enable) ;set as output
000ce5 bba7          out   __lcd_direction,r26
000ce6 b3b8          in    r27,__lcd_port
000ce7 70bf          andi  r27,0xf
000ce8 81a8          ld    r26,y
000ce9 dfed      	RCALL __lcd_write_nibble_G103
000cea 81a8          ld    r26,y
000ceb 95a2          swap  r26
000cec dfea      	RCALL __lcd_write_nibble_G103
000ced 9ac1          sbi   __lcd_port,__lcd_rd     ;RD=1
000cee 940c 0db7 	JMP  _0x20C0001
                 ; .FEND
                 __lcd_read_nibble_G103:
                 ; .FSTART __lcd_read_nibble_G103
000cf0 9ac2          sbi   __lcd_port,__lcd_enable ;EN=1
000cf1 940e 0cc2 	CALL __lcd_delay_G103
000cf3 b3e6          in    r30,__lcd_pin           ;read
000cf4 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
000cf5 940e 0cc2 	CALL __lcd_delay_G103
000cf7 7fe0          andi  r30,0xf0
000cf8 9508      	RET
                 ; .FEND
                 _lcd_read_byte0_G103:
                 ; .FSTART _lcd_read_byte0_G103
000cf9 940e 0cc2 	CALL __lcd_delay_G103
000cfb dff4      	RCALL __lcd_read_nibble_G103
000cfc 2fae          mov   r26,r30
000cfd dff2      	RCALL __lcd_read_nibble_G103
000cfe 98c1          cbi   __lcd_port,__lcd_rd     ;RD=0
000cff 95e2          swap  r30
000d00 2bea          or    r30,r26
000d01 9508      	RET
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000d02 93aa      	ST   -Y,R26
000d03 940e 0cc6 	CALL __lcd_ready
000d05 81e8      	LD   R30,Y
000d06 e0f0      	LDI  R31,0
000d07 54e9      	SUBI R30,LOW(-__base_y_G103)
000d08 4ffd      	SBCI R31,HIGH(-__base_y_G103)
000d09 81e0      	LD   R30,Z
000d0a 81a9      	LDD  R26,Y+1
000d0b 0fae      	ADD  R26,R30
000d0c 940e 0ce1 	CALL __lcd_write_data
000d0e 81e9      	LDD  R30,Y+1
000d0f 93e0 02bb 	STS  __lcd_x,R30
000d11 81e8      	LD   R30,Y
000d12 93e0 02bc 	STS  __lcd_y,R30
                 _0x20C0003:
000d14 9622      	ADIW R28,2
000d15 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000d16 940e 0cc6 	CALL __lcd_ready
000d18 e0a2      	LDI  R26,LOW(2)
000d19 940e 0ce1 	CALL __lcd_write_data
000d1b 940e 0cc6 	CALL __lcd_ready
000d1d e0ac      	LDI  R26,LOW(12)
000d1e 940e 0ce1 	CALL __lcd_write_data
000d20 940e 0cc6 	CALL __lcd_ready
000d22 e0a1      	LDI  R26,LOW(1)
000d23 940e 0ce1 	CALL __lcd_write_data
000d25 e0e0      	LDI  R30,LOW(0)
000d26 93e0 02bc 	STS  __lcd_y,R30
000d28 93e0 02bb 	STS  __lcd_x,R30
000d2a 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000d2b 93aa      	ST   -Y,R26
000d2c 93ef          push r30
000d2d 93ff          push r31
000d2e 81a8          ld   r26,y
000d2f 9468          set
000d30 30aa          cpi  r26,10
000d31 f039          breq __lcd_putchar1
000d32 94e8          clt
000d33 91e0 02bd 	LDS  R30,__lcd_maxx
000d35 91a0 02bb 	LDS  R26,__lcd_x
000d37 17ae      	CP   R26,R30
000d38 f058      	BRLO _0x2060004
                 	__lcd_putchar1:
000d39 91e0 02bc 	LDS  R30,__lcd_y
000d3b 5fef      	SUBI R30,-LOW(1)
000d3c 93e0 02bc 	STS  __lcd_y,R30
000d3e e0e0      	LDI  R30,LOW(0)
000d3f 93ea      	ST   -Y,R30
000d40 91a0 02bc 	LDS  R26,__lcd_y
000d42 dfbf      	RCALL _lcd_gotoxy
000d43 f056      	brts __lcd_putchar0
                 _0x2060004:
000d44 91e0 02bb 	LDS  R30,__lcd_x
000d46 5fef      	SUBI R30,-LOW(1)
000d47 93e0 02bb 	STS  __lcd_x,R30
000d49 df7c          rcall __lcd_ready
000d4a 9ac0          sbi  __lcd_port,__lcd_rs ;RS=1
000d4b 81a8      	LD   R26,Y
000d4c 940e 0ce1 	CALL __lcd_write_data
                 __lcd_putchar0:
000d4e 91ff          pop  r31
000d4f 91ef          pop  r30
000d50 940c 0db7 	JMP  _0x20C0001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000d52 93ba      	ST   -Y,R27
000d53 93aa      	ST   -Y,R26
000d54 931a      	ST   -Y,R17
                 _0x2060005:
000d55 81a9      	LDD  R26,Y+1
000d56 81ba      	LDD  R27,Y+1+1
000d57 91ed      	LD   R30,X+
000d58 83a9      	STD  Y+1,R26
000d59 83ba      	STD  Y+1+1,R27
000d5a 2f1e      	MOV  R17,R30
000d5b 30e0      	CPI  R30,0
000d5c f019      	BREQ _0x2060007
000d5d 2fa1      	MOV  R26,R17
000d5e dfcc      	RCALL _lcd_putchar
000d5f cff5      	RJMP _0x2060005
                 _0x2060007:
000d60 c010      	RJMP _0x20C0002
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
000d61 93ba      	ST   -Y,R27
000d62 93aa      	ST   -Y,R26
000d63 931a      	ST   -Y,R17
                 _0x2060008:
000d64 81e9      	LDD  R30,Y+1
000d65 81fa      	LDD  R31,Y+1+1
000d66 9631      	ADIW R30,1
000d67 83e9      	STD  Y+1,R30
000d68 83fa      	STD  Y+1+1,R31
000d69 9731      	SBIW R30,1
000d6a 91e4      	LPM  R30,Z
000d6b 2f1e      	MOV  R17,R30
000d6c 30e0      	CPI  R30,0
000d6d f019      	BREQ _0x206000A
000d6e 2fa1      	MOV  R26,R17
000d6f dfbb      	RCALL _lcd_putchar
000d70 cff3      	RJMP _0x2060008
                 _0x206000A:
                 _0x20C0002:
000d71 8118      	LDD  R17,Y+0
000d72 9623      	ADIW R28,3
000d73 9508      	RET
                 ; .FEND
                 __long_delay_G103:
                 ; .FSTART __long_delay_G103
000d74 27aa          clr   r26
000d75 27bb          clr   r27
                 __long_delay0:
000d76 9711          sbiw  r26,1         ;2 cycles
000d77 f7f1          brne  __long_delay0 ;2 cycles
000d78 9508      	RET
                 ; .FEND
                 __lcd_init_write_G103:
                 ; .FSTART __lcd_init_write_G103
000d79 93aa      	ST   -Y,R26
000d7a 98c1          cbi  __lcd_port,__lcd_rd 	  ;RD=0
000d7b b3a7          in    r26,__lcd_direction
000d7c 6fa7          ori   r26,0xf7                ;set as output
000d7d bba7          out   __lcd_direction,r26
000d7e b3b8          in    r27,__lcd_port
000d7f 70bf          andi  r27,0xf
000d80 81a8          ld    r26,y
000d81 940e 0cd7 	CALL __lcd_write_nibble_G103
000d83 9ac1          sbi   __lcd_port,__lcd_rd     ;RD=1
000d84 c032      	RJMP _0x20C0001
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000d85 93aa      	ST   -Y,R26
000d86 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
000d87 98c0          cbi   __lcd_port,__lcd_rs     ;RS=0
000d88 81e8      	LD   R30,Y
000d89 93e0 02bd 	STS  __lcd_maxx,R30
000d8b 58e0      	SUBI R30,-LOW(128)
                +
000d8c 93e0 02b9+STS __base_y_G103 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G103,2
000d8e 81e8      	LD   R30,Y
000d8f 54e0      	SUBI R30,-LOW(192)
                +
000d90 93e0 02ba+STS __base_y_G103 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G103,3
000d92 940e 0f8d 	CALL SUBOPT_0x46
000d94 940e 0f8d 	CALL SUBOPT_0x46
000d96 940e 0f8d 	CALL SUBOPT_0x46
000d98 dfdb      	RCALL __long_delay_G103
000d99 e2a0      	LDI  R26,LOW(32)
000d9a dfde      	RCALL __lcd_init_write_G103
000d9b dfd8      	RCALL __long_delay_G103
000d9c e2a8      	LDI  R26,LOW(40)
000d9d 940e 0f92 	CALL SUBOPT_0x47
000d9f e0a4      	LDI  R26,LOW(4)
000da0 940e 0f92 	CALL SUBOPT_0x47
000da2 e8a5      	LDI  R26,LOW(133)
000da3 940e 0f92 	CALL SUBOPT_0x47
000da5 b3a7          in    r26,__lcd_direction
000da6 70af          andi  r26,0xf                 ;set as input
000da7 bba7          out   __lcd_direction,r26
000da8 9ac1          sbi   __lcd_port,__lcd_rd     ;RD=1
000da9 940e 0cf9 	CALL _lcd_read_byte0_G103
000dab 30e5      	CPI  R30,LOW(0x5)
000dac f011      	BREQ _0x206000B
000dad e0e0      	LDI  R30,LOW(0)
000dae c008      	RJMP _0x20C0001
                 _0x206000B:
000daf 940e 0cc6 	CALL __lcd_ready
000db1 e0a6      	LDI  R26,LOW(6)
000db2 940e 0ce1 	CALL __lcd_write_data
000db4 940e 0d16 	CALL _lcd_clear
000db6 e0e1      	LDI  R30,LOW(1)
                 _0x20C0001:
000db7 9621      	ADIW R28,1
000db8 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _buff:
000260           	.BYTE 0x21
                 _a:
000281           	.BYTE 0x1
                 _count_btn:
000282           	.BYTE 0x2
                 _count_child_btn:
000284           	.BYTE 0x2
                 _isChildSelect:
000286           	.BYTE 0x1
                 _isTestTombol:
000287           	.BYTE 0x1
                 
                 	.ESEG
                 _garis:
000000           	.BYTE 0xE
                 _back:
00000e           	.BYTE 0xE
                 _tengah:
00001c           	.BYTE 0xE
                 
                 	.DSEG
                 _sen:
000288           	.BYTE 0x7
                 _sensor:
00028f           	.BYTE 0x2
                 _error:
000291           	.BYTE 0x2
                 _lastError:
000293           	.BYTE 0x2
                 _kp:
000295           	.BYTE 0x2
                 _kd:
000297           	.BYTE 0x2
                 _SPEED:
000299           	.BYTE 0x2
                 _MIN_SPEED:
00029b           	.BYTE 0x2
                 _MAX_SPEED:
00029d           	.BYTE 0x2
                 _count:
00029f           	.BYTE 0x2
                 _second:
0002a1           	.BYTE 0x2
                 _positionD:
0002a3           	.BYTE 0x2
                 
                 	.ESEG
                 _mapMirror:
00002a           	.BYTE 0x2
                 
                 	.DSEG
                 _maxHijau:
0002a5           	.BYTE 0x2
                 _maxKuning:
0002a7           	.BYTE 0x2
                 _maxMerah:
0002a9           	.BYTE 0x2
                 _minHijau:
0002ab           	.BYTE 0x2
                 _minKuning:
0002ad           	.BYTE 0x2
                 _minMerah:
0002af           	.BYTE 0x2
                 _isWarna:
0002b1           	.BYTE 0x2
                 __seed_G102:
0002b3           	.BYTE 0x4
                 __base_y_G103:
0002b7           	.BYTE 0x4
                 __lcd_x:
0002bb           	.BYTE 0x1
                 __lcd_y:
0002bc           	.BYTE 0x1
                 __lcd_maxx:
0002bd           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
000db9 e0e7      	LDI  R30,LOW(7)
000dba e0f0      	LDI  R31,HIGH(7)
000dbb 168e      	CP   R8,R30
000dbc 069f      	CPC  R9,R31
000dbd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x1:
000dbe 2da8      	MOV  R26,R8
000dbf 940e 0186 	CALL _read_adc
000dc1 2e0e      	MOV  R0,R30
000dc2 01f4      	MOVW R30,R8
000dc3 e1ac      	LDI  R26,LOW(_tengah)
000dc4 e0b0      	LDI  R27,HIGH(_tengah)
000dc5 0fee      	LSL  R30
000dc6 1fff      	ROL  R31
000dc7 0fae      	ADD  R26,R30
000dc8 1fbf      	ADC  R27,R31
000dc9 940e 0ff9 	CALL __EEPROMRDW
000dcb 2da0      	MOV  R26,R0
000dcc e0b0      	LDI  R27,0
000dcd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2:
000dce 9fea      	MUL  R30,R26
000dcf 01f0      	MOVW R30,R0
                +
000dd0 0f6e     +ADD R22 , R30
000dd1 1f7f     +ADC R23 , R31
                 	__ADDWRR 22,23,30,31
000dd2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 18 TIMES, CODE SIZE REDUCTION:31 WORDS
                 SUBOPT_0x3:
000dd3 93ea      	ST   -Y,R30
000dd4 e0a0      	LDI  R26,LOW(0)
000dd5 940c 0d02 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x4:
000dd7 e6e0      	LDI  R30,LOW(_buff)
000dd8 e0f2      	LDI  R31,HIGH(_buff)
000dd9 93fa      	ST   -Y,R31
000dda 93ea      	ST   -Y,R30
000ddb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x5:
000ddc 27ff      	CLR  R31
000ddd 2766      	CLR  R22
000dde 2777      	CLR  R23
000ddf 940e 0ff4 	CALL __PUTPARD1
000de1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6:
000de2 01f4      	MOVW R30,R8
000de3 e0a0      	LDI  R26,LOW(_garis)
000de4 e0b0      	LDI  R27,HIGH(_garis)
000de5 0fee      	LSL  R30
000de6 1fff      	ROL  R31
000de7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
000de8 e0f0      	LDI  R31,0
000de9 940e 1009 	CALL __EEPROMWRW
000deb e0e0      	LDI  R30,LOW(0)
000dec cfe6      	RJMP SUBOPT_0x3
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x8:
000ded 940e 0d61 	CALL _lcd_putsf
000def e0e0      	LDI  R30,LOW(0)
000df0 93ea      	ST   -Y,R30
000df1 e0a1      	LDI  R26,LOW(1)
000df2 940e 0d02 	CALL _lcd_gotoxy
000df4 cfe2      	RJMP SUBOPT_0x4
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x9:
                +
000df5 e9e9     +LDI R30 , LOW ( 2 * _0x0 + ( 25 ) )
000df6 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 25 ) )
                 	__POINTW1FN _0x0,25
000df7 93fa      	ST   -Y,R31
000df8 93ea      	ST   -Y,R30
000df9 01f4      	MOVW R30,R8
000dfa 940e 0fb4 	CALL __CWD1
000dfc 940e 0ff4 	CALL __PUTPARD1
000dfe 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0xA:
000dff 0fae      	ADD  R26,R30
000e00 1fbf      	ADC  R27,R31
000e01 940e 0ff9 	CALL __EEPROMRDW
000e03 940e 0fb4 	CALL __CWD1
000e05 940e 0ff4 	CALL __PUTPARD1
000e07 e088      	LDI  R24,8
000e08 940e 0c63 	CALL _sprintf
000e0a 962c      	ADIW R28,12
000e0b e6a0      	LDI  R26,LOW(_buff)
000e0c e0b2      	LDI  R27,HIGH(_buff)
000e0d 940e 0d52 	CALL _lcd_puts
000e0f 98c3      	CBI  0x18,3
000e10 e0aa      	LDI  R26,LOW(10)
000e11 e0b0      	LDI  R27,0
000e12 940e 110d 	CALL _delay_ms
000e14 9ac3      	SBI  0x18,3
000e15 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xB:
000e16 01f4      	MOVW R30,R8
000e17 e0ae      	LDI  R26,LOW(_back)
000e18 e0b0      	LDI  R27,HIGH(_back)
000e19 0fee      	LSL  R30
000e1a 1fff      	ROL  R31
000e1b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xC:
000e1c 0fae      	ADD  R26,R30
000e1d 1fbf      	ADC  R27,R31
000e1e 940e 0ff9 	CALL __EEPROMRDW
000e20 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xD:
000e21 940e 0fb4 	CALL __CWD1
000e23 940e 0ff4 	CALL __PUTPARD1
000e25 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0xE:
000e26 93aa      	ST   -Y,R26
000e27 81e8      	LD   R30,Y
000e28 e0f0      	LDI  R31,0
000e29 bdf9      	OUT  0x28+1,R31
000e2a bde8      	OUT  0x28,R30
000e2b 81e9      	LDD  R30,Y+1
000e2c e0f0      	LDI  R31,0
000e2d bdfb      	OUT  0x2A+1,R31
000e2e bdea      	OUT  0x2A,R30
000e2f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xF:
000e30 81a8      	LD   R26,Y
000e31 81b9      	LDD  R27,Y+1
000e32 940e 1022 	CALL __CPW02
000e34 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x10:
000e35 81a8      	LD   R26,Y
000e36 81b9      	LDD  R27,Y+1
000e37 940c 0191 	JMP  _delay
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x11:
000e39 81e8      	LD   R30,Y
000e3a 81f9      	LDD  R31,Y+1
000e3b 940e 0fb4 	CALL __CWD1
000e3d 940e 1092 	CALL __CDF1
000e3f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x12:
000e40 940e 105b 	CALL __CFD1
000e42 93ed      	ST   X+,R30
000e43 93fc      	ST   X,R31
000e44 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x13:
000e45 e6a4      	LDI  R26,LOW(100)
000e46 e0b0      	LDI  R27,0
000e47 940c 02dc 	JMP  _rem
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x14:
000e49 91e0 028f 	LDS  R30,_sensor
000e4b 91f0 0290 	LDS  R31,_sensor+1
000e4d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x15:
000e4e 91e0 029d 	LDS  R30,_MAX_SPEED
000e50 91f0 029e 	LDS  R31,_MAX_SPEED+1
000e52 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x16:
000e53 91e0 029b 	LDS  R30,_MIN_SPEED
000e55 91f0 029c 	LDS  R31,_MIN_SPEED+1
000e57 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x17:
000e58 dff0      	RCALL SUBOPT_0x14
000e59 71ec      	ANDI R30,LOW(0x1C)
000e5a 31ec      	CPI  R30,LOW(0x1C)
000e5b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x18:
000e5c 940e 01e2 	CALL _cek_sensor
000e5e 81aa      	LDD  R26,Y+2
000e5f 81bb      	LDD  R27,Y+2+1
000e60 940c 032b 	JMP  _scan
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x19:
000e62 91ed      	LD   R30,X+
000e63 91fd      	LD   R31,X+
000e64 9631      	ADIW R30,1
000e65 93fe      	ST   -X,R31
000e66 93ee      	ST   -X,R30
000e67 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1A:
000e68 81a8      	LD   R26,Y
000e69 81b9      	LDD  R27,Y+1
000e6a 940c 02dc 	JMP  _rem
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1B:
000e6c 81ea      	LDD  R30,Y+2
000e6d 93ea      	ST   -Y,R30
000e6e 81ab      	LDD  R26,Y+3
000e6f 940e 02ac 	CALL _kiri
000e71 940c 01e2 	JMP  _cek_sensor
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1C:
000e73 81ea      	LDD  R30,Y+2
000e74 93ea      	ST   -Y,R30
000e75 81ab      	LDD  R26,Y+3
000e76 940e 02a5 	CALL _kanan
000e78 940c 01e2 	JMP  _cek_sensor
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1D:
000e7a 93ba      	ST   -Y,R27
000e7b 93aa      	ST   -Y,R26
000e7c e2aa      	LDI  R26,LOW(_mapMirror)
000e7d e0b0      	LDI  R27,HIGH(_mapMirror)
000e7e 940e 0ff9 	CALL __EEPROMRDW
000e80 9730      	SBIW R30,0
000e81 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1E:
000e82 81ea      	LDD  R30,Y+2
000e83 81fb      	LDD  R31,Y+2+1
000e84 93fa      	ST   -Y,R31
000e85 93ea      	ST   -Y,R30
000e86 81aa      	LDD  R26,Y+2
000e87 81bb      	LDD  R27,Y+2+1
000e88 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 23 TIMES, CODE SIZE REDUCTION:41 WORDS
                 SUBOPT_0x1F:
000e89 93ea      	ST   -Y,R30
000e8a e0a1      	LDI  R26,LOW(1)
000e8b 940c 0d02 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:19 WORDS
                 SUBOPT_0x20:
000e8d e0e2      	LDI  R30,LOW(2)
000e8e e0f0      	LDI  R31,HIGH(2)
000e8f 93fa      	ST   -Y,R31
000e90 93ea      	ST   -Y,R30
000e91 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 22 TIMES, CODE SIZE REDUCTION:39 WORDS
                 SUBOPT_0x21:
000e92 e7a8      	LDI  R26,LOW(120)
000e93 e0b0      	LDI  R27,0
000e94 940c 0406 	JMP  _scanX
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 72 TIMES, CODE SIZE REDUCTION:139 WORDS
                 SUBOPT_0x22:
000e96 e0e1      	LDI  R30,LOW(1)
000e97 e0f0      	LDI  R31,HIGH(1)
000e98 93fa      	ST   -Y,R31
000e99 93ea      	ST   -Y,R30
000e9a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 52 TIMES, CODE SIZE REDUCTION:99 WORDS
                 SUBOPT_0x23:
000e9b e6a4      	LDI  R26,LOW(100)
000e9c e0b0      	LDI  R27,0
000e9d 940c 0406 	JMP  _scanX
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 11 TIMES, CODE SIZE REDUCTION:37 WORDS
                 SUBOPT_0x24:
000e9f e0af      	LDI  R26,LOW(15)
000ea0 e0b0      	LDI  R27,0
000ea1 940e 0191 	CALL _delay
000ea3 cff2      	RJMP SUBOPT_0x22
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:112 WORDS
                 SUBOPT_0x25:
000ea4 e5ea      	LDI  R30,LOW(90)
000ea5 e0f0      	LDI  R31,HIGH(90)
000ea6 93fa      	ST   -Y,R31
000ea7 93ea      	ST   -Y,R30
000ea8 e0a5      	LDI  R26,LOW(5)
000ea9 e0b0      	LDI  R27,0
000eaa 940e 0444 	CALL _scanKotak
000eac e1a4      	LDI  R26,LOW(20)
000ead e0b0      	LDI  R27,0
000eae 940e 04c8 	CALL _taruh
000eb0 e6e4      	LDI  R30,LOW(100)
000eb1 93ea      	ST   -Y,R30
000eb2 e6a4      	LDI  R26,LOW(100)
000eb3 940e 029e 	CALL _mundur
000eb5 e2a6      	LDI  R26,LOW(38)
000eb6 e0b0      	LDI  R27,0
000eb7 940e 0191 	CALL _delay
000eb9 e6e4      	LDI  R30,LOW(100)
000eba e0f0      	LDI  R31,HIGH(100)
000ebb 93fa      	ST   -Y,R31
000ebc 93ea      	ST   -Y,R30
000ebd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x26:
000ebe e1a4      	LDI  R26,LOW(20)
000ebf e0b0      	LDI  R27,0
000ec0 940e 04b1 	CALL _belokKiri
000ec2 cfca      	RJMP SUBOPT_0x20
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 48 TIMES, CODE SIZE REDUCTION:91 WORDS
                 SUBOPT_0x27:
000ec3 e6e4      	LDI  R30,LOW(100)
000ec4 e0f0      	LDI  R31,HIGH(100)
000ec5 93fa      	ST   -Y,R31
000ec6 93ea      	ST   -Y,R30
000ec7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x28:
000ec8 940e 04d6 	CALL _bawah_lepas
000eca cfcb      	RJMP SUBOPT_0x22
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 23 TIMES, CODE SIZE REDUCTION:41 WORDS
                 SUBOPT_0x29:
000ecb e1a4      	LDI  R26,LOW(20)
000ecc e0b0      	LDI  R27,0
000ecd 940c 04a6 	JMP  _belokKanan
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 16 TIMES, CODE SIZE REDUCTION:27 WORDS
                 SUBOPT_0x2A:
000ecf e1a4      	LDI  R26,LOW(20)
000ed0 e0b0      	LDI  R27,0
000ed1 940c 04b1 	JMP  _belokKiri
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2B:
000ed3 e0e3      	LDI  R30,LOW(3)
000ed4 e0f0      	LDI  R31,HIGH(3)
000ed5 93fa      	ST   -Y,R31
000ed6 93ea      	ST   -Y,R30
000ed7 cfba      	RJMP SUBOPT_0x21
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:29 WORDS
                 SUBOPT_0x2C:
000ed8 e0a5      	LDI  R26,LOW(5)
000ed9 e0b0      	LDI  R27,0
000eda 940e 04a6 	CALL _belokKanan
000edc cfe6      	RJMP SUBOPT_0x27
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2D:
000edd e5ea      	LDI  R30,LOW(90)
000ede e0f0      	LDI  R31,HIGH(90)
000edf 93fa      	ST   -Y,R31
000ee0 93ea      	ST   -Y,R30
000ee1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x2E:
000ee2 e6e4      	LDI  R30,LOW(100)
000ee3 93ea      	ST   -Y,R30
000ee4 e6a4      	LDI  R26,LOW(100)
000ee5 940e 029e 	CALL _mundur
000ee7 e2a1      	LDI  R26,LOW(33)
000ee8 e0b0      	LDI  R27,0
000ee9 940e 0191 	CALL _delay
000eeb cfd7      	RJMP SUBOPT_0x27
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2F:
000eec e5aa      	LDI  R26,LOW(90)
000eed e0b0      	LDI  R27,0
000eee 940e 0406 	CALL _scanX
000ef0 cfa5      	RJMP SUBOPT_0x22
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x30:
000ef1 e3a2      	LDI  R26,LOW(50)
000ef2 e0b0      	LDI  R27,0
000ef3 940e 042a 	CALL _scanTimer
000ef5 e1a4      	LDI  R26,LOW(20)
000ef6 e0b0      	LDI  R27,0
000ef7 940c 04bd 	JMP  _ambil
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x31:
000ef9 e0a5      	LDI  R26,LOW(5)
000efa e0b0      	LDI  R27,0
000efb 940e 0444 	CALL _scanKotak
000efd e1a4      	LDI  R26,LOW(20)
000efe e0b0      	LDI  R27,0
000eff 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x32:
000f00 91e0 02a3 	LDS  R30,_positionD
000f02 91f0 02a4 	LDS  R31,_positionD+1
000f04 9730      	SBIW R30,0
000f05 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:96 WORDS
                 SUBOPT_0x33:
000f06 e6e4      	LDI  R30,LOW(100)
000f07 93ea      	ST   -Y,R30
000f08 e6a4      	LDI  R26,LOW(100)
000f09 940e 029e 	CALL _mundur
000f0b e2a6      	LDI  R26,LOW(38)
000f0c e0b0      	LDI  R27,0
000f0d 940e 0191 	CALL _delay
000f0f cfb3      	RJMP SUBOPT_0x27
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:19 WORDS
                 SUBOPT_0x34:
000f10 91a0 02a3 	LDS  R26,_positionD
000f12 91b0 02a4 	LDS  R27,_positionD+1
000f14 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x35:
000f15 e5e0      	LDI  R30,LOW(80)
000f16 e0f0      	LDI  R31,HIGH(80)
000f17 93fa      	ST   -Y,R31
000f18 93ea      	ST   -Y,R30
000f19 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x36:
000f1a e3a2      	LDI  R26,LOW(50)
000f1b e0b0      	LDI  R27,0
000f1c 940e 0191 	CALL _delay
000f1e 940e 04f6 	CALL _checkWarna
000f20 93e0 02b1 	STS  _isWarna,R30
000f22 93f0 02b2 	STS  _isWarna+1,R31
000f24 9730      	SBIW R30,0
000f25 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x37:
000f26 91a0 02b1 	LDS  R26,_isWarna
000f28 91b0 02b2 	LDS  R27,_isWarna+1
000f2a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x38:
000f2b 940e 0d16 	CALL _lcd_clear
000f2d e0e0      	LDI  R30,LOW(0)
000f2e cea4      	RJMP SUBOPT_0x3
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x39:
000f2f 940e 0d61 	CALL _lcd_putsf
000f31 e0e0      	LDI  R30,LOW(0)
000f32 cf56      	RJMP SUBOPT_0x1F
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:29 WORDS
                 SUBOPT_0x3A:
000f33 e0e0      	LDI  R30,LOW(0)
000f34 e0f0      	LDI  R31,HIGH(0)
000f35 93fa      	ST   -Y,R31
000f36 93ea      	ST   -Y,R30
000f37 93ea      	ST   -Y,R30
000f38 e0a0      	LDI  R26,LOW(0)
000f39 e0b0      	LDI  R27,0
000f3a 940c 0847 	JMP  _changeMenu
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3B:
000f3c e6a4      	LDI  R26,LOW(100)
000f3d e0b0      	LDI  R27,0
000f3e 940c 0191 	JMP  _delay
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3C:
000f40 e6a4      	LDI  R26,LOW(100)
000f41 e0b0      	LDI  R27,0
000f42 940e 02b3 	CALL _setMotor
000f44 eca8      	LDI  R26,LOW(200)
000f45 e0b0      	LDI  R27,0
000f46 940c 110d 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3D:
000f48 940e 0d61 	CALL _lcd_putsf
000f4a e9ec      	LDI  R30,LOW(65436)
000f4b efff      	LDI  R31,HIGH(65436)
000f4c 93fa      	ST   -Y,R31
000f4d 93ea      	ST   -Y,R30
000f4e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x3E:
000f4f e9ac      	LDI  R26,LOW(65436)
000f50 efbf      	LDI  R27,HIGH(65436)
000f51 940e 02b3 	CALL _setMotor
000f53 eca8      	LDI  R26,LOW(200)
000f54 e0b0      	LDI  R27,0
000f55 940e 110d 	CALL _delay_ms
000f57 e0e0      	LDI  R30,LOW(0)
000f58 cf30      	RJMP SUBOPT_0x1F
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x3F:
000f59 940e 0d61 	CALL _lcd_putsf
000f5b e0e0      	LDI  R30,LOW(0)
000f5c 93e0 0287 	STS  _isTestTombol,R30
000f5e e3a2      	LDI  R26,LOW(50)
000f5f e0b0      	LDI  R27,0
000f60 940c 0191 	JMP  _delay
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x40:
000f62 91e0 0282 	LDS  R30,_count_btn
000f64 91f0 0283 	LDS  R31,_count_btn+1
000f66 93fa      	ST   -Y,R31
000f67 93ea      	ST   -Y,R30
000f68 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x41:
000f69 93ea      	ST   -Y,R30
000f6a 91a0 0284 	LDS  R26,_count_child_btn
000f6c 91b0 0285 	LDS  R27,_count_child_btn+1
000f6e 940c 0847 	JMP  _changeMenu
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x42:
000f70 932a      	ST   -Y,R18
000f71 85ad      	LDD  R26,Y+13
000f72 85be      	LDD  R27,Y+13+1
000f73 85ef      	LDD  R30,Y+15
000f74 89f8      	LDD  R31,Y+15+1
000f75 9509      	ICALL
000f76 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x43:
000f77 89e8      	LDD  R30,Y+16
000f78 89f9      	LDD  R31,Y+16+1
000f79 9734      	SBIW R30,4
000f7a 8be8      	STD  Y+16,R30
000f7b 8bf9      	STD  Y+16+1,R31
000f7c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x44:
000f7d 85ad      	LDD  R26,Y+13
000f7e 85be      	LDD  R27,Y+13+1
000f7f 85ef      	LDD  R30,Y+15
000f80 89f8      	LDD  R31,Y+15+1
000f81 9509      	ICALL
000f82 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x45:
000f83 89a8      	LDD  R26,Y+16
000f84 89b9      	LDD  R27,Y+16+1
000f85 9614      	ADIW R26,4
000f86 91ed      	LD   R30,X+
000f87 91fd      	LD   R31,X+
000f88 83ee      	STD  Y+6,R30
000f89 83ff      	STD  Y+6+1,R31
000f8a 81ae      	LDD  R26,Y+6
000f8b 81bf      	LDD  R27,Y+6+1
000f8c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x46:
000f8d 940e 0d74 	CALL __long_delay_G103
000f8f e3a0      	LDI  R26,LOW(48)
000f90 940c 0d79 	JMP  __lcd_init_write_G103
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x47:
000f92 940e 0ce1 	CALL __lcd_write_data
000f94 940c 0d74 	JMP  __long_delay_G103
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
000f96 935a      	ST   -Y,R21
                 __SAVELOCR5:
000f97 934a      	ST   -Y,R20
                 __SAVELOCR4:
000f98 933a      	ST   -Y,R19
                 __SAVELOCR3:
000f99 932a      	ST   -Y,R18
                 __SAVELOCR2:
000f9a 931a      	ST   -Y,R17
000f9b 930a      	ST   -Y,R16
000f9c 9508      	RET
                 
                 __LOADLOCR6:
000f9d 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000f9e 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000f9f 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000fa0 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000fa1 8119      	LDD  R17,Y+1
000fa2 8108      	LD   R16,Y
000fa3 9508      	RET
                 
                 __ADDW2R15:
000fa4 2400      	CLR  R0
000fa5 0daf      	ADD  R26,R15
000fa6 1db0      	ADC  R27,R0
000fa7 9508      	RET
                 
                 __ANEGW1:
000fa8 95f1      	NEG  R31
000fa9 95e1      	NEG  R30
000faa 40f0      	SBCI R31,0
000fab 9508      	RET
                 
                 __ANEGD1:
000fac 95f0      	COM  R31
000fad 9560      	COM  R22
000fae 9570      	COM  R23
000faf 95e1      	NEG  R30
000fb0 4fff      	SBCI R31,-1
000fb1 4f6f      	SBCI R22,-1
000fb2 4f7f      	SBCI R23,-1
000fb3 9508      	RET
                 
                 __CWD1:
000fb4 2f6f      	MOV  R22,R31
000fb5 0f66      	ADD  R22,R22
000fb6 0b66      	SBC  R22,R22
000fb7 2f76      	MOV  R23,R22
000fb8 9508      	RET
                 
                 __MULW12U:
000fb9 9ffa      	MUL  R31,R26
000fba 2df0      	MOV  R31,R0
000fbb 9feb      	MUL  R30,R27
000fbc 0df0      	ADD  R31,R0
000fbd 9fea      	MUL  R30,R26
000fbe 2de0      	MOV  R30,R0
000fbf 0df1      	ADD  R31,R1
000fc0 9508      	RET
                 
                 __MULW12:
000fc1 d01c      	RCALL __CHKSIGNW
000fc2 dff6      	RCALL __MULW12U
000fc3 f40e      	BRTC __MULW121
000fc4 dfe3      	RCALL __ANEGW1
                 __MULW121:
000fc5 9508      	RET
                 
                 __DIVW21U:
000fc6 2400      	CLR  R0
000fc7 2411      	CLR  R1
000fc8 e190      	LDI  R25,16
                 __DIVW21U1:
000fc9 0faa      	LSL  R26
000fca 1fbb      	ROL  R27
000fcb 1c00      	ROL  R0
000fcc 1c11      	ROL  R1
000fcd 1a0e      	SUB  R0,R30
000fce 0a1f      	SBC  R1,R31
000fcf f418      	BRCC __DIVW21U2
000fd0 0e0e      	ADD  R0,R30
000fd1 1e1f      	ADC  R1,R31
000fd2 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000fd3 60a1      	SBR  R26,1
                 __DIVW21U3:
000fd4 959a      	DEC  R25
000fd5 f799      	BRNE __DIVW21U1
000fd6 01fd      	MOVW R30,R26
000fd7 01d0      	MOVW R26,R0
000fd8 9508      	RET
                 
                 __DIVW21:
000fd9 d004      	RCALL __CHKSIGNW
000fda dfeb      	RCALL __DIVW21U
000fdb f40e      	BRTC __DIVW211
000fdc dfcb      	RCALL __ANEGW1
                 __DIVW211:
000fdd 9508      	RET
                 
                 __CHKSIGNW:
000fde 94e8      	CLT
000fdf fff7      	SBRS R31,7
000fe0 c002      	RJMP __CHKSW1
000fe1 dfc6      	RCALL __ANEGW1
000fe2 9468      	SET
                 __CHKSW1:
000fe3 ffb7      	SBRS R27,7
000fe4 c006      	RJMP __CHKSW2
000fe5 95b1      	NEG  R27
000fe6 95a1      	NEG  R26
000fe7 40b0      	SBCI R27,0
000fe8 f800      	BLD  R0,0
000fe9 9403      	INC  R0
000fea fa00      	BST  R0,0
                 __CHKSW2:
000feb 9508      	RET
                 
                 __GETW1P:
000fec 91ed      	LD   R30,X+
000fed 91fc      	LD   R31,X
000fee 9711      	SBIW R26,1
000fef 9508      	RET
                 
                 __GETW1PF:
000ff0 9005      	LPM  R0,Z+
000ff1 91f4      	LPM  R31,Z
000ff2 2de0      	MOV  R30,R0
000ff3 9508      	RET
                 
                 __PUTPARD1:
000ff4 937a      	ST   -Y,R23
000ff5 936a      	ST   -Y,R22
000ff6 93fa      	ST   -Y,R31
000ff7 93ea      	ST   -Y,R30
000ff8 9508      	RET
                 
                 __EEPROMRDW:
000ff9 9611      	ADIW R26,1
000ffa d002      	RCALL __EEPROMRDB
000ffb 2ffe      	MOV  R31,R30
000ffc 9711      	SBIW R26,1
                 
                 __EEPROMRDB:
000ffd 99e1      	SBIC EECR,EEWE
000ffe cffe      	RJMP __EEPROMRDB
000fff 93ff      	PUSH R31
001000 b7ff      	IN   R31,SREG
001001 94f8      	CLI
001002 bbae      	OUT  EEARL,R26
001003 bbbf      	OUT  EEARH,R27
001004 9ae0      	SBI  EECR,EERE
001005 b3ed      	IN   R30,EEDR
001006 bfff      	OUT  SREG,R31
001007 91ff      	POP  R31
001008 9508      	RET
                 
                 __EEPROMWRW:
001009 d007      	RCALL __EEPROMWRB
00100a 9611      	ADIW R26,1
00100b 93ef      	PUSH R30
00100c 2fef      	MOV  R30,R31
00100d d003      	RCALL __EEPROMWRB
00100e 91ef      	POP  R30
00100f 9711      	SBIW R26,1
001010 9508      	RET
                 
                 __EEPROMWRB:
001011 9be1      	SBIS EECR,EEWE
001012 c002      	RJMP __EEPROMWRB1
001013 95a8      	WDR
001014 cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
001015 b79f      	IN   R25,SREG
001016 94f8      	CLI
001017 bbae      	OUT  EEARL,R26
001018 bbbf      	OUT  EEARH,R27
001019 9ae0      	SBI  EECR,EERE
00101a b38d      	IN   R24,EEDR
00101b 17e8      	CP   R30,R24
00101c f019      	BREQ __EEPROMWRB0
00101d bbed      	OUT  EEDR,R30
00101e 9ae2      	SBI  EECR,EEMWE
00101f 9ae1      	SBI  EECR,EEWE
                 __EEPROMWRB0:
001020 bf9f      	OUT  SREG,R25
001021 9508      	RET
                 
                 __CPW02:
001022 2400      	CLR  R0
001023 160a      	CP   R0,R26
001024 060b      	CPC  R0,R27
001025 9508      	RET
                 
                 __ANEGF1:
001026 9730      	SBIW R30,0
001027 4060      	SBCI R22,0
001028 4070      	SBCI R23,0
001029 f009      	BREQ __ANEGF10
00102a 5870      	SUBI R23,0x80
                 __ANEGF10:
00102b 9508      	RET
                 
                 __ROUND_REPACK:
00102c 2355      	TST  R21
00102d f442      	BRPL __REPACK
00102e 3850      	CPI  R21,0x80
00102f f411      	BRNE __ROUND_REPACK0
001030 ffe0      	SBRS R30,0
001031 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
001032 9631      	ADIW R30,1
001033 1f69      	ADC  R22,R25
001034 1f79      	ADC  R23,R25
001035 f06b      	BRVS __REPACK1
                 
                 __REPACK:
001036 e850      	LDI  R21,0x80
001037 2757      	EOR  R21,R23
001038 f411      	BRNE __REPACK0
001039 935f      	PUSH R21
00103a c073      	RJMP __ZERORES
                 __REPACK0:
00103b 3f5f      	CPI  R21,0xFF
00103c f031      	BREQ __REPACK1
00103d 0f66      	LSL  R22
00103e 0c00      	LSL  R0
00103f 9557      	ROR  R21
001040 9567      	ROR  R22
001041 2f75      	MOV  R23,R21
001042 9508      	RET
                 __REPACK1:
001043 935f      	PUSH R21
001044 2000      	TST  R0
001045 f00a      	BRMI __REPACK2
001046 c072      	RJMP __MAXRES
                 __REPACK2:
001047 c06b      	RJMP __MINRES
                 
                 __UNPACK:
001048 e850      	LDI  R21,0x80
001049 2e19      	MOV  R1,R25
00104a 2215      	AND  R1,R21
00104b 0f88      	LSL  R24
00104c 1f99      	ROL  R25
00104d 2795      	EOR  R25,R21
00104e 0f55      	LSL  R21
00104f 9587      	ROR  R24
                 
                 __UNPACK1:
001050 e850      	LDI  R21,0x80
001051 2e07      	MOV  R0,R23
001052 2205      	AND  R0,R21
001053 0f66      	LSL  R22
001054 1f77      	ROL  R23
001055 2775      	EOR  R23,R21
001056 0f55      	LSL  R21
001057 9567      	ROR  R22
001058 9508      	RET
                 
                 __CFD1U:
001059 9468      	SET
00105a c001      	RJMP __CFD1U0
                 __CFD1:
00105b 94e8      	CLT
                 __CFD1U0:
00105c 935f      	PUSH R21
00105d dff2      	RCALL __UNPACK1
00105e 3870      	CPI  R23,0x80
00105f f018      	BRLO __CFD10
001060 3f7f      	CPI  R23,0xFF
001061 f408      	BRCC __CFD10
001062 c04b      	RJMP __ZERORES
                 __CFD10:
001063 e156      	LDI  R21,22
001064 1b57      	SUB  R21,R23
001065 f4aa      	BRPL __CFD11
001066 9551      	NEG  R21
001067 3058      	CPI  R21,8
001068 f40e      	BRTC __CFD19
001069 3059      	CPI  R21,9
                 __CFD19:
00106a f030      	BRLO __CFD17
00106b efef      	SER  R30
00106c efff      	SER  R31
00106d ef6f      	SER  R22
00106e e77f      	LDI  R23,0x7F
00106f f977      	BLD  R23,7
001070 c01a      	RJMP __CFD15
                 __CFD17:
001071 2777      	CLR  R23
001072 2355      	TST  R21
001073 f0b9      	BREQ __CFD15
                 __CFD18:
001074 0fee      	LSL  R30
001075 1fff      	ROL  R31
001076 1f66      	ROL  R22
001077 1f77      	ROL  R23
001078 955a      	DEC  R21
001079 f7d1      	BRNE __CFD18
00107a c010      	RJMP __CFD15
                 __CFD11:
00107b 2777      	CLR  R23
                 __CFD12:
00107c 3058      	CPI  R21,8
00107d f028      	BRLO __CFD13
00107e 2fef      	MOV  R30,R31
00107f 2ff6      	MOV  R31,R22
001080 2f67      	MOV  R22,R23
001081 5058      	SUBI R21,8
001082 cff9      	RJMP __CFD12
                 __CFD13:
001083 2355      	TST  R21
001084 f031      	BREQ __CFD15
                 __CFD14:
001085 9576      	LSR  R23
001086 9567      	ROR  R22
001087 95f7      	ROR  R31
001088 95e7      	ROR  R30
001089 955a      	DEC  R21
00108a f7d1      	BRNE __CFD14
                 __CFD15:
00108b 2000      	TST  R0
00108c f40a      	BRPL __CFD16
00108d df1e      	RCALL __ANEGD1
                 __CFD16:
00108e 915f      	POP  R21
00108f 9508      	RET
                 
                 __CDF1U:
001090 9468      	SET
001091 c001      	RJMP __CDF1U0
                 __CDF1:
001092 94e8      	CLT
                 __CDF1U0:
001093 9730      	SBIW R30,0
001094 4060      	SBCI R22,0
001095 4070      	SBCI R23,0
001096 f0b1      	BREQ __CDF10
001097 2400      	CLR  R0
001098 f026      	BRTS __CDF11
001099 2377      	TST  R23
00109a f412      	BRPL __CDF11
00109b 9400      	COM  R0
00109c df0f      	RCALL __ANEGD1
                 __CDF11:
00109d 2e17      	MOV  R1,R23
00109e e17e      	LDI  R23,30
00109f 2011      	TST  R1
                 __CDF12:
0010a0 f032      	BRMI __CDF13
0010a1 957a      	DEC  R23
0010a2 0fee      	LSL  R30
0010a3 1fff      	ROL  R31
0010a4 1f66      	ROL  R22
0010a5 1c11      	ROL  R1
0010a6 cff9      	RJMP __CDF12
                 __CDF13:
0010a7 2fef      	MOV  R30,R31
0010a8 2ff6      	MOV  R31,R22
0010a9 2d61      	MOV  R22,R1
0010aa 935f      	PUSH R21
0010ab df8a      	RCALL __REPACK
0010ac 915f      	POP  R21
                 __CDF10:
0010ad 9508      	RET
                 
                 __ZERORES:
0010ae 27ee      	CLR  R30
0010af 27ff      	CLR  R31
0010b0 01bf      	MOVW R22,R30
0010b1 915f      	POP  R21
0010b2 9508      	RET
                 
                 __MINRES:
0010b3 efef      	SER  R30
0010b4 efff      	SER  R31
0010b5 e76f      	LDI  R22,0x7F
0010b6 ef7f      	SER  R23
0010b7 915f      	POP  R21
0010b8 9508      	RET
                 
                 __MAXRES:
0010b9 efef      	SER  R30
0010ba efff      	SER  R31
0010bb e76f      	LDI  R22,0x7F
0010bc e77f      	LDI  R23,0x7F
0010bd 915f      	POP  R21
0010be 9508      	RET
                 
                 __MULF12:
0010bf 935f      	PUSH R21
0010c0 df87      	RCALL __UNPACK
0010c1 3870      	CPI  R23,0x80
0010c2 f359      	BREQ __ZERORES
0010c3 3890      	CPI  R25,0x80
0010c4 f349      	BREQ __ZERORES
0010c5 2401      	EOR  R0,R1
0010c6 9408      	SEC
0010c7 1f79      	ADC  R23,R25
0010c8 f423      	BRVC __MULF124
0010c9 f324      	BRLT __ZERORES
                 __MULF125:
0010ca 2000      	TST  R0
0010cb f33a      	BRMI __MINRES
0010cc cfec      	RJMP __MAXRES
                 __MULF124:
0010cd 920f      	PUSH R0
0010ce 931f      	PUSH R17
0010cf 932f      	PUSH R18
0010d0 933f      	PUSH R19
0010d1 934f      	PUSH R20
0010d2 2711      	CLR  R17
0010d3 2722      	CLR  R18
0010d4 2799      	CLR  R25
0010d5 9f68      	MUL  R22,R24
0010d6 01a0      	MOVW R20,R0
0010d7 9f8f      	MUL  R24,R31
0010d8 2d30      	MOV  R19,R0
0010d9 0d41      	ADD  R20,R1
0010da 1f59      	ADC  R21,R25
0010db 9f6b      	MUL  R22,R27
0010dc 0d30      	ADD  R19,R0
0010dd 1d41      	ADC  R20,R1
0010de 1f59      	ADC  R21,R25
0010df 9f8e      	MUL  R24,R30
0010e0 d027      	RCALL __MULF126
0010e1 9fbf      	MUL  R27,R31
0010e2 d025      	RCALL __MULF126
0010e3 9f6a      	MUL  R22,R26
0010e4 d023      	RCALL __MULF126
0010e5 9fbe      	MUL  R27,R30
0010e6 d01d      	RCALL __MULF127
0010e7 9faf      	MUL  R26,R31
0010e8 d01b      	RCALL __MULF127
0010e9 9fae      	MUL  R26,R30
0010ea 0d11      	ADD  R17,R1
0010eb 1f29      	ADC  R18,R25
0010ec 1f39      	ADC  R19,R25
0010ed 1f49      	ADC  R20,R25
0010ee 1f59      	ADC  R21,R25
0010ef 2fe3      	MOV  R30,R19
0010f0 2ff4      	MOV  R31,R20
0010f1 2f65      	MOV  R22,R21
0010f2 2f52      	MOV  R21,R18
0010f3 914f      	POP  R20
0010f4 913f      	POP  R19
0010f5 912f      	POP  R18
0010f6 911f      	POP  R17
0010f7 900f      	POP  R0
0010f8 2366      	TST  R22
0010f9 f02a      	BRMI __MULF122
0010fa 0f55      	LSL  R21
0010fb 1fee      	ROL  R30
0010fc 1fff      	ROL  R31
0010fd 1f66      	ROL  R22
0010fe c002      	RJMP __MULF123
                 __MULF122:
0010ff 9573      	INC  R23
001100 f24b      	BRVS __MULF125
                 __MULF123:
001101 df2a      	RCALL __ROUND_REPACK
001102 915f      	POP  R21
001103 9508      	RET
                 
                 __MULF127:
001104 0d10      	ADD  R17,R0
001105 1d21      	ADC  R18,R1
001106 1f39      	ADC  R19,R25
001107 c002      	RJMP __MULF128
                 __MULF126:
001108 0d20      	ADD  R18,R0
001109 1d31      	ADC  R19,R1
                 __MULF128:
00110a 1f49      	ADC  R20,R25
00110b 1f59      	ADC  R21,R25
00110c 9508      	RET
                 
                 _delay_ms:
00110d 9610      	adiw r26,0
00110e f039      	breq __delay_ms1
                 __delay_ms0:
00110f 95a8      	wdr
                +
001110 ec8d     +LDI R24 , LOW ( 0xACD )
001111 e09a     +LDI R25 , HIGH ( 0xACD )
                +__DELAY_USW_LOOP :
001112 9701     +SBIW R24 , 1
001113 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xACD
001114 9711      	sbiw r26,1
001115 f7c9      	brne __delay_ms0
                 __delay_ms1:
001116 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  48 r1 :  18 r2 :   0 r3 :   0 r4 :   8 r5 :   4 r6 :   9 r7 :   8 
r8 :  25 r9 :   7 r10:   0 r11:   0 r12:   8 r13:   8 r14:   0 r15:   4 
r16:  43 r17:  38 r18:  38 r19:  17 r20:  23 r21:  66 r22:  46 r23:  37 
r24:  25 r25:  27 r26: 412 r27: 223 r28:  25 r29:   1 r30: 699 r31: 288 
x  :  32 y  : 381 z  :  16 
Registers used: 30 out of 35 (85.7%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  30 add   :  25 
adiw  :  45 and   :   2 andi  :  15 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :  46 
brge  :  16 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  16 
brlt  :   3 brmi  :   5 brne  :  94 brpl  :   6 brsh  :   5 brtc  :   3 
brts  :   2 brvc  :   1 brvs  :   2 bset  :   0 bst   :   1 call  : 611 
cbi   :  34 cbr   :   0 clc   :   0 clh   :   0 cli   :   3 cln   :   0 
clr   :  39 cls   :   0 clt   :   4 clv   :   0 clz   :   0 com   :   6 
cp    :  24 cpc   :  40 cpi   :  93 cpse  :   0 dec   :   6 des   :   0 
eor   :   4 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :  15 inc   :   2 jmp   :  45 ld    :  56 ldd   : 140 ldi   : 547 
lds   :  92 lpm   :  16 lsl   :  15 lsr   :   1 mov   :  58 movw  :  52 
mul   :  16 muls  :   0 mulsu :   0 neg   :   6 nop   :   0 or    :   2 
ori   :   9 out   :  71 pop   :  20 push  :  19 rcall : 113 ret   : 111 
reti  :   2 rjmp  : 212 rol   :  19 ror   :   7 sbc   :   5 sbci  :  10 
sbi   :  34 sbic  :   8 sbis  :   2 sbiw  :  54 sbr   :   1 sbrc  :   3 
sbrs  :  13 sec   :   1 seh   :   0 sei   :   1 sen   :   0 ser   :   8 
ses   :   0 set   :   4 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    : 174 std   :  46 sts   :  45 sub   :   5 subi  :  21 swap  :   2 
tst   :  13 wdr   :   2 
Instructions used: 78 out of 116 (67.2%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00222e   8150    600   8750   32768  26.7%
[.dseg] 0x000060 0x0002be      0     94     94    2048   4.6%
[.eseg] 0x000000 0x00002c      0     44     44    1024   4.3%

Assembly complete, 0 errors, 23 warnings
