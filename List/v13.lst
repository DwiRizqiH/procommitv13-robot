
AVRASM ver. 2.1.30  D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm Mon Nov 20 16:58:05 2023

D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1083): warning: Register r4 already defined by the .DEF directive
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1084): warning: Register r5 already defined by the .DEF directive
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1085): warning: Register r6 already defined by the .DEF directive
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1086): warning: Register r7 already defined by the .DEF directive
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1087): warning: Register r8 already defined by the .DEF directive
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1088): warning: Register r9 already defined by the .DEF directive
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1089): warning: Register r10 already defined by the .DEF directive
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1090): warning: Register r11 already defined by the .DEF directive
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1091): warning: Register r12 already defined by the .DEF directive
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1092): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.40 Advanced
                 ;(C) Copyright 1998-2020 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Release
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 11,059200 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Mode 1
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _hitung=R4
                 	.DEF _hitung_msb=R5
                 	.DEF _mulai=R6
                 	.DEF _mulai_msb=R7
                 	.DEF _nadc7=R8
                 	.DEF _nadc7_msb=R9
                 	.DEF _nilai_warna=R10
                 	.DEF _nilai_warna_msb=R11
                 	.DEF _i=R12
                 	.DEF _i_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0135 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 096d 	JMP  _timer0_comp_isr
000016 940c 0942 	JMP  _timer0_ovf_isr
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000033 0000      	.DW  0x0000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000034 0000
000035 0000      	.DB  0x0,0x0,0x0,0x0
000036 0000
000037 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 _0x6:
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1139): warning: .cseg .db misalignment - padding zero byte
000038 00aa      	.DB  0xAA
                 _0x7:
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1141): warning: .cseg .db misalignment - padding zero byte
000039 0001      	.DB  0x1
                 _0x8:
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1143): warning: .cseg .db misalignment - padding zero byte
00003a 000a      	.DB  0xA
                 _0x9:
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1145): warning: .cseg .db misalignment - padding zero byte
00003b 0064      	.DB  0x64
                 _0xA:
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1147): warning: .cseg .db misalignment - padding zero byte
00003c 00c8      	.DB  0xC8
                 _0xB:
00003d ff60      	.DB  0x60,0xFF
                 _0xC:
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1151): warning: .cseg .db misalignment - padding zero byte
00003e 00c8      	.DB  0xC8
                 _0xE0:
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1153): warning: .cseg .db misalignment - padding zero byte
00003f 00d7      	.DB  0xD7
                 _0xE1:
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1155): warning: .cseg .db misalignment - padding zero byte
000040 0064      	.DB  0x64
                 _0xE2:
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1157): warning: .cseg .db misalignment - padding zero byte
000041 00b4      	.DB  0xB4
                 _0xE3:
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1159): warning: .cseg .db misalignment - padding zero byte
000042 00be      	.DB  0xBE
                 _0xE4:
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1161): warning: .cseg .db misalignment - padding zero byte
000043 0078      	.DB  0x78
                 _0x0:
000044 6425
000045 6425
000046 6425
000047 6425      	.DB  0x25,0x64,0x25,0x64,0x25,0x64,0x25,0x64
000048 6425
000049 6425
00004a 6425
00004b 4200      	.DB  0x25,0x64,0x25,0x64,0x25,0x64,0x0,0x42
00004c 6361
00004d 2061
00004e 694c
00004f 656e      	.DB  0x61,0x63,0x61,0x20,0x4C,0x69,0x6E,0x65
000050 7300
000051 6e65
000052 6f73
000053 3a72      	.DB  0x0,0x73,0x65,0x6E,0x73,0x6F,0x72,0x3A
000054 6425
000055 3d20
000056 2520
000057 2064      	.DB  0x25,0x64,0x20,0x3D,0x20,0x25,0x64,0x20
000058 0020
000059 6142
00005a 6163
00005b 4220      	.DB  0x20,0x0,0x42,0x61,0x63,0x61,0x20,0x42
00005c 6361
00005d 676b
00005e 6f72
00005f 6e75      	.DB  0x61,0x63,0x6B,0x67,0x72,0x6F,0x75,0x6E
000060 0064
000061 6543
000062 746e
000063 7265      	.DB  0x64,0x0,0x43,0x65,0x6E,0x74,0x65,0x72
000064 5020
000065 696f
000066 746e
000067 2020      	.DB  0x20,0x50,0x6F,0x69,0x6E,0x74,0x20,0x20
000068 2020
000069 7300
00006a 6e65
00006b 6f73      	.DB  0x20,0x20,0x0,0x73,0x65,0x6E,0x73,0x6F
00006c 3a72
00006d 6425
00006e 2d20
00006f 3e2d      	.DB  0x72,0x3A,0x25,0x64,0x20,0x2D,0x2D,0x3E
000070 2520
000071 2064
000072 0020
000073 6425      	.DB  0x20,0x25,0x64,0x20,0x20,0x0,0x25,0x64
000074 2020
000075 0020
000076 654d
000077 756e      	.DB  0x20,0x20,0x20,0x0,0x4D,0x65,0x6E,0x75
000078 4300
000079 6c61
00007a 6269
00007b 6172      	.DB  0x0,0x43,0x61,0x6C,0x69,0x62,0x72,0x61
00007c 6974
00007d 6e6f
00007e 5200
00007f 6e75      	.DB  0x74,0x69,0x6F,0x6E,0x0,0x52,0x75,0x6E
000080 4220
000081 746f
000082 4d00
000083 7061      	.DB  0x20,0x42,0x6F,0x74,0x0,0x4D,0x61,0x70
000084 4d00
000085 746f
000086 726f
000087 4200      	.DB  0x0,0x4D,0x6F,0x74,0x6F,0x72,0x0,0x42
000088 7475
000089 6f74
00008a 006e
00008b 6c43      	.DB  0x75,0x74,0x74,0x6F,0x6E,0x0,0x43,0x6C
00008c 7061
00008d 5820
00008e 0044
00008f 6c43      	.DB  0x61,0x70,0x20,0x58,0x44,0x0,0x43,0x6C
000090 6369
000091 206b
000092 2032
000093 6f74      	.DB  0x69,0x63,0x6B,0x20,0x32,0x20,0x74,0x6F
000094 7320
000095 6174
000096 7472
000097 5200      	.DB  0x20,0x73,0x74,0x61,0x72,0x74,0x0,0x52
000098 6e75
000099 696e
00009a 676e
00009b 2e2e      	.DB  0x75,0x6E,0x6E,0x69,0x6E,0x67,0x2E,0x2E
00009c 002e
00009d 614d
00009e 2070
00009f 6942      	.DB  0x2E,0x0,0x4D,0x61,0x70,0x20,0x42,0x69
0000a0 7572
0000a1 4300
0000a2 696c
0000a3 6b63      	.DB  0x72,0x75,0x0,0x43,0x6C,0x69,0x63,0x6B
0000a4 3220
0000a5 7420
0000a6 206f
0000a7 6573      	.DB  0x20,0x32,0x20,0x74,0x6F,0x20,0x73,0x65
0000a8 656c
0000a9 7463
0000aa 4d00
0000ab 7061      	.DB  0x6C,0x65,0x63,0x74,0x0,0x4D,0x61,0x70
0000ac 4d20
0000ad 7265
0000ae 6861
0000af 5400      	.DB  0x20,0x4D,0x65,0x72,0x61,0x68,0x0,0x54
0000b0 7365
0000b1 2074
0000b2 6f4d
0000b3 6f74      	.DB  0x65,0x73,0x74,0x20,0x4D,0x6F,0x74,0x6F
0000b4 0072
0000b5 312b
0000b6 3030
0000b7 2b20      	.DB  0x72,0x0,0x2B,0x31,0x30,0x30,0x20,0x2B
0000b8 3031
0000b9 0030
0000ba 312d
0000bb 3030      	.DB  0x31,0x30,0x30,0x0,0x2D,0x31,0x30,0x30
0000bc 2d20
0000bd 3031
0000be 0030
0000bf 312b      	.DB  0x20,0x2D,0x31,0x30,0x30,0x0,0x2B,0x31
0000c0 3030
0000c1 2d20
0000c2 3031
0000c3 0030      	.DB  0x30,0x30,0x20,0x2D,0x31,0x30,0x30,0x0
0000c4 312d
0000c5 3030
0000c6 2b20
0000c7 3031      	.DB  0x2D,0x31,0x30,0x30,0x20,0x2B,0x31,0x30
0000c8 0030
0000c9 6c43
0000ca 6369
0000cb 206b      	.DB  0x30,0x0,0x43,0x6C,0x69,0x63,0x6B,0x20
0000cc 2031
0000cd 6f74
0000ce 6520
0000cf 6978      	.DB  0x31,0x20,0x74,0x6F,0x20,0x65,0x78,0x69
0000d0 0074
0000d1 6f74
0000d2 626d
0000d3 6c6f      	.DB  0x74,0x0,0x74,0x6F,0x6D,0x62,0x6F,0x6C
0000d4 3d20
0000d5 3120
0000d6 2020
0000d7 2020      	.DB  0x20,0x3D,0x20,0x31,0x20,0x20,0x20,0x20
0000d8 0020
0000d9 6f74
0000da 626d
0000db 6c6f      	.DB  0x20,0x0,0x74,0x6F,0x6D,0x62,0x6F,0x6C
0000dc 3d20
0000dd 3220
0000de 2020
0000df 2020      	.DB  0x20,0x3D,0x20,0x32,0x20,0x20,0x20,0x20
0000e0 0020
0000e1 6f74
0000e2 626d
0000e3 6c6f      	.DB  0x20,0x0,0x74,0x6F,0x6D,0x62,0x6F,0x6C
0000e4 3d20
0000e5 3320
0000e6 2020
0000e7 2020      	.DB  0x20,0x3D,0x20,0x33,0x20,0x20,0x20,0x20
0000e8 0020
0000e9 6f74
0000ea 626d
0000eb 6c6f      	.DB  0x20,0x0,0x74,0x6F,0x6D,0x62,0x6F,0x6C
0000ec 3d20
0000ed 3420
0000ee 2020
0000ef 2020      	.DB  0x20,0x3D,0x20,0x34,0x20,0x20,0x20,0x20
0000f0 0020
0000f1 6f48
0000f2 646c
0000f3 3120      	.DB  0x20,0x0,0x48,0x6F,0x6C,0x64,0x20,0x31
0000f4 7420
0000f5 206f
0000f6 7865
0000f7 7469      	.DB  0x20,0x74,0x6F,0x20,0x65,0x78,0x69,0x74
0000f8 4c00
0000f9 4745
0000fa 4f49
0000fb 004e      	.DB  0x0,0x4C,0x45,0x47,0x49,0x4F,0x4E,0x0
0000fc 414d
0000fd 204e
0000fe 2034
0000ff 4f4a      	.DB  0x4D,0x41,0x4E,0x20,0x34,0x20,0x4A,0x4F
000100 424d
000101 4e41
000102 0047      	.DB  0x4D,0x42,0x41,0x4E,0x47,0x0
                 _0x2040060:
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1212): warning: .cseg .db misalignment - padding zero byte
000103 0001      	.DB  0x1
                 _0x2040000:
000104 4e2d
000105 4e41
000106 4900
000107 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1215): warning: .cseg .db misalignment - padding zero byte
000108 0000      	.DB  0x0
                 _0x2060003:
000109 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00010a 0001      	.DW  0x01
00010b 0002      	.DW  0x02
00010c 0066      	.DW  __REG_BIT_VARS*2
                 
00010d 0008      	.DW  0x08
00010e 0004      	.DW  0x04
00010f 0068      	.DW  __REG_VARS*2
                 
000110 0001      	.DW  0x01
000111 029c      	.DW  _kp
000112 0074      	.DW  _0x8*2
                 
000113 0001      	.DW  0x01
000114 029e      	.DW  _kd
000115 0076      	.DW  _0x9*2
                 
000116 0001      	.DW  0x01
000117 02a0      	.DW  _SPEED
000118 0078      	.DW  _0xA*2
                 
000119 0002      	.DW  0x02
00011a 02a2      	.DW  _MIN_SPEED
00011b 007a      	.DW  _0xB*2
                 
00011c 0001      	.DW  0x01
00011d 02a4      	.DW  _MAX_SPEED
00011e 007c      	.DW  _0xC*2
                 
00011f 0001      	.DW  0x01
000120 02aa      	.DW  _maxHijau
000121 007e      	.DW  _0xE0*2
                 
000122 0001      	.DW  0x01
000123 02ac      	.DW  _maxKuning
000124 0080      	.DW  _0xE1*2
                 
000125 0001      	.DW  0x01
000126 02ae      	.DW  _maxMerah
000127 0082      	.DW  _0xE2*2
                 
000128 0001      	.DW  0x01
000129 02b0      	.DW  _minHijau
00012a 0084      	.DW  _0xE3*2
                 
00012b 0001      	.DW  0x01
00012c 02b4      	.DW  _minMerah
00012d 0086      	.DW  _0xE4*2
                 
00012e 0001      	.DW  0x01
00012f 02b8      	.DW  __seed_G102
000130 0206      	.DW  _0x2040060*2
                 
000131 0002      	.DW  0x02
000132 02bc      	.DW  __base_y_G103
000133 0212      	.DW  _0x2060003*2
                 
                 _0xFFFFFFFF:
000134 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000135 94f8      	CLI
000136 27ee      	CLR  R30
000137 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000138 e0f1      	LDI  R31,1
000139 bffb      	OUT  GICR,R31
00013a bfeb      	OUT  GICR,R30
00013b bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
00013c e1f8      	LDI  R31,0x18
00013d bdf1      	OUT  WDTCR,R31
00013e bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
00013f e08d      	LDI  R24,(14-2)+1
000140 e0a2      	LDI  R26,2
000141 27bb      	CLR  R27
                 __CLEAR_REG:
000142 93ed      	ST   X+,R30
000143 958a      	DEC  R24
000144 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000145 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000146 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000147 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000148 93ed      	ST   X+,R30
000149 9701      	SBIW R24,1
00014a f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00014b e1e4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00014c e0f2      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00014d 9185      	LPM  R24,Z+
00014e 9195      	LPM  R25,Z+
00014f 9700      	SBIW R24,0
000150 f061      	BREQ __GLOBAL_INI_END
000151 91a5      	LPM  R26,Z+
000152 91b5      	LPM  R27,Z+
000153 9005      	LPM  R0,Z+
000154 9015      	LPM  R1,Z+
000155 01bf      	MOVW R22,R30
000156 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000157 9005      	LPM  R0,Z+
000158 920d      	ST   X+,R0
000159 9701      	SBIW R24,1
00015a f7e1      	BRNE __GLOBAL_INI_LOOP
00015b 01fb      	MOVW R30,R22
00015c cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00015d e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00015e bfed      	OUT  SPL,R30
00015f e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000160 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000161 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000162 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000163 940c 096e 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                    .equ __lcd_port=0x18 ;PORTB
                 ; 0000 002F #endasm
                 ;unsigned char read_adc(unsigned char adc_input)
                 ; 0000 0036 {
                 
                 	.CSEG
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 0037 ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
000165 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
000166 81e8      	LD   R30,Y
000167 66e0      	ORI  R30,LOW(0x60)
000168 b9e7      	OUT  0x7,R30
                 ; 0000 0038 // Start the AD conversion
                 ; 0000 0039 ADCSRA|=0x40;
000169 9a36      	SBI  0x6,6
                 ; 0000 003A // Wait for the AD conversion to complete
                 ; 0000 003B while ((ADCSRA & 0x10)==0);
                 _0x3:
00016a 9b34      	SBIS 0x6,4
00016b cffe      	RJMP _0x3
                 ; 0000 003C ADCSRA|=0x10;
00016c 9a34      	SBI  0x6,4
                 ; 0000 003D return ADCH;
00016d b1e5      	IN   R30,0x5
00016e 9621      	ADIW R28,1
00016f 9508      	RET
                 ; 0000 003E }
                 ; .FEND
                 ;int hitung = 0, mulai = 0;
                 ;unsigned int nadc7 = 0, nilai_warna = 0;
                 ;int buttonhold[4] = {0, 0, 0, 0};
                 ;char buff[33];
                 ;int i, j, k, rka = 0, rki = 0, k_mtr = 170;
                 
                 	.DSEG
                 ;bit x, kondisi;
                 ;unsigned char kecepatanki = 0, kecepatanka = 0;
                 ;unsigned char pos_servo1, pos_servo2, pos_gulung, a, pos_led1, pos_led2;
                 ;char simpan;
                 ;int capit = 0, angkat = 0, _maju = 0, _mundur = 0, mode_kec = 0;
                 ;char arr[16], irr[16];
                 ;int push = 1;
                 ;int count_btn = 0;
                 ;int count_child_btn = 0;
                 ;bool isChildSelect = false;
                 ;bool isTestTombol = false;
                 ;int positionD = 0;
                 ;eeprom int garis[7], back[7], tengah[7], mapMirror[1];
                 ;char sen[7];
                 ;int sensor;
                 ;int error = 0;
                 ;int lastError = 0;
                 ;int kp = 10;
                 ;int kd = 100;
                 ;int SPEED = 200;
                 ;int MIN_SPEED = -160;
                 ;int MAX_SPEED = 200;
                 ;int count = 0;
                 ;int second = 0;
                 ;void delay(int ms)
                 ; 0000 0067 {
                 
                 	.CSEG
                 _delay:
                 ; .FSTART _delay
                 ;delay_ms(ms);
000170 93ba      	ST   -Y,R27
000171 93aa      	ST   -Y,R26
                 ;	ms -> Y+0
000172 81a8      	LD   R26,Y
000173 81b9      	LDD  R27,Y+1
000174 940e 1073 	CALL _delay_ms
000176 c327      	RJMP _0x20C000D
                 ; .FEND
                 ;void lcd_kedip(int ulangi)
                 ;for(i = 0; i < ulangi; i++)
                 ;	ulangi -> Y+0
                 ;lampu=0;
                 ;delay_ms(100);
                 ;lampu=1;
                 ;delay_ms(100);
                 ;void konvert_logic()
                 ; 0000 0068 {
                 _konvert_logic:
                 ; .FSTART _konvert_logic
                 ;for(i = 0; i < 7; i++)
000177 24cc      	CLR  R12
000178 24dd      	CLR  R13
                 _0x15:
000179 940e 0ceb 	CALL SUBOPT_0x0
00017b f4d4      	BRGE _0x16
                 ;if(read_adc(i) > tengah[i]) {
00017c 940e 0cf0 	CALL SUBOPT_0x1
00017e 17ea      	CP   R30,R26
00017f 07fb      	CPC  R31,R27
000180 f434      	BRGE _0x17
                 ;sen[i]=1;
000181 e8af      	LDI  R26,LOW(_sen)
000182 e0b2      	LDI  R27,HIGH(_sen)
000183 0dac      	ADD  R26,R12
000184 1dbd      	ADC  R27,R13
000185 e0e1      	LDI  R30,LOW(1)
000186 c00a      	RJMP _0x17B
                 ;else if(read_adc(i) < tengah[i]) {
                 _0x17:
000187 940e 0cf0 	CALL SUBOPT_0x1
000189 17ae      	CP   R26,R30
00018a 07bf      	CPC  R27,R31
00018b f434      	BRGE _0x19
                 ;sen[i]=0;
00018c e8af      	LDI  R26,LOW(_sen)
00018d e0b2      	LDI  R27,HIGH(_sen)
00018e 0dac      	ADD  R26,R12
00018f 1dbd      	ADC  R27,R13
000190 e0e0      	LDI  R30,LOW(0)
                 _0x17B:
000191 93ec      	ST   X,R30
                 _0x19:
000192 01f6      	MOVW R30,R12
000193 9631      	ADIW R30,1
000194 016f      	MOVW R12,R30
000195 cfe3      	RJMP _0x15
                 _0x16:
000196 9508      	RET
                 ; .FEND
                 ;void logika()
                 _logika:
                 ; .FSTART _logika
                 ;sensor = (sen[6] * 64) + (sen[5] * 32) + (sen[4] * 16) + (sen[3] * 8) + (sen[2]  ...
                +
000197 91a0 0295+LDS R26 , _sen + ( 6 )
                 	__GETB2MN _sen,6
000199 e4e0      	LDI  R30,LOW(64)
00019a 9fea      	MUL  R30,R26
00019b 01b0      	MOVW R22,R0
                +
00019c 91a0 0294+LDS R26 , _sen + ( 5 )
                 	__GETB2MN _sen,5
00019e e2e0      	LDI  R30,LOW(32)
00019f 940e 0d00 	CALL SUBOPT_0x2
                +
0001a1 91a0 0293+LDS R26 , _sen + ( 4 )
                 	__GETB2MN _sen,4
0001a3 e1e0      	LDI  R30,LOW(16)
0001a4 940e 0d00 	CALL SUBOPT_0x2
                +
0001a6 91a0 0292+LDS R26 , _sen + ( 3 )
                 	__GETB2MN _sen,3
0001a8 e0e8      	LDI  R30,LOW(8)
0001a9 940e 0d00 	CALL SUBOPT_0x2
                +
0001ab 91a0 0291+LDS R26 , _sen + ( 2 )
                 	__GETB2MN _sen,2
0001ad e0e4      	LDI  R30,LOW(4)
0001ae 940e 0d00 	CALL SUBOPT_0x2
                +
0001b0 91a0 0290+LDS R26 , _sen + ( 1 )
                 	__GETB2MN _sen,1
0001b2 e0e2      	LDI  R30,LOW(2)
0001b3 940e 0d00 	CALL SUBOPT_0x2
0001b5 91a0 028f 	LDS  R26,_sen
0001b7 e0e1      	LDI  R30,LOW(1)
0001b8 9fea      	MUL  R30,R26
0001b9 01f0      	MOVW R30,R0
0001ba 0fe6      	ADD  R30,R22
0001bb 1ff7      	ADC  R31,R23
0001bc 93e0 0296 	STS  _sensor,R30
0001be 93f0 0297 	STS  _sensor+1,R31
0001c0 9508      	RET
                 ; .FEND
                 ;void cek_sensor()
                 _cek_sensor:
                 ; .FSTART _cek_sensor
                 ;konvert_logic();
0001c1 dfb5      	RCALL _konvert_logic
                 ;logika();
0001c2 dfd4      	RCALL _logika
0001c3 9508      	RET
                 ; .FEND
                 ;void display_sensor()
                 _display_sensor:
                 ; .FSTART _display_sensor
                 ;konvert_logic();
0001c4 dfb2      	RCALL _konvert_logic
                 ;lcd_gotoxy(9, 0);
0001c5 e0e9      	LDI  R30,LOW(9)
0001c6 940e 0d05 	CALL SUBOPT_0x3
                 ;sprintf(buff, "%d%d%d%d%d%d%d", sen[0] , sen[1] , sen[2], sen[3], sen[4], sen[5] ...
0001c8 940e 0d09 	CALL SUBOPT_0x4
                +
0001ca e8e8     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0001cb e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0001cc 93fa      	ST   -Y,R31
0001cd 93ea      	ST   -Y,R30
0001ce 91e0 028f 	LDS  R30,_sen
0001d0 940e 0d0e 	CALL SUBOPT_0x5
                +
0001d2 91e0 0290+LDS R30 , _sen + ( 1 )
                 	__GETB1MN _sen,1
0001d4 940e 0d0e 	CALL SUBOPT_0x5
                +
0001d6 91e0 0291+LDS R30 , _sen + ( 2 )
                 	__GETB1MN _sen,2
0001d8 940e 0d0e 	CALL SUBOPT_0x5
                +
0001da 91e0 0292+LDS R30 , _sen + ( 3 )
                 	__GETB1MN _sen,3
0001dc 940e 0d0e 	CALL SUBOPT_0x5
                +
0001de 91e0 0293+LDS R30 , _sen + ( 4 )
                 	__GETB1MN _sen,4
0001e0 940e 0d0e 	CALL SUBOPT_0x5
                +
0001e2 91e0 0294+LDS R30 , _sen + ( 5 )
                 	__GETB1MN _sen,5
0001e4 940e 0d0e 	CALL SUBOPT_0x5
                +
0001e6 91e0 0295+LDS R30 , _sen + ( 6 )
                 	__GETB1MN _sen,6
0001e8 940e 0d0e 	CALL SUBOPT_0x5
0001ea e18c      	LDI  R24,28
0001eb 940e 0b95 	CALL _sprintf
0001ed 96a0      	ADIW R28,32
                 ;lcd_puts(buff);
0001ee c2ce      	RJMP _0x20C000C
                 ; .FEND
                 ;void scan_garis()
                 _scan_garis:
                 ; .FSTART _scan_garis
                 ;for (i = 0; i < 7; i++)
0001ef 24cc      	CLR  R12
0001f0 24dd      	CLR  R13
                 _0x1B:
0001f1 940e 0ceb 	CALL SUBOPT_0x0
0001f3 f4d4      	BRGE _0x1C
                 ;garis[i] = read_adc(i);
0001f4 940e 0d14 	CALL SUBOPT_0x6
0001f6 0fea      	ADD  R30,R26
0001f7 1ffb      	ADC  R31,R27
0001f8 93ff      	PUSH R31
0001f9 93ef      	PUSH R30
0001fa 2dac      	MOV  R26,R12
0001fb df69      	RCALL _read_adc
0001fc 91af      	POP  R26
0001fd 91bf      	POP  R27
0001fe 940e 0d1a 	CALL SUBOPT_0x7
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Baca Line");
                +
000200 e9a7     +LDI R26 , LOW ( 2 * _0x0 + ( 15 ) )
000201 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 15 ) )
                 	__POINTW2FN _0x0,15
000202 940e 0d1f 	CALL SUBOPT_0x8
                 ;lcd_gotoxy(0, 1);
                 ;sprintf(buff, "sensor:%d = %d  ", i, garis[i]);
000204 940e 0d27 	CALL SUBOPT_0x9
000206 940e 0d14 	CALL SUBOPT_0x6
000208 940e 0d31 	CALL SUBOPT_0xA
                 ;lcd_puts(buff);
                 ;lampu = 0;
                 ;delay_ms(10);
                 ;lampu = 1;
00020a 01f6      	MOVW R30,R12
00020b 9631      	ADIW R30,1
00020c 016f      	MOVW R12,R30
00020d cfe3      	RJMP _0x1B
                 _0x1C:
00020e 9508      	RET
                 ; .FEND
                 ;void scan_back()
                 _scan_back:
                 ; .FSTART _scan_back
                 ;for (i = 0; i < 7; i++)
00020f 24cc      	CLR  R12
000210 24dd      	CLR  R13
                 _0x22:
000211 940e 0ceb 	CALL SUBOPT_0x0
000213 f4d4      	BRGE _0x23
                 ;back[i] = read_adc(i);
000214 940e 0d48 	CALL SUBOPT_0xB
000216 0fea      	ADD  R30,R26
000217 1ffb      	ADC  R31,R27
000218 93ff      	PUSH R31
000219 93ef      	PUSH R30
00021a 2dac      	MOV  R26,R12
00021b df49      	RCALL _read_adc
00021c 91af      	POP  R26
00021d 91bf      	POP  R27
00021e 940e 0d1a 	CALL SUBOPT_0x7
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Baca Background");
                +
000220 eba2     +LDI R26 , LOW ( 2 * _0x0 + ( 42 ) )
000221 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 42 ) )
                 	__POINTW2FN _0x0,42
000222 940e 0d1f 	CALL SUBOPT_0x8
                 ;lcd_gotoxy(0, 1);
                 ;sprintf(buff, "sensor:%d = %d  ", i, back[i]);
000224 940e 0d27 	CALL SUBOPT_0x9
000226 940e 0d48 	CALL SUBOPT_0xB
000228 940e 0d31 	CALL SUBOPT_0xA
                 ;lcd_puts(buff);
                 ;lampu = 0;
                 ;delay_ms(10);
                 ;lampu = 1;
00022a 01f6      	MOVW R30,R12
00022b 9631      	ADIW R30,1
00022c 016f      	MOVW R12,R30
00022d cfe3      	RJMP _0x22
                 _0x23:
00022e 9508      	RET
                 ; .FEND
                 ;void hit_tengah()
                 _hit_tengah:
                 ; .FSTART _hit_tengah
                 ;for (i = 0; i < 7; i++)
00022f 24cc      	CLR  R12
000230 24dd      	CLR  R13
                 _0x29:
000231 940e 0ceb 	CALL SUBOPT_0x0
000233 f00c      	BRLT PC+2
000234 c044      	RJMP _0x2A
                 ;tengah[i] = (back[i] + garis[i]) / 2;
000235 01f6      	MOVW R30,R12
000236 e1ac      	LDI  R26,LOW(_tengah)
000237 e0b0      	LDI  R27,HIGH(_tengah)
000238 0fee      	LSL  R30
000239 1fff      	ROL  R31
00023a 0fea      	ADD  R30,R26
00023b 1ffb      	ADC  R31,R27
00023c 01bf      	MOVW R22,R30
00023d 940e 0d48 	CALL SUBOPT_0xB
00023f 940e 0d4e 	CALL SUBOPT_0xC
000241 010f      	MOVW R0,R30
000242 940e 0d14 	CALL SUBOPT_0x6
000244 940e 0d4e 	CALL SUBOPT_0xC
000246 01d0      	MOVW R26,R0
000247 0fae      	ADD  R26,R30
000248 1fbf      	ADC  R27,R31
000249 e0e2      	LDI  R30,LOW(2)
00024a e0f0      	LDI  R31,HIGH(2)
00024b 940e 0f3f 	CALL __DIVW21
00024d 01db      	MOVW R26,R22
00024e 940e 0f6f 	CALL __EEPROMWRW
                 ;lcd_gotoxy(0, 0);
000250 e0e0      	LDI  R30,LOW(0)
000251 940e 0d05 	CALL SUBOPT_0x3
                 ;lcd_putsf("Center Point    ");
                +
000253 eca2     +LDI R26 , LOW ( 2 * _0x0 + ( 58 ) )
000254 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 58 ) )
                 	__POINTW2FN _0x0,58
000255 940e 0d1f 	CALL SUBOPT_0x8
                 ;lcd_gotoxy(0, 1);
                 ;sprintf(buff, "sensor:%d --> %d  ", i, tengah[i]);
                +
000257 ede3     +LDI R30 , LOW ( 2 * _0x0 + ( 75 ) )
000258 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 75 ) )
                 	__POINTW1FN _0x0,75
000259 93fa      	ST   -Y,R31
00025a 93ea      	ST   -Y,R30
00025b 01f6      	MOVW R30,R12
00025c 940e 0f1a 	CALL __CWD1
00025e 940e 0f5a 	CALL __PUTPARD1
000260 01f6      	MOVW R30,R12
000261 e1ac      	LDI  R26,LOW(_tengah)
000262 e0b0      	LDI  R27,HIGH(_tengah)
000263 0fee      	LSL  R30
000264 1fff      	ROL  R31
000265 940e 0d4e 	CALL SUBOPT_0xC
000267 940e 0f1a 	CALL __CWD1
000269 940e 0f5a 	CALL __PUTPARD1
00026b e088      	LDI  R24,8
00026c 940e 0b95 	CALL _sprintf
00026e 962c      	ADIW R28,12
                 ;lcd_puts(buff);
00026f e6a0      	LDI  R26,LOW(_buff)
000270 e0b2      	LDI  R27,HIGH(_buff)
000271 940e 0c84 	CALL _lcd_puts
                 ;lampu = 0;
000273 98c3      	CBI  0x18,3
                 ;lampu = 1;
000274 9ac3      	SBI  0x18,3
000275 01f6      	MOVW R30,R12
000276 9631      	ADIW R30,1
000277 016f      	MOVW R12,R30
000278 cfb8      	RJMP _0x29
                 _0x2A:
000279 9508      	RET
                 ; .FEND
                 ;void cekdatasensor()
                 ;for (i = 0; i < 7; i++)
                 ;lcd_gotoxy(0, 0);
                 ;sprintf(buff, " %d  ", garis[i]);
                 ;lcd_puts(buff);
                 ;lcd_gotoxy(10, 0);
                 ;sprintf(buff, " %d  ", back[i]);
                 ;lcd_puts(buff);
                 ;lcd_gotoxy(0, 1);
                 ;sprintf(buff, " %d  ", tengah[i]);
                 ;lcd_puts(buff);
                 ;lcd_gotoxy(10, 1);
                 ;sprintf(buff, " %d  ", read_adc(i));
                 ;lcd_puts(buff);
                 ;delay_ms(200);
                 ;void maju(unsigned char ki, unsigned char ka)
                 ; 0000 0069 {
                 _maju:
                 ; .FSTART _maju
                 ;pwmka = ka;
00027a 940e 0d53 	CALL SUBOPT_0xD
                 ;	ki -> Y+1
                 ;	ka -> Y+0
                 ;pwmki = ki;
                 ;PORTD.2 = 1;
00027c 9a92      	SBI  0x12,2
                 ;PORTD.3 = 0;
00027d 9893      	CBI  0x12,3
                 ;PORTD.6 = 0;
00027e 9896      	CBI  0x12,6
                 ;PORTD.7 = 1;
00027f 9a97      	SBI  0x12,7
000280 c21d      	RJMP _0x20C000D
                 ; .FEND
                 ;void mundur(unsigned char ki, unsigned char ka)
                 _mundur:
                 ; .FSTART _mundur
                 ;pwmka = ka;
000281 940e 0d53 	CALL SUBOPT_0xD
                 ;	ki -> Y+1
                 ;	ka -> Y+0
                 ;pwmki = ki;
                 ;PORTD.2 = 0;
000283 9892      	CBI  0x12,2
                 ;PORTD.3 = 1;
000284 9a93      	SBI  0x12,3
                 ;PORTD.6 = 1;
000285 9a96      	SBI  0x12,6
                 ;PORTD.7 = 0;
000286 9897      	CBI  0x12,7
000287 c216      	RJMP _0x20C000D
                 ; .FEND
                 ;void kanan(unsigned char ki, unsigned char ka)
                 _kanan:
                 ; .FSTART _kanan
                 ;pwmka = ka;
000288 940e 0d53 	CALL SUBOPT_0xD
                 ;	ki -> Y+1
                 ;	ka -> Y+0
                 ;pwmki = ki;
                 ;PORTD.2 = 0;
00028a 9892      	CBI  0x12,2
                 ;PORTD.3 = 1;
00028b 9a93      	SBI  0x12,3
                 ;PORTD.6 = 0;
00028c 9896      	CBI  0x12,6
                 ;PORTD.7 = 1;
00028d 9a97      	SBI  0x12,7
00028e c20f      	RJMP _0x20C000D
                 ; .FEND
                 ;void kiri(unsigned char ki, unsigned char ka)
                 _kiri:
                 ; .FSTART _kiri
                 ;pwmka = ka;
00028f 940e 0d53 	CALL SUBOPT_0xD
                 ;	ki -> Y+1
                 ;	ka -> Y+0
                 ;pwmki = ki;
                 ;PORTD.2 = 1;
000291 9a92      	SBI  0x12,2
                 ;PORTD.3 = 0;
000292 9893      	CBI  0x12,3
                 ;PORTD.6 = 1;
000293 9a96      	SBI  0x12,6
                 ;PORTD.7 = 0;
000294 9897      	CBI  0x12,7
000295 c208      	RJMP _0x20C000D
                 ; .FEND
                 ;void setMotor(int ki, int ka)
                 _setMotor:
                 ; .FSTART _setMotor
                 ;if (ki > 0)
000296 93ba      	ST   -Y,R27
000297 93aa      	ST   -Y,R26
                 ;	ki -> Y+2
                 ;	ka -> Y+0
000298 81aa      	LDD  R26,Y+2
000299 81bb      	LDD  R27,Y+2+1
00029a 940e 0f88 	CALL __CPW02
00029c f41c      	BRGE _0x52
                 ;PORTD.2 = 1;
00029d 9a92      	SBI  0x12,2
                 ;PORTD.3 = 0;
00029e 9893      	CBI  0x12,3
                 ;else
00029f c008      	RJMP _0x57
                 _0x52:
                 ;PORTD.2 = 0;
0002a0 9892      	CBI  0x12,2
                 ;PORTD.3 = 1;
0002a1 9a93      	SBI  0x12,3
                 ;ki = abs(ki);
0002a2 81aa      	LDD  R26,Y+2
0002a3 81bb      	LDD  R27,Y+2+1
0002a4 940e 0bea 	CALL _abs
0002a6 83ea      	STD  Y+2,R30
0002a7 83fb      	STD  Y+2+1,R31
                 _0x57:
                 ;pwmki = ki;
0002a8 81ea      	LDD  R30,Y+2
0002a9 81fb      	LDD  R31,Y+2+1
0002aa bdfb      	OUT  0x2A+1,R31
0002ab bdea      	OUT  0x2A,R30
                 ;if (ka > 0)
0002ac 940e 0d5d 	CALL SUBOPT_0xE
0002ae f41c      	BRGE _0x5C
                 ;PORTD.7 = 1;
0002af 9a97      	SBI  0x12,7
                 ;PORTD.6 = 0;
0002b0 9896      	CBI  0x12,6
                 ;else
0002b1 c008      	RJMP _0x61
                 _0x5C:
                 ;PORTD.7 = 0;
0002b2 9897      	CBI  0x12,7
                 ;PORTD.6 = 1;
0002b3 9a96      	SBI  0x12,6
                 ;ka = abs(ka);
0002b4 81a8      	LD   R26,Y
0002b5 81b9      	LDD  R27,Y+1
0002b6 940e 0bea 	CALL _abs
0002b8 83e8      	ST   Y,R30
0002b9 83f9      	STD  Y+1,R31
                 _0x61:
                 ;pwmka = ka;
0002ba 81e8      	LD   R30,Y
0002bb 81f9      	LDD  R31,Y+1
0002bc bdf9      	OUT  0x28+1,R31
0002bd bde8      	OUT  0x28,R30
0002be c1c1      	RJMP _0x20C000E
                 ; .FEND
                 ;void rem(int nilai_rem)
                 _rem:
                 ; .FSTART _rem
                 ;PORTD .4 = 1;
0002bf 93ba      	ST   -Y,R27
0002c0 93aa      	ST   -Y,R26
                 ;	nilai_rem -> Y+0
0002c1 9a94      	SBI  0x12,4
                 ;PORTD .5 = 1;
0002c2 9a95      	SBI  0x12,5
                 ;PORTD .2 = 0;
0002c3 9892      	CBI  0x12,2
                 ;PORTD .3 = 0;
0002c4 9893      	CBI  0x12,3
                 ;PORTD .6 = 0;
0002c5 9896      	CBI  0x12,6
                 ;PORTD .7 = 0;
0002c6 9897      	CBI  0x12,7
                 ;delay_ms(nilai_rem);
0002c7 81a8      	LD   R26,Y
0002c8 81b9      	LDD  R27,Y+1
0002c9 940e 1073 	CALL _delay_ms
0002cb c1d2      	RJMP _0x20C000D
                 ; .FEND
                 ;void maju_delay(int kec, int lama)
                 _maju_delay:
                 ; .FSTART _maju_delay
                 ;maju(kec, kec);
0002cc 93ba      	ST   -Y,R27
0002cd 93aa      	ST   -Y,R26
                 ;	kec -> Y+2
                 ;	lama -> Y+0
0002ce 81ea      	LDD  R30,Y+2
0002cf 93ea      	ST   -Y,R30
0002d0 81ab      	LDD  R26,Y+3
0002d1 dfa8      	RCALL _maju
                 ;delay(lama);
0002d2 940e 0d62 	CALL SUBOPT_0xF
0002d4 c1ab      	RJMP _0x20C000E
                 ; .FEND
                 ;void pilihSpeed(int kec)
                 _pilihSpeed:
                 ; .FSTART _pilihSpeed
                 ;kp = kec * 0.15;
0002d5 93ba      	ST   -Y,R27
0002d6 93aa      	ST   -Y,R26
                 ;	kec -> Y+0
0002d7 940e 0d66 	CALL SUBOPT_0x10
                +
0002d9 e9aa     +LDI R26 , LOW ( 0x3E19999A )
0002da e9b9     +LDI R27 , HIGH ( 0x3E19999A )
0002db e189     +LDI R24 , BYTE3 ( 0x3E19999A )
0002dc e39e     +LDI R25 , BYTE4 ( 0x3E19999A )
                 	__GETD2N 0x3E19999A
0002dd 940e 1025 	CALL __MULF12
0002df e9ac      	LDI  R26,LOW(_kp)
0002e0 e0b2      	LDI  R27,HIGH(_kp)
0002e1 940e 0d6d 	CALL SUBOPT_0x11
                 ;kd = kec * 0.6;
0002e3 940e 0d66 	CALL SUBOPT_0x10
                +
0002e5 e9aa     +LDI R26 , LOW ( 0x3F19999A )
0002e6 e9b9     +LDI R27 , HIGH ( 0x3F19999A )
0002e7 e189     +LDI R24 , BYTE3 ( 0x3F19999A )
0002e8 e39f     +LDI R25 , BYTE4 ( 0x3F19999A )
                 	__GETD2N 0x3F19999A
0002e9 940e 1025 	CALL __MULF12
0002eb e9ae      	LDI  R26,LOW(_kd)
0002ec e0b2      	LDI  R27,HIGH(_kd)
0002ed 940e 0d6d 	CALL SUBOPT_0x11
                 ;SPEED = kec;
0002ef 81e8      	LD   R30,Y
0002f0 81f9      	LDD  R31,Y+1
0002f1 93e0 02a0 	STS  _SPEED,R30
0002f3 93f0 02a1 	STS  _SPEED+1,R31
                 ;MIN_SPEED = -(kec * 0.75);
0002f5 940e 0d66 	CALL SUBOPT_0x10
                +
0002f7 e0a0     +LDI R26 , LOW ( 0x3F400000 )
0002f8 e0b0     +LDI R27 , HIGH ( 0x3F400000 )
0002f9 e480     +LDI R24 , BYTE3 ( 0x3F400000 )
0002fa e39f     +LDI R25 , BYTE4 ( 0x3F400000 )
                 	__GETD2N 0x3F400000
0002fb 940e 1025 	CALL __MULF12
0002fd 940e 0f8c 	CALL __ANEGF1
0002ff eaa2      	LDI  R26,LOW(_MIN_SPEED)
000300 e0b2      	LDI  R27,HIGH(_MIN_SPEED)
000301 940e 0d6d 	CALL SUBOPT_0x11
                 ;MAX_SPEED = kec;
000303 81e8      	LD   R30,Y
000304 81f9      	LDD  R31,Y+1
000305 93e0 02a4 	STS  _MAX_SPEED,R30
000307 93f0 02a5 	STS  _MAX_SPEED+1,R31
000309 c194      	RJMP _0x20C000D
                 ; .FEND
                 ;void maju_cari_garis()
                 ;maju(180, 182);
                 ;cek_sensor(); // 0b01000000)!=0b00000000)
                 ;while ((sensor & 0b00000001) != 0b00000000)
                 ;cek_sensor();
                 ;rem(100);
                 ;void parkir()
                 _parkir:
                 ; .FSTART _parkir
                 ;lampu = 0;
00030a 98c3      	CBI  0x18,3
                 ;while (1)
                 _0x77:
                 ;rem(100);
00030b e6a4      	LDI  R26,LOW(100)
00030c e0b0      	LDI  R27,0
00030d dfb1      	RCALL _rem
00030e cffc      	RJMP _0x77
                 ; .FEND
                 ;void scan(int kec)
                 _scan:
                 ; .FSTART _scan
                 ;int rateError;
                 ;int moveVal, moveLeft, moveRight;
                 ;pilihSpeed(kec);
00030f 93ba      	ST   -Y,R27
000310 93aa      	ST   -Y,R26
000311 9722      	SBIW R28,2
000312 940e 0efc 	CALL __SAVELOCR6
                 ;	kec -> Y+8
                 ;	rateError -> R16,R17
                 ;	moveVal -> R18,R19
                 ;	moveLeft -> R20,R21
                 ;	moveRight -> Y+6
000314 85a8      	LDD  R26,Y+8
000315 85b9      	LDD  R27,Y+8+1
000316 dfbe      	RCALL _pilihSpeed
                 ;sensor = sensor & 0b01111111;
000317 940e 0d72 	CALL SUBOPT_0x12
000319 77ef      	ANDI R30,LOW(0x7F)
00031a 70f0      	ANDI R31,HIGH(0x7F)
00031b 93e0 0296 	STS  _sensor,R30
00031d 93f0 0297 	STS  _sensor+1,R31
                 ;switch (sensor) //  1=kiri 8=kanan
00031f 940e 0d72 	CALL SUBOPT_0x12
                 ;{               //  7......1
                 ;case 0b00000001:
000321 30e1      	CPI  R30,LOW(0x1)
000322 e0a0      	LDI  R26,HIGH(0x1)
000323 07fa      	CPC  R31,R26
000324 f419      	BRNE _0x7D
                 ;error = -6;
000325 efea      	LDI  R30,LOW(65530)
000326 efff      	LDI  R31,HIGH(65530)
000327 c056      	RJMP _0x17C
                 ;break; // DOMINAN KANAN
                 ;case 0b00000011:
                 _0x7D:
000328 30e3      	CPI  R30,LOW(0x3)
000329 e0a0      	LDI  R26,HIGH(0x3)
00032a 07fa      	CPC  R31,R26
00032b f419      	BRNE _0x7E
                 ;error = -5;
00032c efeb      	LDI  R30,LOW(65531)
00032d efff      	LDI  R31,HIGH(65531)
00032e c04f      	RJMP _0x17C
                 ;break;
                 ;case 0b00000010:
                 _0x7E:
00032f 30e2      	CPI  R30,LOW(0x2)
000330 e0a0      	LDI  R26,HIGH(0x2)
000331 07fa      	CPC  R31,R26
000332 f419      	BRNE _0x7F
                 ;error = -4;
000333 efec      	LDI  R30,LOW(65532)
000334 efff      	LDI  R31,HIGH(65532)
000335 c048      	RJMP _0x17C
                 ;break;
                 ;case 0b00000110:
                 _0x7F:
000336 30e6      	CPI  R30,LOW(0x6)
000337 e0a0      	LDI  R26,HIGH(0x6)
000338 07fa      	CPC  R31,R26
000339 f419      	BRNE _0x80
                 ;error = -3;
00033a efed      	LDI  R30,LOW(65533)
00033b efff      	LDI  R31,HIGH(65533)
00033c c041      	RJMP _0x17C
                 ;break;
                 ;case 0b00000100:
                 _0x80:
00033d 30e4      	CPI  R30,LOW(0x4)
00033e e0a0      	LDI  R26,HIGH(0x4)
00033f 07fa      	CPC  R31,R26
000340 f419      	BRNE _0x81
                 ;error = -2;
000341 efee      	LDI  R30,LOW(65534)
000342 efff      	LDI  R31,HIGH(65534)
000343 c03a      	RJMP _0x17C
                 ;break;
                 ;case 0b00001100:
                 _0x81:
000344 30ec      	CPI  R30,LOW(0xC)
000345 e0a0      	LDI  R26,HIGH(0xC)
000346 07fa      	CPC  R31,R26
000347 f419      	BRNE _0x82
                 ;error = -1;
000348 efef      	LDI  R30,LOW(65535)
000349 efff      	LDI  R31,HIGH(65535)
00034a c033      	RJMP _0x17C
                 ;break;
                 ;case 0b00001000:
                 _0x82:
00034b 30e8      	CPI  R30,LOW(0x8)
00034c e0a0      	LDI  R26,HIGH(0x8)
00034d 07fa      	CPC  R31,R26
00034e f431      	BRNE _0x83
                 ;error = 0;
00034f e0e0      	LDI  R30,LOW(0)
000350 93e0 0298 	STS  _error,R30
000352 93e0 0299 	STS  _error+1,R30
                 ;break;
000354 c02d      	RJMP _0x7C
                 ;case 0b00011000:
                 _0x83:
000355 31e8      	CPI  R30,LOW(0x18)
000356 e0a0      	LDI  R26,HIGH(0x18)
000357 07fa      	CPC  R31,R26
000358 f419      	BRNE _0x84
                 ;error = 1;
000359 e0e1      	LDI  R30,LOW(1)
00035a e0f0      	LDI  R31,HIGH(1)
00035b c022      	RJMP _0x17C
                 ;break;
                 ;case 0b00010000:
                 _0x84:
00035c 31e0      	CPI  R30,LOW(0x10)
00035d e0a0      	LDI  R26,HIGH(0x10)
00035e 07fa      	CPC  R31,R26
00035f f419      	BRNE _0x85
                 ;error = 2;
000360 e0e2      	LDI  R30,LOW(2)
000361 e0f0      	LDI  R31,HIGH(2)
000362 c01b      	RJMP _0x17C
                 ;break;
                 ;case 0b00110000:
                 _0x85:
000363 33e0      	CPI  R30,LOW(0x30)
000364 e0a0      	LDI  R26,HIGH(0x30)
000365 07fa      	CPC  R31,R26
000366 f419      	BRNE _0x86
                 ;error = 3;
000367 e0e3      	LDI  R30,LOW(3)
000368 e0f0      	LDI  R31,HIGH(3)
000369 c014      	RJMP _0x17C
                 ;break;
                 ;case 0b00100000:
                 _0x86:
00036a 32e0      	CPI  R30,LOW(0x20)
00036b e0a0      	LDI  R26,HIGH(0x20)
00036c 07fa      	CPC  R31,R26
00036d f419      	BRNE _0x87
                 ;error = 4;
00036e e0e4      	LDI  R30,LOW(4)
00036f e0f0      	LDI  R31,HIGH(4)
000370 c00d      	RJMP _0x17C
                 ;break;
                 ;case 0b01100000:
                 _0x87:
000371 36e0      	CPI  R30,LOW(0x60)
000372 e0a0      	LDI  R26,HIGH(0x60)
000373 07fa      	CPC  R31,R26
000374 f419      	BRNE _0x88
                 ;error = 5;
000375 e0e5      	LDI  R30,LOW(5)
000376 e0f0      	LDI  R31,HIGH(5)
000377 c006      	RJMP _0x17C
                 ;break;
                 ;case 0b01000000:
                 _0x88:
000378 34e0      	CPI  R30,LOW(0x40)
000379 e0a0      	LDI  R26,HIGH(0x40)
00037a 07fa      	CPC  R31,R26
00037b f431      	BRNE _0x7C
                 ;error = 6;
00037c e0e6      	LDI  R30,LOW(6)
00037d e0f0      	LDI  R31,HIGH(6)
                 _0x17C:
00037e 93e0 0298 	STS  _error,R30
000380 93f0 0299 	STS  _error+1,R31
                 ;break; // DOMINAN KIRI
                 _0x7C:
                 ;rateError = error - lastError;
000382 91a0 029a 	LDS  R26,_lastError
000384 91b0 029b 	LDS  R27,_lastError+1
000386 91e0 0298 	LDS  R30,_error
000388 91f0 0299 	LDS  R31,_error+1
00038a 1bea      	SUB  R30,R26
00038b 0bfb      	SBC  R31,R27
00038c 018f      	MOVW R16,R30
                 ;lastError = error;
00038d 91e0 0298 	LDS  R30,_error
00038f 91f0 0299 	LDS  R31,_error+1
000391 93e0 029a 	STS  _lastError,R30
000393 93f0 029b 	STS  _lastError+1,R31
                 ;moveVal = (int)(error * kp) + (rateError * kd);
000395 91e0 029c 	LDS  R30,_kp
000397 91f0 029d 	LDS  R31,_kp+1
000399 91a0 0298 	LDS  R26,_error
00039b 91b0 0299 	LDS  R27,_error+1
00039d 940e 0f27 	CALL __MULW12
00039f 01bf      	MOVW R22,R30
0003a0 91e0 029e 	LDS  R30,_kd
0003a2 91f0 029f 	LDS  R31,_kd+1
0003a4 01d8      	MOVW R26,R16
0003a5 940e 0f27 	CALL __MULW12
0003a7 0fe6      	ADD  R30,R22
0003a8 1ff7      	ADC  R31,R23
0003a9 019f      	MOVW R18,R30
                 ;moveLeft = SPEED + moveVal;
0003aa 91a0 02a0 	LDS  R26,_SPEED
0003ac 91b0 02a1 	LDS  R27,_SPEED+1
0003ae 0fea      	ADD  R30,R26
0003af 1ffb      	ADC  R31,R27
0003b0 01af      	MOVW R20,R30
                 ;moveRight = SPEED - moveVal;
0003b1 91e0 02a0 	LDS  R30,_SPEED
0003b3 91f0 02a1 	LDS  R31,_SPEED+1
0003b5 1be2      	SUB  R30,R18
0003b6 0bf3      	SBC  R31,R19
0003b7 83ee      	STD  Y+6,R30
0003b8 83ff      	STD  Y+6+1,R31
                 ;if (moveLeft > MAX_SPEED)
0003b9 940e 0d77 	CALL SUBOPT_0x13
0003bb 17e4      	CP   R30,R20
0003bc 07f5      	CPC  R31,R21
0003bd f424      	BRGE _0x8A
                 ;moveLeft = MAX_SPEED;
                +
0003be 9140 02a4+LDS R20 , 0 + ( _MAX_SPEED )
0003c0 9150 02a5+LDS R21 , 0 + ( _MAX_SPEED ) + 1
                 	__GETWRMN 20,21,0,_MAX_SPEED
                 ;if (moveLeft < MIN_SPEED)
                 _0x8A:
0003c2 940e 0d7c 	CALL SUBOPT_0x14
0003c4 174e      	CP   R20,R30
0003c5 075f      	CPC  R21,R31
0003c6 f424      	BRGE _0x8B
                 ;moveLeft = MIN_SPEED;
                +
0003c7 9140 02a2+LDS R20 , 0 + ( _MIN_SPEED )
0003c9 9150 02a3+LDS R21 , 0 + ( _MIN_SPEED ) + 1
                 	__GETWRMN 20,21,0,_MIN_SPEED
                 ;if (moveRight > MAX_SPEED)
                 _0x8B:
0003cb 940e 0d77 	CALL SUBOPT_0x13
0003cd 81ae      	LDD  R26,Y+6
0003ce 81bf      	LDD  R27,Y+6+1
0003cf 17ea      	CP   R30,R26
0003d0 07fb      	CPC  R31,R27
0003d1 f424      	BRGE _0x8C
                 ;moveRight = MAX_SPEED;
0003d2 940e 0d77 	CALL SUBOPT_0x13
0003d4 83ee      	STD  Y+6,R30
0003d5 83ff      	STD  Y+6+1,R31
                 ;if (moveRight < MIN_SPEED)
                 _0x8C:
0003d6 940e 0d7c 	CALL SUBOPT_0x14
0003d8 81ae      	LDD  R26,Y+6
0003d9 81bf      	LDD  R27,Y+6+1
0003da 17ae      	CP   R26,R30
0003db 07bf      	CPC  R27,R31
0003dc f424      	BRGE _0x8D
                 ;moveRight = MIN_SPEED;
0003dd 940e 0d7c 	CALL SUBOPT_0x14
0003df 83ee      	STD  Y+6,R30
0003e0 83ff      	STD  Y+6+1,R31
                 ;setMotor(moveLeft, moveRight);
                 _0x8D:
0003e1 935a      	ST   -Y,R21
0003e2 934a      	ST   -Y,R20
0003e3 85a8      	LDD  R26,Y+8
0003e4 85b9      	LDD  R27,Y+8+1
0003e5 deb0      	RCALL _setMotor
0003e6 940e 0f03 	CALL __LOADLOCR6
0003e8 962a      	ADIW R28,10
0003e9 9508      	RET
                 ; .FEND
                 ;void scanX(int brpkali, int kec)
                 _scanX:
                 ; .FSTART _scanX
                 ;while (hitung < brpkali)
0003ea 93ba      	ST   -Y,R27
0003eb 93aa      	ST   -Y,R26
                 ;	brpkali -> Y+2
                 ;	kec -> Y+0
                 _0x8E:
0003ec 81ea      	LDD  R30,Y+2
0003ed 81fb      	LDD  R31,Y+2+1
0003ee 164e      	CP   R4,R30
0003ef 065f      	CPC  R5,R31
0003f0 f4d4      	BRGE _0x90
                 ;while ((sensor & 0b00011100) != 0b00011100)
                 _0x91:
0003f1 940e 0d81 	CALL SUBOPT_0x15
0003f3 f029      	BREQ _0x93
                 ;cek_sensor();
0003f4 ddcc      	RCALL _cek_sensor
                 ;scan(kec);
0003f5 81a8      	LD   R26,Y
0003f6 81b9      	LDD  R27,Y+1
0003f7 df17      	RCALL _scan
0003f8 cff8      	RJMP _0x91
                 _0x93:
                 ;while ((sensor & 0b00011100) == 0b00011100)
                 _0x94:
0003f9 940e 0d81 	CALL SUBOPT_0x15
0003fb f471      	BRNE _0x96
                 ;cek_sensor();
0003fc ddc4      	RCALL _cek_sensor
                 ;lampu = 0;
0003fd 98c3      	CBI  0x18,3
                 ;scan(kec);
0003fe 81a8      	LD   R26,Y
0003ff 81b9      	LDD  R27,Y+1
000400 df0e      	RCALL _scan
                 ;if ((sensor & 0b00011100) != 0b00011100)
000401 940e 0d81 	CALL SUBOPT_0x15
000403 f029      	BREQ _0x99
                 ;hitung++;
000404 01f2      	MOVW R30,R4
000405 9631      	ADIW R30,1
000406 012f      	MOVW R4,R30
000407 9731      	SBIW R30,1
                 ;lampu = 1;
000408 9ac3      	SBI  0x18,3
                 ;};
                 _0x99:
000409 cfef      	RJMP _0x94
                 _0x96:
                 ;};
00040a cfe1      	RJMP _0x8E
                 _0x90:
                 ;hitung = 0;
00040b 2444      	CLR  R4
00040c 2455      	CLR  R5
00040d c072      	RJMP _0x20C000E
                 ; .FEND
                 ;void scanTimer(int countGoal, int kec, int lama)
                 _scanTimer:
                 ; .FSTART _scanTimer
                 ;count = 0;
00040e 93ba      	ST   -Y,R27
00040f 93aa      	ST   -Y,R26
                 ;	countGoal -> Y+4
                 ;	kec -> Y+2
                 ;	lama -> Y+0
000410 e0e0      	LDI  R30,LOW(0)
000411 93e0 02a6 	STS  _count,R30
000413 93e0 02a7 	STS  _count+1,R30
                 ;while (count < countGoal)
                 _0x9C:
000415 81ec      	LDD  R30,Y+4
000416 81fd      	LDD  R31,Y+4+1
000417 91a0 02a6 	LDS  R26,_count
000419 91b0 02a7 	LDS  R27,_count+1
00041b 17ae      	CP   R26,R30
00041c 07bf      	CPC  R27,R31
00041d f44c      	BRGE _0x9E
                 ;cek_sensor();
00041e dda2      	RCALL _cek_sensor
                 ;scan(kec);
00041f 81aa      	LDD  R26,Y+2
000420 81bb      	LDD  R27,Y+2+1
000421 deed      	RCALL _scan
                 ;count++;
000422 eaa6      	LDI  R26,LOW(_count)
000423 e0b2      	LDI  R27,HIGH(_count)
000424 940e 0d85 	CALL SUBOPT_0x16
000426 cfee      	RJMP _0x9C
                 _0x9E:
                 ;rem(lama);
000427 940e 0d8b 	CALL SUBOPT_0x17
000429 9626      	ADIW R28,6
00042a 9508      	RET
                 ; .FEND
                 ;void scanTka(int brpkali)
                 ;while (hitung < brpkali)
                 ;	brpkali -> Y+0
                 ;cek_sensor();
                 ;while ((sensor & 0b01110000) != 0b01110000) // kanan
                 ;cek_sensor();
                 ;scan(170);
                 ;while ((sensor & 0b01110000) == 0b01110000)
                 ;cek_sensor();
                 ;scan(170);
                 ;if ((sensor & 0b01110000) != 0b01110000)
                 ;hitung++;
                 ;lcd_kedip(1);
                 ;};
                 ;};
                 ;hitung = 0;
                 ;void scanTki(int brpkali)
                 ;while (hitung < brpkali)
                 ;	brpkali -> Y+0
                 ;cek_sensor();
                 ;while ((sensor & 0b00000111) != 0b00000111) // kanan
                 ;cek_sensor();
                 ;scan(170);
                 ;while ((sensor & 0b00000111) == 0b00000111)
                 ;cek_sensor();
                 ;scan(170);
                 ;if ((sensor & 0b00000111) != 0b00000111)
                 ;hitung++;
                 ;lcd_kedip(1);
                 ;};
                 ;};
                 ;hitung = 0;
                 ;void scan7ki()
                 ;cek_sensor();
                 ;while ((sensor & 0b01000000) != 0b01000000)
                 ;cek_sensor();
                 ;scan(170);
                 ;void scan7ka()
                 ;cek_sensor();
                 ;while ((sensor & 0b01000000) != 0b00000000)
                 ;cek_sensor();
                 ;scan(170);
                 ;void scan7ki2()
                 ;cek_sensor();
                 ;while (sensor == 0b00000000) // sensor !=0b00111111||0b00000011|| 0b00000001
                 ;cek_sensor();
                 ;scan(170);
                 ;void belki(int kec, int lama)
                 _belki:
                 ; .FSTART _belki
                 ;cek_sensor();
00042b 93ba      	ST   -Y,R27
00042c 93aa      	ST   -Y,R26
                 ;	kec -> Y+2
                 ;	lama -> Y+0
00042d dd93      	RCALL _cek_sensor
                 ;while (sen[0] || sen[1])
                 _0xBC:
00042e 91e0 028f 	LDS  R30,_sen
000430 30e0      	CPI  R30,0
000431 f421      	BRNE _0xBF
                +
000432 91e0 0290+LDS R30 , _sen + ( 1 )
                 	__GETB1MN _sen,1
000434 30e0      	CPI  R30,0
000435 f019      	BREQ _0xBE
                 _0xBF:
                 ;kiri(kec, kec);
000436 940e 0d8f 	CALL SUBOPT_0x18
                 ;cek_sensor();
000438 cff5      	RJMP _0xBC
                 _0xBE:
                 ;while (!sen[0] && !sen[1])
                 _0xC1:
000439 91e0 028f 	LDS  R30,_sen
00043b 30e0      	CPI  R30,0
00043c f421      	BRNE _0xC4
                +
00043d 91e0 0290+LDS R30 , _sen + ( 1 )
                 	__GETB1MN _sen,1
00043f 30e0      	CPI  R30,0
000440 f009      	BREQ _0xC5
                 _0xC4:
000441 c003      	RJMP _0xC3
                 _0xC5:
                 ;kiri(kec, kec);
000442 940e 0d8f 	CALL SUBOPT_0x18
                 ;cek_sensor();
000444 cff4      	RJMP _0xC1
                 _0xC3:
                 ;if (lama > 0)
000445 940e 0d5d 	CALL SUBOPT_0xE
000447 f414      	BRGE _0xC6
                 ;rem(lama);
000448 940e 0d8b 	CALL SUBOPT_0x17
                 _0xC6:
00044a c035      	RJMP _0x20C000E
                 ; .FEND
                 ;void belki2()
                 ;cek_sensor();
                 ;while ((sensor & 0b00000001) != 0b00000000)
                 ;cek_sensor();
                 ;kiri(150, 150);
                 ;void belka(int kec, int lama)
                 _belka:
                 ; .FSTART _belka
                 ;cek_sensor();
00044b 93ba      	ST   -Y,R27
00044c 93aa      	ST   -Y,R26
                 ;	kec -> Y+2
                 ;	lama -> Y+0
00044d dd73      	RCALL _cek_sensor
                 ;while (sen[5] || sen[6])
                 _0xCA:
                +
00044e 91e0 0294+LDS R30 , _sen + ( 5 )
                 	__GETB1MN _sen,5
000450 30e0      	CPI  R30,0
000451 f421      	BRNE _0xCD
                +
000452 91e0 0295+LDS R30 , _sen + ( 6 )
                 	__GETB1MN _sen,6
000454 30e0      	CPI  R30,0
000455 f019      	BREQ _0xCC
                 _0xCD:
                 ;kanan(kec, kec);
000456 940e 0d96 	CALL SUBOPT_0x19
                 ;cek_sensor();
000458 cff5      	RJMP _0xCA
                 _0xCC:
                 ;while (!sen[5] && !sen[6])
                 _0xCF:
                +
000459 91e0 0294+LDS R30 , _sen + ( 5 )
                 	__GETB1MN _sen,5
00045b 30e0      	CPI  R30,0
00045c f421      	BRNE _0xD2
                +
00045d 91e0 0295+LDS R30 , _sen + ( 6 )
                 	__GETB1MN _sen,6
00045f 30e0      	CPI  R30,0
000460 f009      	BREQ _0xD3
                 _0xD2:
000461 c003      	RJMP _0xD1
                 _0xD3:
                 ;kanan(kec, kec);
000462 940e 0d96 	CALL SUBOPT_0x19
                 ;cek_sensor();
000464 cff4      	RJMP _0xCF
                 _0xD1:
                 ;if (lama > 0)
000465 940e 0d5d 	CALL SUBOPT_0xE
000467 f414      	BRGE _0xD4
                 ;rem(lama);
000468 940e 0d8b 	CALL SUBOPT_0x17
                 _0xD4:
00046a c015      	RJMP _0x20C000E
                 ; .FEND
                 ;void belkacenter()
                 ;cek_sensor();
                 ;while ((sensor & 0b00001000) != 0b00001000)
                 ;cek_sensor();
                 ;kanan(180, 180);
                 ;if ((sensor & 0b10000000) == 0b10000000)
                 ;lcd_kedip(1);
                 ;void scan_delay(int ms)
                 ;k = 0;
                 ;	ms -> Y+0
                 ;maju(172, 170);
                 ;while (k < ms / 10)
                 ;delay_ms(10);
                 ;k++;
                 ;cek_sensor();
                 ;scan(180);
                 ;void belokKanan(int kec, int lama_rem) {
                 _belokKanan:
                 ; .FSTART _belokKanan
                 ;if(mapMirror[0] == 0) {
00046b 940e 0d9d 	CALL SUBOPT_0x1A
                 ;	kec -> Y+2
                 ;	lama_rem -> Y+0
00046d f421      	BRNE _0xDC
                 ;belka(kec, lama_rem);
00046e 940e 0da5 	CALL SUBOPT_0x1B
000470 dfda      	RCALL _belka
                 ;} else {
000471 c003      	RJMP _0xDD
                 _0xDC:
                 ;belki(kec, lama_rem);
000472 940e 0da5 	CALL SUBOPT_0x1B
000474 dfb6      	RCALL _belki
                 _0xDD:
000475 c00a      	RJMP _0x20C000E
                 ; .FEND
                 ;void belokKiri(int kec, int lama_rem) {
                 _belokKiri:
                 ; .FSTART _belokKiri
                 ;if(mapMirror[0] == 0) {
000476 940e 0d9d 	CALL SUBOPT_0x1A
                 ;	kec -> Y+2
                 ;	lama_rem -> Y+0
000478 f421      	BRNE _0xDE
                 ;belki(kec, lama_rem);
000479 940e 0da5 	CALL SUBOPT_0x1B
00047b dfaf      	RCALL _belki
                 ;} else {
00047c c003      	RJMP _0xDF
                 _0xDE:
                 ;belka(kec, lama_rem);
00047d 940e 0da5 	CALL SUBOPT_0x1B
00047f dfcb      	RCALL _belka
                 _0xDF:
                 _0x20C000E:
000480 9624      	ADIW R28,4
000481 9508      	RET
                 ; .FEND
                 ;void griper()
                 ; 0000 006B {
                 ;capit_lepas;
                 ;lengan_tengah;
                 ;delay_ms(5000);
                 ;lengan_bawah;
                 ;delay_ms(5000);
                 ;capit_ambil;
                 ;delay_ms(7000);
                 ;lengan_atas;
                 ;delay_ms(5000);
                 ;lengan_bawah;
                 ;delay_ms(5000);
                 ;capit_lepas;
                 ;void ambil(int lama)
                 _ambil:
                 ; .FSTART _ambil
                 ;capit_ambil;
000482 93ba      	ST   -Y,R27
000483 93aa      	ST   -Y,R26
                 ;	lama -> Y+0
000484 eeee      	LDI  R30,LOW(238)
000485 93e0 0283 	STS  _pos_servo1,R30
                 ;delay(lama);
000487 940e 0d62 	CALL SUBOPT_0xF
                 ;lengan_atas;
000489 eeea      	LDI  R30,LOW(234)
00048a 93e0 0284 	STS  _pos_servo2,R30
                 ;delay(lama);
00048c 940e 0d62 	CALL SUBOPT_0xF
00048e c00f      	RJMP _0x20C000D
                 ; .FEND
                 ;void taruh(int lama)
                 _taruh:
                 ; .FSTART _taruh
                 ;lengan_bawah;
00048f 93ba      	ST   -Y,R27
000490 93aa      	ST   -Y,R26
                 ;	lama -> Y+0
000491 efe0      	LDI  R30,LOW(240)
000492 93e0 0284 	STS  _pos_servo2,R30
                 ;delay(lama);
000494 940e 0d62 	CALL SUBOPT_0xF
                 ;capit_lepas;
000496 eee6      	LDI  R30,LOW(230)
000497 93e0 0283 	STS  _pos_servo1,R30
                 ;delay(lama);
000499 940e 0d62 	CALL SUBOPT_0xF
                 ;lengan_atas;
00049b eeea      	LDI  R30,LOW(234)
00049c 93e0 0284 	STS  _pos_servo2,R30
                 _0x20C000D:
00049e 9622      	ADIW R28,2
00049f 9508      	RET
                 ; .FEND
                 ;void bawah_lepas()
                 _bawah_lepas:
                 ; .FSTART _bawah_lepas
                 ;lengan_bawah;
0004a0 efe0      	LDI  R30,LOW(240)
0004a1 93e0 0284 	STS  _pos_servo2,R30
                 ;capit_lepas;
0004a3 eee6      	LDI  R30,LOW(230)
0004a4 93e0 0283 	STS  _pos_servo1,R30
0004a6 9508      	RET
                 ; .FEND
                 ;void atas_lepas()
                 ;lengan_atas;
                 ;capit_lepas;
                 ;int maxHijau = 215;
                 
                 	.DSEG
                 ;int maxKuning = 100;
                 ;int maxMerah = 180;
                 ;int minHijau = 190;
                 ;int minKuning = 0;
                 ;int minMerah = 120;
                 ;void bacawarna()
                 ; 0000 006C {
                 
                 	.CSEG
                 _bacawarna:
                 ; .FSTART _bacawarna
                 ;nadc7 = read_adc(7);
0004a7 e0a7      	LDI  R26,LOW(7)
0004a8 dcbc      	RCALL _read_adc
0004a9 2e8e      	MOV  R8,R30
0004aa 2499      	CLR  R9
                 ;lcd_gotoxy(13, 1);
0004ab e0ed      	LDI  R30,LOW(13)
0004ac 940e 0dac 	CALL SUBOPT_0x1C
                 ;sprintf(buff, "%d   ", nadc7);
0004ae 940e 0d09 	CALL SUBOPT_0x4
                +
0004b0 eee6     +LDI R30 , LOW ( 2 * _0x0 + ( 94 ) )
0004b1 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 94 ) )
                 	__POINTW1FN _0x0,94
0004b2 93fa      	ST   -Y,R31
0004b3 93ea      	ST   -Y,R30
0004b4 01f4      	MOVW R30,R8
0004b5 2766      	CLR  R22
0004b6 2777      	CLR  R23
0004b7 940e 0f5a 	CALL __PUTPARD1
0004b9 e084      	LDI  R24,4
0004ba 940e 0b95 	CALL _sprintf
0004bc 9628      	ADIW R28,8
                 ;lcd_puts(buff);
                 _0x20C000C:
0004bd e6a0      	LDI  R26,LOW(_buff)
0004be e0b2      	LDI  R27,HIGH(_buff)
0004bf 940e 0c84 	CALL _lcd_puts
0004c1 9508      	RET
                 ; .FEND
                 ;int checkWarna() {
                 _checkWarna:
                 ; .FSTART _checkWarna
                 ;int warna;
                 ;nadc7 = read_adc(7);
0004c2 931a      	ST   -Y,R17
0004c3 930a      	ST   -Y,R16
                 ;	warna -> R16,R17
0004c4 e0a7      	LDI  R26,LOW(7)
0004c5 dc9f      	RCALL _read_adc
0004c6 2e8e      	MOV  R8,R30
0004c7 2499      	CLR  R9
                 ;if(nadc7>minMerah && nadc7<maxMerah){
0004c8 91e0 02b4 	LDS  R30,_minMerah
0004ca 91f0 02b5 	LDS  R31,_minMerah+1
0004cc 15e8      	CP   R30,R8
0004cd 05f9      	CPC  R31,R9
0004ce f438      	BRSH _0xE6
0004cf 91e0 02ae 	LDS  R30,_maxMerah
0004d1 91f0 02af 	LDS  R31,_maxMerah+1
0004d3 168e      	CP   R8,R30
0004d4 069f      	CPC  R9,R31
0004d5 f008      	BRLO _0xE7
                 _0xE6:
0004d6 c003      	RJMP _0xE5
                 _0xE7:
                 ;warna = 0;
                +
0004d7 e000     +LDI R16 , LOW ( 0 )
0004d8 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ;else if(nadc7>minKuning && nadc7<maxKuning){
0004d9 c026      	RJMP _0xE8
                 _0xE5:
0004da 91e0 02b2 	LDS  R30,_minKuning
0004dc 91f0 02b3 	LDS  R31,_minKuning+1
0004de 15e8      	CP   R30,R8
0004df 05f9      	CPC  R31,R9
0004e0 f438      	BRSH _0xEA
0004e1 91e0 02ac 	LDS  R30,_maxKuning
0004e3 91f0 02ad 	LDS  R31,_maxKuning+1
0004e5 168e      	CP   R8,R30
0004e6 069f      	CPC  R9,R31
0004e7 f008      	BRLO _0xEB
                 _0xEA:
0004e8 c003      	RJMP _0xE9
                 _0xEB:
                 ;warna = 1;
                +
0004e9 e001     +LDI R16 , LOW ( 1 )
0004ea e010     +LDI R17 , HIGH ( 1 )
                 	__GETWRN 16,17,1
                 ;else if(nadc7>minHijau && nadc7<maxHijau){
0004eb c014      	RJMP _0xEC
                 _0xE9:
0004ec 91e0 02b0 	LDS  R30,_minHijau
0004ee 91f0 02b1 	LDS  R31,_minHijau+1
0004f0 15e8      	CP   R30,R8
0004f1 05f9      	CPC  R31,R9
0004f2 f438      	BRSH _0xEE
0004f3 91e0 02aa 	LDS  R30,_maxHijau
0004f5 91f0 02ab 	LDS  R31,_maxHijau+1
0004f7 168e      	CP   R8,R30
0004f8 069f      	CPC  R9,R31
0004f9 f008      	BRLO _0xEF
                 _0xEE:
0004fa c003      	RJMP _0xED
                 _0xEF:
                 ;warna = 2;
                +
0004fb e002     +LDI R16 , LOW ( 2 )
0004fc e010     +LDI R17 , HIGH ( 2 )
                 	__GETWRN 16,17,2
                 ;}else{
0004fd c002      	RJMP _0xF0
                 _0xED:
                 ;warna = 3;
                +
0004fe e003     +LDI R16 , LOW ( 3 )
0004ff e010     +LDI R17 , HIGH ( 3 )
                 	__GETWRN 16,17,3
                 _0xF0:
                 _0xEC:
                 _0xE8:
                 ;return warna;
000500 01f8      	MOVW R30,R16
000501 9109      	LD   R16,Y+
000502 9119      	LD   R17,Y+
000503 9508      	RET
                 ; .FEND
                 ;int isWarna;
                 ;void fromBtoGreen()
                 ; 0000 006D {
                 _fromBtoGreen:
                 ; .FSTART _fromBtoGreen
                 ;scanX(2, 120);
000504 940e 0db0 	CALL SUBOPT_0x1D
000506 940e 0db5 	CALL SUBOPT_0x1E
                 ;scanX(1, 80);
000508 940e 0db9 	CALL SUBOPT_0x1F
                 ;scanTimer(45, 80, 50);
00050a 940e 0dc1 	CALL SUBOPT_0x20
00050c 940e 0dc6 	CALL SUBOPT_0x21
                 ;taruh(20);
                 ;mundur(100, 100); delay(30);
                 ;belokKiri(100, 20);
00050e 940e 0de2 	CALL SUBOPT_0x22
                 ;scanX(2, 100);
000510 940e 0de5 	CALL SUBOPT_0x23
                 ;belokKiri(100, 20);
000512 940e 0de9 	CALL SUBOPT_0x24
000514 940e 0de2 	CALL SUBOPT_0x22
                 ;scanX(2, 120);
000516 940e 0db5 	CALL SUBOPT_0x1E
                 ;bawah_lepas();
000518 940e 0df0 	CALL SUBOPT_0x25
                 ;scanX(1, 80);
                 ;scanTimer(35, 80, 50);
00051a e2e3      	LDI  R30,LOW(35)
00051b e0f0      	LDI  R31,HIGH(35)
00051c c0ac      	RJMP _0x20C000A
                 ;ambil(20);
                 ; .FEND
                 ;void fromBtoYellow()
                 _fromBtoYellow:
                 ; .FSTART _fromBtoYellow
                 ;scanX(1, 80);
00051d 940e 0db9 	CALL SUBOPT_0x1F
                 ;belokKanan(100, 20);
00051f 940e 0de9 	CALL SUBOPT_0x24
000521 940e 0df3 	CALL SUBOPT_0x26
                 ;scanX(2, 120);
000523 940e 0db5 	CALL SUBOPT_0x1E
                 ;scanX(1, 80);
000525 940e 0db9 	CALL SUBOPT_0x1F
                 ;scanTimer(40, 95, 50);
000527 e2e8      	LDI  R30,LOW(40)
000528 e0f0      	LDI  R31,HIGH(40)
000529 940e 0df6 	CALL SUBOPT_0x27
                 ;taruh(20);
                 ;mundur(100, 100); delay(30);
                 ;belokKiri(100, 0); belokKiri(100, 20);
00052b df4a      	RCALL _belokKiri
00052c 940e 0de9 	CALL SUBOPT_0x24
00052e 940e 0e14 	CALL SUBOPT_0x28
                 ;scanX(1, 100);
                 ;scanX(3, 150);
000530 940e 0e1b 	CALL SUBOPT_0x29
                 ;scanX(1, 80);
000532 940e 0db9 	CALL SUBOPT_0x1F
                 ;belokKiri(100, 20);
000534 940e 0de9 	CALL SUBOPT_0x24
000536 940e 0e23 	CALL SUBOPT_0x2A
                 ;scanX(1, 80);
                 ;bawah_lepas();
000538 df67      	RCALL _bawah_lepas
                 ;scanTimer(45, 90, 50);
000539 940e 0dc1 	CALL SUBOPT_0x20
00053b e5ea      	LDI  R30,LOW(90)
00053c e0f0      	LDI  R31,HIGH(90)
00053d c08f      	RJMP _0x20C000B
                 ;ambil(20);
                 ; .FEND
                 ;void fromBtoRed() {
                 _fromBtoRed:
                 ; .FSTART _fromBtoRed
                 ;scanX(1, 80);
00053e 940e 0db9 	CALL SUBOPT_0x1F
                 ;belokKiri(100, 20);
000540 940e 0de9 	CALL SUBOPT_0x24
000542 940e 0de2 	CALL SUBOPT_0x22
                 ;scanX(2, 120);
000544 940e 0db5 	CALL SUBOPT_0x1E
                 ;scanX(1, 80);
000546 940e 0db9 	CALL SUBOPT_0x1F
                 ;scanTimer(37, 95, 50);
000548 e2e5      	LDI  R30,LOW(37)
000549 e0f0      	LDI  R31,HIGH(37)
00054a 940e 0df6 	CALL SUBOPT_0x27
                 ;taruh(20);
                 ;mundur(100, 100); delay(30);
                 ;belokKanan(100, 0); belokKanan(100, 20);
00054c 940e 0e26 	CALL SUBOPT_0x2B
00054e 940e 0e29 	CALL SUBOPT_0x2C
                 ;scanX(1, 80);
                 ;belokKanan(100, 20);
000550 940e 0de9 	CALL SUBOPT_0x24
000552 940e 0e29 	CALL SUBOPT_0x2C
                 ;scanX(1, 80);
                 ;bawah_lepas();
000554 df4b      	RCALL _bawah_lepas
                 ;scanTimer(47, 95, 50);
000555 e2ef      	LDI  R30,LOW(47)
000556 e0f0      	LDI  R31,HIGH(47)
000557 940e 0e2c 	CALL SUBOPT_0x2D
000559 c073      	RJMP _0x20C000B
                 ;ambil(20);
                 ; .FEND
                 ;void fromCtoGreen() {
                 _fromCtoGreen:
                 ; .FSTART _fromCtoGreen
                 ;scanX(1, 80);
00055a 940e 0db9 	CALL SUBOPT_0x1F
                 ;belokKiri(100, 20);
00055c 940e 0de9 	CALL SUBOPT_0x24
00055e 940e 0e14 	CALL SUBOPT_0x28
                 ;scanX(1, 100);
                 ;scanX(2, 150);
000560 940e 0db0 	CALL SUBOPT_0x1D
000562 940e 0e31 	CALL SUBOPT_0x2E
                 ;scanX(1, 100);
                 ;scanX(1, 80);
000564 940e 0db9 	CALL SUBOPT_0x1F
                 ;scanTimer(37, 95, 50);
000566 e2e5      	LDI  R30,LOW(37)
000567 e0f0      	LDI  R31,HIGH(37)
000568 940e 0df6 	CALL SUBOPT_0x27
                 ;taruh(20);
                 ;mundur(100, 100); delay(30);
                 ;belokKanan(100, 0); belokKanan(100, 20);
00056a 940e 0e26 	CALL SUBOPT_0x2B
00056c 940e 0e29 	CALL SUBOPT_0x2C
                 ;scanX(1, 80);
                 ;scanX(2, 100);
00056e 940e 0db0 	CALL SUBOPT_0x1D
000570 940e 0de5 	CALL SUBOPT_0x23
                 ;belokKanan(100, 20);
000572 940e 0de9 	CALL SUBOPT_0x24
000574 940e 0df3 	CALL SUBOPT_0x26
                 ;scanX(2, 150);
000576 940e 0e31 	CALL SUBOPT_0x2E
                 ;scanX(1, 100);
                 ;scanX(1, 80);
000578 940e 0db9 	CALL SUBOPT_0x1F
                 ;belokKanan(90, 10);
00057a e5ea      	LDI  R30,LOW(90)
00057b e0f0      	LDI  R31,HIGH(90)
00057c 93fa      	ST   -Y,R31
00057d 93ea      	ST   -Y,R30
00057e e0aa      	LDI  R26,LOW(10)
00057f e0b0      	LDI  R27,0
000580 940e 0e29 	CALL SUBOPT_0x2C
                 ;scanX(1, 80);
                 ;bawah_lepas();
000582 df1d      	RCALL _bawah_lepas
                 ;scanTimer(50, 80, 50);
000583 e3e2      	LDI  R30,LOW(50)
000584 e0f0      	LDI  R31,HIGH(50)
000585 c043      	RJMP _0x20C000A
                 ;ambil(20);
                 ; .FEND
                 ;void fromCtoYellow() {
                 _fromCtoYellow:
                 ; .FSTART _fromCtoYellow
                 ;scanX(1, 100);
000586 940e 0e3a 	CALL SUBOPT_0x2F
000588 940e 0de5 	CALL SUBOPT_0x23
                 ;belokKanan(100, 20);
00058a 940e 0de9 	CALL SUBOPT_0x24
00058c 940e 0e29 	CALL SUBOPT_0x2C
                 ;scanX(1, 80);
                 ;scanTimer(45, 95, 50);
00058e 940e 0dc1 	CALL SUBOPT_0x20
000590 e5ef      	LDI  R30,LOW(95)
000591 e0f0      	LDI  R31,HIGH(95)
000592 940e 0e3f 	CALL SUBOPT_0x30
                 ;taruh(20);
000594 e1a4      	LDI  R26,LOW(20)
000595 e0b0      	LDI  R27,0
000596 def8      	RCALL _taruh
                 ;mundur(100, 100); delay(15);
000597 940e 0e45 	CALL SUBOPT_0x31
000599 e0af      	LDI  R26,LOW(15)
00059a 940e 0e4a 	CALL SUBOPT_0x32
                 ;belokKanan(100, 20);
00059c 940e 0df3 	CALL SUBOPT_0x26
                 ;scanX(2, 150);
00059e 940e 0e31 	CALL SUBOPT_0x2E
                 ;scanX(1, 100);
                 ;scanX(1, 80);
0005a0 940e 0db9 	CALL SUBOPT_0x1F
                 ;belokKanan(100, 20);
0005a2 940e 0de9 	CALL SUBOPT_0x24
0005a4 940e 0df3 	CALL SUBOPT_0x26
                 ;scanX(2, 150);
0005a6 940e 0e31 	CALL SUBOPT_0x2E
                 ;scanX(1, 100);
                 ;bawah_lepas();
0005a8 940e 0df0 	CALL SUBOPT_0x25
                 ;scanX(1, 80);
                 ;scanTimer(35, 80, 50);
0005aa e2e3      	LDI  R30,LOW(35)
0005ab e0f0      	LDI  R31,HIGH(35)
0005ac c01c      	RJMP _0x20C000A
                 ;ambil(20);
                 ; .FEND
                 ;void fromCtoRed() {
                 _fromCtoRed:
                 ; .FSTART _fromCtoRed
                 ;mundur(100, 100); delay(25);
0005ad 940e 0e45 	CALL SUBOPT_0x31
0005af e1a9      	LDI  R26,LOW(25)
0005b0 940e 0e4e 	CALL SUBOPT_0x33
                 ;belokKiri(100, 0); belokKiri(100, 20);
0005b2 dec3      	RCALL _belokKiri
0005b3 940e 0de9 	CALL SUBOPT_0x24
0005b5 940e 0e23 	CALL SUBOPT_0x2A
                 ;scanX(1, 80);
                 ;scanX(1, 120);
0005b7 940e 0e3a 	CALL SUBOPT_0x2F
0005b9 940e 0db5 	CALL SUBOPT_0x1E
                 ;scanX(1, 80);
0005bb 940e 0db9 	CALL SUBOPT_0x1F
                 ;scanTimer(45, 80, 50);
0005bd 940e 0dc1 	CALL SUBOPT_0x20
0005bf 940e 0dc6 	CALL SUBOPT_0x21
                 ;taruh(20);
                 ;mundur(100, 100); delay(30);
                 ;belokKanan(100, 20);
0005c1 940e 0e58 	CALL SUBOPT_0x34
                 ;scanX(1, 150);
0005c3 940e 0e31 	CALL SUBOPT_0x2E
                 ;scanX(1, 100);
                 ;bawah_lepas();
0005c5 940e 0df0 	CALL SUBOPT_0x25
                 ;scanX(1, 80);
                 ;scanTimer(30, 80, 50);
0005c7 e1ee      	LDI  R30,LOW(30)
0005c8 e0f0      	LDI  R31,HIGH(30)
                 _0x20C000A:
0005c9 93fa      	ST   -Y,R31
0005ca 93ea      	ST   -Y,R30
0005cb e5e0      	LDI  R30,LOW(80)
0005cc e0f0      	LDI  R31,HIGH(80)
                 _0x20C000B:
0005cd 93fa      	ST   -Y,R31
0005ce 93ea      	ST   -Y,R30
0005cf e3a2      	LDI  R26,LOW(50)
0005d0 e0b0      	LDI  R27,0
0005d1 de3c      	RCALL _scanTimer
                 ;ambil(20);
0005d2 940e 0e5b 	CALL SUBOPT_0x35
0005d4 9508      	RET
                 ; .FEND
                 ;void fromAtoGreen() {
                 _fromAtoGreen:
                 ; .FSTART _fromAtoGreen
                 ;mundur(100, 100); delay(30);
0005d5 940e 0e45 	CALL SUBOPT_0x31
0005d7 e1ae      	LDI  R26,LOW(30)
0005d8 940e 0e4e 	CALL SUBOPT_0x33
                 ;belokKanan(100, 0); belokKanan(100, 20);
0005da 940e 0e26 	CALL SUBOPT_0x2B
0005dc 940e 0e29 	CALL SUBOPT_0x2C
                 ;scanX(1, 80);
                 ;scanX(2, 150);
0005de 940e 0db0 	CALL SUBOPT_0x1D
0005e0 e9a6      	LDI  R26,LOW(150)
0005e1 c00f      	RJMP _0x20C0009
                 ;scanX(1, 80);
                 ;scanTimer(35, 95, 50);
                 ;taruh(20);
                 ; .FEND
                 ;void fromAtoYellow() {
                 _fromAtoYellow:
                 ; .FSTART _fromAtoYellow
                 ;scanX(1, 100);
0005e2 940e 0e3a 	CALL SUBOPT_0x2F
0005e4 940e 0de5 	CALL SUBOPT_0x23
                 ;belokKiri(100, 20);
0005e6 940e 0de9 	CALL SUBOPT_0x24
0005e8 940e 0e23 	CALL SUBOPT_0x2A
                 ;scanX(1, 80);
                 ;rem(50);
0005ea e3a2      	LDI  R26,LOW(50)
0005eb e0b0      	LDI  R27,0
0005ec dcd2      	RCALL _rem
                 ;taruh(20);
0005ed c00d      	RJMP _0x20C0008
                 ; .FEND
                 ;void fromAtoRed() {
                 _fromAtoRed:
                 ; .FSTART _fromAtoRed
                 ;scanX(1, 120);
0005ee 940e 0e3a 	CALL SUBOPT_0x2F
0005f0 e7a8      	LDI  R26,LOW(120)
                 _0x20C0009:
0005f1 e0b0      	LDI  R27,0
0005f2 ddf7      	RCALL _scanX
                 ;scanX(1, 80);
0005f3 940e 0db9 	CALL SUBOPT_0x1F
                 ;scanTimer(35, 95, 50);
0005f5 e2e3      	LDI  R30,LOW(35)
0005f6 e0f0      	LDI  R31,HIGH(35)
0005f7 940e 0e2c 	CALL SUBOPT_0x2D
0005f9 940e 0e3f 	CALL SUBOPT_0x30
                 ;taruh(20);
                 _0x20C0008:
0005fb e1a4      	LDI  R26,LOW(20)
0005fc e0b0      	LDI  R27,0
0005fd de91      	RCALL _taruh
0005fe 9508      	RET
                 ; .FEND
                 ;void vertikalLineD(void);
                 ;void fromGreenAtoD() {
                 _fromGreenAtoD:
                 ; .FSTART _fromGreenAtoD
                 ;if(positionD == 0) {
0005ff 940e 0e5f 	CALL SUBOPT_0x36
000601 f439      	BRNE _0xF1
                 ;mundur(100, 100); delay(30);
000602 940e 0e45 	CALL SUBOPT_0x31
000604 e1ae      	LDI  R26,LOW(30)
000605 940e 0e4a 	CALL SUBOPT_0x32
                 ;belokKiri(100, 20);
000607 de6e      	RCALL _belokKiri
                 ;} else if(positionD == 1) {
000608 c03a      	RJMP _0xF2
                 _0xF1:
000609 940e 0e65 	CALL SUBOPT_0x37
00060b 9711      	SBIW R26,1
00060c f459      	BRNE _0xF3
                 ;mundur(100, 100); delay(30);
00060d 940e 0e45 	CALL SUBOPT_0x31
00060f e1ae      	LDI  R26,LOW(30)
000610 940e 0e4e 	CALL SUBOPT_0x33
                 ;belokKanan(100, 0); belokKanan(100, 20);
000612 940e 0e26 	CALL SUBOPT_0x2B
000614 940e 0e58 	CALL SUBOPT_0x34
                 ;scanX(1, 80);
000616 e5a0      	LDI  R26,LOW(80)
000617 c022      	RJMP _0x17D
                 ;scanX(1, 100);
                 ;belokKanan(100, 20);
                 ;} else if(positionD == 2) {
                 _0xF3:
000618 940e 0e65 	CALL SUBOPT_0x37
00061a 9712      	SBIW R26,2
00061b f461      	BRNE _0xF5
                 ;mundur(100, 100); delay(30);
00061c 940e 0e45 	CALL SUBOPT_0x31
00061e e1ae      	LDI  R26,LOW(30)
00061f 940e 0e4e 	CALL SUBOPT_0x33
                 ;belokKanan(100, 0); belokKanan(100, 20);
000621 940e 0e26 	CALL SUBOPT_0x2B
000623 940e 0e29 	CALL SUBOPT_0x2C
                 ;scanX(1, 80);
                 ;scanX(2, 150);
000625 e0e2      	LDI  R30,LOW(2)
000626 e0f0      	LDI  R31,HIGH(2)
000627 c00f      	RJMP _0x17E
                 ;scanX(1, 100);
                 ;belokKanan(100, 20);
                 ;} else if(positionD == 3) {
                 _0xF5:
000628 940e 0e65 	CALL SUBOPT_0x37
00062a 9713      	SBIW R26,3
00062b f4b9      	BRNE _0xF7
                 ;mundur(100, 100); delay(30);
00062c 940e 0e45 	CALL SUBOPT_0x31
00062e e1ae      	LDI  R26,LOW(30)
00062f 940e 0e4e 	CALL SUBOPT_0x33
                 ;belokKanan(100, 0); belokKanan(100, 20);
000631 940e 0e26 	CALL SUBOPT_0x2B
000633 940e 0e29 	CALL SUBOPT_0x2C
                 ;scanX(1, 80);
                 ;scanX(4, 150);
000635 e0e4      	LDI  R30,LOW(4)
000636 e0f0      	LDI  R31,HIGH(4)
                 _0x17E:
000637 93fa      	ST   -Y,R31
000638 93ea      	ST   -Y,R30
000639 e9a6      	LDI  R26,LOW(150)
                 _0x17D:
00063a e0b0      	LDI  R27,0
00063b ddae      	RCALL _scanX
                 ;scanX(1, 100);
00063c 940e 0e3a 	CALL SUBOPT_0x2F
00063e 940e 0de5 	CALL SUBOPT_0x23
                 ;belokKanan(100, 20);
000640 940e 0de9 	CALL SUBOPT_0x24
000642 de28      	RCALL _belokKanan
                 ;vertikalLineD();
                 _0xF7:
                 _0xF2:
000643 c08d      	RJMP _0x20C0007
                 ; .FEND
                 ;void fromYellowAtoD() {
                 _fromYellowAtoD:
                 ; .FSTART _fromYellowAtoD
                 ;if(positionD == 0) {
000644 940e 0e5f 	CALL SUBOPT_0x36
000646 f489      	BRNE _0xF8
                 ;mundur(100, 100); delay(30);
000647 940e 0e45 	CALL SUBOPT_0x31
000649 e1ae      	LDI  R26,LOW(30)
00064a 940e 0e6a 	CALL SUBOPT_0x38
                 ;belokKiri(80, 20);
00064c 940e 0e23 	CALL SUBOPT_0x2A
                 ;scanX(1, 80);
                 ;scanX(3, 150);
00064e 940e 0e1b 	CALL SUBOPT_0x29
                 ;scanX(1, 100);
000650 940e 0e3a 	CALL SUBOPT_0x2F
000652 940e 0de5 	CALL SUBOPT_0x23
                 ;belokKiri(100, 20);
000654 940e 0de9 	CALL SUBOPT_0x24
000656 de1f      	RCALL _belokKiri
                 ;} else if(positionD == 1) {
000657 c030      	RJMP _0xF9
                 _0xF8:
000658 940e 0e65 	CALL SUBOPT_0x37
00065a 9711      	SBIW R26,1
00065b f479      	BRNE _0xFA
                 ;mundur(100, 100); delay(30);
00065c 940e 0e45 	CALL SUBOPT_0x31
00065e e1ae      	LDI  R26,LOW(30)
00065f 940e 0e4a 	CALL SUBOPT_0x32
                 ;belokKiri(100, 20);
000661 940e 0e23 	CALL SUBOPT_0x2A
                 ;scanX(1, 80);
                 ;scanX(1, 150);
000663 940e 0e3a 	CALL SUBOPT_0x2F
000665 940e 0e31 	CALL SUBOPT_0x2E
                 ;scanX(1, 100);
                 ;belokKiri(100, 20);
000667 940e 0de9 	CALL SUBOPT_0x24
000669 de0c      	RCALL _belokKiri
                 ;} else if(positionD == 2) {
00066a c01d      	RJMP _0xFB
                 _0xFA:
00066b 940e 0e65 	CALL SUBOPT_0x37
00066d 9712      	SBIW R26,2
00066e f459      	BRNE _0xFC
                 ;mundur(100, 100); delay(30);
00066f 940e 0e45 	CALL SUBOPT_0x31
000671 e1ae      	LDI  R26,LOW(30)
000672 940e 0e4a 	CALL SUBOPT_0x32
                 ;belokKiri(100, 20);
000674 940e 0e23 	CALL SUBOPT_0x2A
                 ;scanX(1, 80);
                 ;belokKiri(100, 20);
000676 940e 0de9 	CALL SUBOPT_0x24
000678 ddfd      	RCALL _belokKiri
                 ;} else if(positionD == 3) {
000679 c00e      	RJMP _0xFD
                 _0xFC:
00067a 940e 0e65 	CALL SUBOPT_0x37
00067c 9713      	SBIW R26,3
00067d f451      	BRNE _0xFE
                 ;mundur(100, 100); delay(30);
00067e 940e 0e45 	CALL SUBOPT_0x31
000680 e1ae      	LDI  R26,LOW(30)
000681 940e 0e4a 	CALL SUBOPT_0x32
                 ;belokKanan(100, 20);
000683 940e 0e29 	CALL SUBOPT_0x2C
                 ;scanX(1, 80);
                 ;belokKanan(100, 20);
000685 940e 0de9 	CALL SUBOPT_0x24
000687 dde3      	RCALL _belokKanan
                 ;vertikalLineD();
                 _0xFE:
                 _0xFD:
                 _0xFB:
                 _0xF9:
000688 c048      	RJMP _0x20C0007
                 ; .FEND
                 ;void fromRedAtoD() {
                 _fromRedAtoD:
                 ; .FSTART _fromRedAtoD
                 ;if(positionD == 0) {
000689 940e 0e5f 	CALL SUBOPT_0x36
00068b f499      	BRNE _0xFF
                 ;mundur(100, 100); delay(30);
00068c 940e 0e45 	CALL SUBOPT_0x31
00068e e1ae      	LDI  R26,LOW(30)
00068f 940e 0e4e 	CALL SUBOPT_0x33
                 ;belokKanan(100, 0); belokKanan(100, 20);
000691 940e 0e26 	CALL SUBOPT_0x2B
000693 940e 0e29 	CALL SUBOPT_0x2C
                 ;scanX(1, 80);
                 ;scanX(4, 150);
000695 e0e4      	LDI  R30,LOW(4)
000696 e0f0      	LDI  R31,HIGH(4)
000697 93fa      	ST   -Y,R31
000698 93ea      	ST   -Y,R30
000699 940e 0e31 	CALL SUBOPT_0x2E
                 ;scanX(1, 100);
                 ;belokKiri(100, 20);
00069b 940e 0de9 	CALL SUBOPT_0x24
00069d ddd8      	RCALL _belokKiri
                 ;} else if(positionD == 1) {
00069e c032      	RJMP _0x100
                 _0xFF:
00069f 940e 0e65 	CALL SUBOPT_0x37
0006a1 9711      	SBIW R26,1
0006a2 f489      	BRNE _0x101
                 ;mundur(100, 100); delay(30);
0006a3 940e 0e45 	CALL SUBOPT_0x31
0006a5 e1ae      	LDI  R26,LOW(30)
0006a6 940e 0e4e 	CALL SUBOPT_0x33
                 ;belokKanan(100, 0); belokKanan(100, 20);
0006a8 940e 0e26 	CALL SUBOPT_0x2B
0006aa 940e 0e29 	CALL SUBOPT_0x2C
                 ;scanX(1, 80);
                 ;scanX(2, 150);
0006ac 940e 0db0 	CALL SUBOPT_0x1D
0006ae 940e 0e31 	CALL SUBOPT_0x2E
                 ;scanX(1, 100);
                 ;belokKiri(100, 20);
0006b0 940e 0de9 	CALL SUBOPT_0x24
0006b2 ddc3      	RCALL _belokKiri
                 ;} else if(positionD == 2) {
0006b3 c01d      	RJMP _0x102
                 _0x101:
0006b4 940e 0e65 	CALL SUBOPT_0x37
0006b6 9712      	SBIW R26,2
0006b7 f479      	BRNE _0x103
                 ;mundur(100, 100); delay(30);
0006b8 940e 0e45 	CALL SUBOPT_0x31
0006ba e1ae      	LDI  R26,LOW(30)
0006bb 940e 0e4a 	CALL SUBOPT_0x32
                 ;belokKiri(100, 20);
0006bd 940e 0e23 	CALL SUBOPT_0x2A
                 ;scanX(1, 80);
                 ;scanX(1, 100);
0006bf 940e 0e3a 	CALL SUBOPT_0x2F
0006c1 940e 0de5 	CALL SUBOPT_0x23
                 ;belokKiri(100, 20);
0006c3 940e 0de9 	CALL SUBOPT_0x24
0006c5 ddb0      	RCALL _belokKiri
                 ;} else if(positionD == 3) {
0006c6 c00a      	RJMP _0x104
                 _0x103:
0006c7 940e 0e65 	CALL SUBOPT_0x37
0006c9 9713      	SBIW R26,3
0006ca f431      	BRNE _0x105
                 ;mundur(100, 100); delay(30);
0006cb 940e 0e45 	CALL SUBOPT_0x31
0006cd e1ae      	LDI  R26,LOW(30)
0006ce 940e 0e4a 	CALL SUBOPT_0x32
                 ;belokKanan(100, 20);
0006d0 dd9a      	RCALL _belokKanan
                 ;vertikalLineD();
                 _0x105:
                 _0x104:
                 _0x102:
                 _0x100:
                 _0x20C0007:
0006d1 d001      	RCALL _vertikalLineD
0006d2 9508      	RET
                 ; .FEND
                 ;void fromDto4(void);
                 ;void vertikalLineD() {
                 _vertikalLineD:
                 ; .FSTART _vertikalLineD
                 ;scanX(3, 150);
0006d3 940e 0e1b 	CALL SUBOPT_0x29
                 ;scanX(1, 100);
0006d5 940e 0e3a 	CALL SUBOPT_0x2F
0006d7 940e 0de5 	CALL SUBOPT_0x23
                 ;bawah_lepas();
0006d9 940e 0df0 	CALL SUBOPT_0x25
                 ;scanX(1, 80);
                 ;scanTimer(25, 95, 50);
0006db e1e9      	LDI  R30,LOW(25)
0006dc e0f0      	LDI  R31,HIGH(25)
0006dd 940e 0e2c 	CALL SUBOPT_0x2D
0006df 940e 0e3f 	CALL SUBOPT_0x30
                 ;ambil(20);
0006e1 940e 0e5b 	CALL SUBOPT_0x35
                 ;fromDto4();
0006e3 d001      	RCALL _fromDto4
0006e4 9508      	RET
                 ; .FEND
                 ;void returnHome(void);
                 ;void fromDto4() {
                 _fromDto4:
                 ; .FSTART _fromDto4
                 ;mundur(100, 100); delay(30);
0006e5 940e 0e45 	CALL SUBOPT_0x31
0006e7 e1ae      	LDI  R26,LOW(30)
0006e8 e0b0      	LDI  R27,0
0006e9 da86      	RCALL _delay
                 ;belokKanan(100, 10); belokKanan(100, 20);
0006ea 940e 0e74 	CALL SUBOPT_0x39
0006ec e0aa      	LDI  R26,LOW(10)
0006ed e0b0      	LDI  R27,0
0006ee 940e 0e26 	CALL SUBOPT_0x2B
0006f0 940e 0e58 	CALL SUBOPT_0x34
                 ;scanX(1, 90);
0006f2 e5aa      	LDI  R26,LOW(90)
0006f3 e0b0      	LDI  R27,0
0006f4 dcf5      	RCALL _scanX
                 ;scanX(1, 120);
0006f5 940e 0e3a 	CALL SUBOPT_0x2F
0006f7 940e 0db5 	CALL SUBOPT_0x1E
                 ;belokKiri(100, 20);
0006f9 940e 0de9 	CALL SUBOPT_0x24
0006fb dd7a      	RCALL _belokKiri
                 ;if(positionD == 0) {
0006fc 940e 0e5f 	CALL SUBOPT_0x36
0006fe f421      	BRNE _0x106
                 ;scanX(1, 100);
0006ff 940e 0e3a 	CALL SUBOPT_0x2F
000701 e6a4      	LDI  R26,LOW(100)
000702 c02b      	RJMP _0x17F
                 ;} else if(positionD == 1) {
                 _0x106:
000703 940e 0e65 	CALL SUBOPT_0x37
000705 9711      	SBIW R26,1
000706 f461      	BRNE _0x108
                 ;scanX(1, 100);
000707 940e 0e3a 	CALL SUBOPT_0x2F
000709 940e 0de5 	CALL SUBOPT_0x23
                 ;scanX(1, 150);
00070b 940e 0e3a 	CALL SUBOPT_0x2F
00070d e9a6      	LDI  R26,LOW(150)
00070e e0b0      	LDI  R27,0
00070f dcda      	RCALL _scanX
                 ;scanX(1, 120);
000710 e0e1      	LDI  R30,LOW(1)
000711 e0f0      	LDI  R31,HIGH(1)
000712 c018      	RJMP _0x180
                 ;} else if(positionD == 2) {
                 _0x108:
000713 940e 0e65 	CALL SUBOPT_0x37
000715 9712      	SBIW R26,2
000716 f451      	BRNE _0x10A
                 ;scanX(1, 100);
000717 940e 0e3a 	CALL SUBOPT_0x2F
000719 940e 0de5 	CALL SUBOPT_0x23
                 ;scanX(4, 150);
00071b e0e4      	LDI  R30,LOW(4)
00071c e0f0      	LDI  R31,HIGH(4)
00071d 93fa      	ST   -Y,R31
00071e 93ea      	ST   -Y,R30
00071f e9a6      	LDI  R26,LOW(150)
000720 c00d      	RJMP _0x17F
                 ;} else if(positionD == 3) {
                 _0x10A:
000721 940e 0e65 	CALL SUBOPT_0x37
000723 9713      	SBIW R26,3
000724 f459      	BRNE _0x10C
                 ;scanX(1, 100);
000725 940e 0e3a 	CALL SUBOPT_0x2F
000727 940e 0de5 	CALL SUBOPT_0x23
                 ;scanX(6, 120);
000729 e0e6      	LDI  R30,LOW(6)
00072a e0f0      	LDI  R31,HIGH(6)
                 _0x180:
00072b 93fa      	ST   -Y,R31
00072c 93ea      	ST   -Y,R30
00072d e7a8      	LDI  R26,LOW(120)
                 _0x17F:
00072e e0b0      	LDI  R27,0
00072f dcba      	RCALL _scanX
                 ;scanTimer(75, 95, 50);
                 _0x10C:
000730 e4eb      	LDI  R30,LOW(75)
000731 e0f0      	LDI  R31,HIGH(75)
000732 940e 0e2c 	CALL SUBOPT_0x2D
000734 940e 0e3f 	CALL SUBOPT_0x30
                 ;taruh(20);
000736 e1a4      	LDI  R26,LOW(20)
000737 e0b0      	LDI  R27,0
000738 dd56      	RCALL _taruh
                 ;returnHome();
000739 d001      	RCALL _returnHome
00073a 9508      	RET
                 ; .FEND
                 ;void returnHome() {
                 _returnHome:
                 ; .FSTART _returnHome
                 ;mundur(100, 100); delay(20);
00073b 940e 0e45 	CALL SUBOPT_0x31
00073d e1a4      	LDI  R26,LOW(20)
00073e 940e 0e6a 	CALL SUBOPT_0x38
                 ;belokKanan(80, 20);
000740 940e 0e58 	CALL SUBOPT_0x34
                 ;scanX(1, 100);
000742 940e 0de5 	CALL SUBOPT_0x23
                 ;scanX(3, 150);
000744 940e 0e1b 	CALL SUBOPT_0x29
                 ;scanX(1, 100);
000746 940e 0e3a 	CALL SUBOPT_0x2F
000748 940e 0de5 	CALL SUBOPT_0x23
                 ;belokKanan(100, 20);
00074a 940e 0de9 	CALL SUBOPT_0x24
00074c 940e 0e58 	CALL SUBOPT_0x34
                 ;scanX(1, 120);
00074e 940e 0db5 	CALL SUBOPT_0x1E
                 ;scanX(1, 80);
000750 940e 0db9 	CALL SUBOPT_0x1F
                 ;scanTimer(35, 95, 50);
000752 e2e3      	LDI  R30,LOW(35)
000753 e0f0      	LDI  R31,HIGH(35)
000754 940e 0e2c 	CALL SUBOPT_0x2D
000756 940e 0e3f 	CALL SUBOPT_0x30
                 ;parkir();
000758 dbb1      	RCALL _parkir
000759 9508      	RET
                 ; .FEND
                 ;void Program_Jalan()
                 _Program_Jalan:
                 ; .FSTART _Program_Jalan
                 ;maju_delay(80,45);
00075a e5e0      	LDI  R30,LOW(80)
00075b e0f0      	LDI  R31,HIGH(80)
00075c 93fa      	ST   -Y,R31
00075d 93ea      	ST   -Y,R30
00075e e2ad      	LDI  R26,LOW(45)
00075f e0b0      	LDI  R27,0
000760 db6b      	RCALL _maju_delay
                 ;scanX(2, 120);
000761 940e 0db0 	CALL SUBOPT_0x1D
000763 940e 0db5 	CALL SUBOPT_0x1E
                 ;bawah_lepas();
000765 940e 0df0 	CALL SUBOPT_0x25
                 ;scanX(1, 80);
                 ;scanTimer(30, 80, 50);
000767 e1ee      	LDI  R30,LOW(30)
000768 e0f0      	LDI  R31,HIGH(30)
000769 93fa      	ST   -Y,R31
00076a 93ea      	ST   -Y,R30
00076b e5e0      	LDI  R30,LOW(80)
00076c e0f0      	LDI  R31,HIGH(80)
00076d 940e 0e3f 	CALL SUBOPT_0x30
                 ;ambil(20);
00076f 940e 0e5b 	CALL SUBOPT_0x35
                 ;delay(50);
000771 940e 0e79 	CALL SUBOPT_0x3A
                 ;isWarna = checkWarna();
                 ;if(isWarna == merah) {
000773 f411      	BRNE _0x10D
                 ;fromBtoRed();
000774 ddc9      	RCALL _fromBtoRed
                 ;} else if(isWarna == kuning) {
000775 c00b      	RJMP _0x10E
                 _0x10D:
000776 940e 0e85 	CALL SUBOPT_0x3B
000778 9711      	SBIW R26,1
000779 f411      	BRNE _0x10F
                 ;fromBtoYellow();
00077a dda2      	RCALL _fromBtoYellow
                 ;} else if(isWarna == hijau) {
00077b c005      	RJMP _0x110
                 _0x10F:
00077c 940e 0e85 	CALL SUBOPT_0x3B
00077e 9712      	SBIW R26,2
00077f f401      	BRNE _0x111
                 ;fromBtoGreen();
                 ;} else {
                 _0x111:
                 ;fromBtoGreen();
                 _0x181:
000780 dd83      	RCALL _fromBtoGreen
                 _0x110:
                 _0x10E:
                 ;isWarna = checkWarna();
000781 dd40      	RCALL _checkWarna
000782 93e0 02b6 	STS  _isWarna,R30
000784 93f0 02b7 	STS  _isWarna+1,R31
                 ;if(isWarna == merah) {
000786 9730      	SBIW R30,0
000787 f411      	BRNE _0x113
                 ;fromCtoRed();
000788 de24      	RCALL _fromCtoRed
                 ;} else if(isWarna == kuning) {
000789 c00b      	RJMP _0x114
                 _0x113:
00078a 940e 0e85 	CALL SUBOPT_0x3B
00078c 9711      	SBIW R26,1
00078d f411      	BRNE _0x115
                 ;fromCtoYellow();
00078e ddf7      	RCALL _fromCtoYellow
                 ;} else if(isWarna == hijau) {
00078f c005      	RJMP _0x116
                 _0x115:
000790 940e 0e85 	CALL SUBOPT_0x3B
000792 9712      	SBIW R26,2
000793 f401      	BRNE _0x117
                 ;fromCtoGreen();
                 ;} else {
                 _0x117:
                 ;fromCtoGreen();
                 _0x182:
000794 ddc5      	RCALL _fromCtoGreen
                 _0x116:
                 _0x114:
                 ;delay(50);
000795 940e 0e79 	CALL SUBOPT_0x3A
                 ;isWarna = checkWarna();
                 ;if(isWarna == merah) {
000797 f419      	BRNE _0x119
                 ;fromAtoRed();
000798 de55      	RCALL _fromAtoRed
                 ;fromRedAtoD();
000799 deef      	RCALL _fromRedAtoD
                 ;} else if(isWarna == kuning) {
00079a c00d      	RJMP _0x11A
                 _0x119:
00079b 940e 0e85 	CALL SUBOPT_0x3B
00079d 9711      	SBIW R26,1
00079e f419      	BRNE _0x11B
                 ;fromAtoYellow();
00079f de42      	RCALL _fromAtoYellow
                 ;fromYellowAtoD();
0007a0 dea3      	RCALL _fromYellowAtoD
                 ;} else if(isWarna == hijau) {
0007a1 c006      	RJMP _0x11C
                 _0x11B:
0007a2 940e 0e85 	CALL SUBOPT_0x3B
0007a4 9712      	SBIW R26,2
0007a5 f401      	BRNE _0x11D
                 ;fromAtoGreen();
                 ;fromGreenAtoD();
                 ;} else {
                 _0x11D:
                 ;fromAtoGreen();
                 _0x183:
0007a6 de2e      	RCALL _fromAtoGreen
                 ;fromGreenAtoD();
0007a7 de57      	RCALL _fromGreenAtoD
                 _0x11C:
                 _0x11A:
0007a8 9508      	RET
                 ; .FEND
                 ;void runBot(void);
                 ;void calibration(void);
                 ;void Program_Jalan(void);
                 ;void test_motor(void);
                 ;void test_tombol(void);
                 ;void map_select(int childMenuSelect);
                 ;void tepuk_tangan(void);
                 ;void changeMenu(int menuSelect, bool isSelect, int childMenuSelect) {
                 ; 0000 006E void changeMenu(int menuSelect, _Bool isSelect, int childMenuSelect) {
                 _changeMenu:
                 ; .FSTART _changeMenu
                 ;lampu = 0;
0007a9 93ba      	ST   -Y,R27
0007aa 93aa      	ST   -Y,R26
                 ;	menuSelect -> Y+3
                 ;	isSelect -> Y+2
                 ;	childMenuSelect -> Y+0
0007ab 98c3      	CBI  0x18,3
                 ;count_btn = menuSelect;
0007ac 81eb      	LDD  R30,Y+3
0007ad 81fc      	LDD  R31,Y+3+1
0007ae 93e0 0287 	STS  _count_btn,R30
0007b0 93f0 0288 	STS  _count_btn+1,R31
                 ;count_child_btn = childMenuSelect;
0007b2 81e8      	LD   R30,Y
0007b3 81f9      	LDD  R31,Y+1
0007b4 93e0 0289 	STS  _count_child_btn,R30
0007b6 93f0 028a 	STS  _count_child_btn+1,R31
                 ;if(!isSelect && !isChildSelect) {
0007b8 81ea      	LDD  R30,Y+2
0007b9 30e0      	CPI  R30,0
0007ba f421      	BRNE _0x122
0007bb 91e0 028b 	LDS  R30,_isChildSelect
0007bd 30e0      	CPI  R30,0
0007be f009      	BREQ _0x123
                 _0x122:
0007bf c006      	RJMP _0x121
                 _0x123:
                 ;lcd_clear();
0007c0 940e 0e8a 	CALL SUBOPT_0x3C
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Menu");
                +
0007c2 eeac     +LDI R26 , LOW ( 2 * _0x0 + ( 100 ) )
0007c3 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 100 ) )
                 	__POINTW2FN _0x0,100
0007c4 940e 0c93 	CALL _lcd_putsf
                 ;switch (menuSelect) {
                 _0x121:
0007c6 81eb      	LDD  R30,Y+3
0007c7 81fc      	LDD  R31,Y+3+1
                 ;case 0: // Calibration
0007c8 9730      	SBIW R30,0
0007c9 f469      	BRNE _0x127
                 ;if(isSelect) { calibration(); break; }
0007ca 81ea      	LDD  R30,Y+2
0007cb 30e0      	CPI  R30,0
0007cc f011      	BREQ _0x128
0007cd d090      	RCALL _calibration
0007ce c066      	RJMP _0x126
                 ;lcd_gotoxy(0, 1);
                 _0x128:
0007cf e0e0      	LDI  R30,LOW(0)
0007d0 940e 0dac 	CALL SUBOPT_0x1C
                 ;lcd_putsf("Calibration");
                +
0007d2 efa1     +LDI R26 , LOW ( 2 * _0x0 + ( 105 ) )
0007d3 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 105 ) )
                 	__POINTW2FN _0x0,105
0007d4 940e 0c93 	CALL _lcd_putsf
                 ;break;
0007d6 c05e      	RJMP _0x126
                 ;case 1: // Run bot
                 _0x127:
0007d7 30e1      	CPI  R30,LOW(0x1)
0007d8 e0a0      	LDI  R26,HIGH(0x1)
0007d9 07fa      	CPC  R31,R26
0007da f489      	BRNE _0x129
                 ;if(isSelect || isChildSelect) { runBot(); break; }
0007db 81ea      	LDD  R30,Y+2
0007dc 30e0      	CPI  R30,0
0007dd f421      	BRNE _0x12B
0007de 91e0 028b 	LDS  R30,_isChildSelect
0007e0 30e0      	CPI  R30,0
0007e1 f011      	BREQ _0x12A
                 _0x12B:
0007e2 d053      	RCALL _runBot
0007e3 c051      	RJMP _0x126
                 ;lcd_gotoxy(0, 1);
                 _0x12A:
0007e4 e0e0      	LDI  R30,LOW(0)
0007e5 940e 0dac 	CALL SUBOPT_0x1C
                 ;lcd_putsf("Run Bot");
                +
0007e7 efad     +LDI R26 , LOW ( 2 * _0x0 + ( 117 ) )
0007e8 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 117 ) )
                 	__POINTW2FN _0x0,117
0007e9 940e 0c93 	CALL _lcd_putsf
                 ;break;
0007eb c049      	RJMP _0x126
                 ;case 2: // Map Select
                 _0x129:
0007ec 30e2      	CPI  R30,LOW(0x2)
0007ed e0a0      	LDI  R26,HIGH(0x2)
0007ee 07fa      	CPC  R31,R26
0007ef f499      	BRNE _0x12D
                 ;if(isSelect || isChildSelect) { map_select(childMenuSelect); break; }
0007f0 81ea      	LDD  R30,Y+2
0007f1 30e0      	CPI  R30,0
0007f2 f421      	BRNE _0x12F
0007f3 91e0 028b 	LDS  R30,_isChildSelect
0007f5 30e0      	CPI  R30,0
0007f6 f021      	BREQ _0x12E
                 _0x12F:
0007f7 81a8      	LD   R26,Y
0007f8 81b9      	LDD  R27,Y+1
0007f9 d06e      	RCALL _map_select
0007fa c03a      	RJMP _0x126
                 ;lcd_gotoxy(0, 1);
                 _0x12E:
0007fb e0e0      	LDI  R30,LOW(0)
0007fc 940e 0dac 	CALL SUBOPT_0x1C
                 ;lcd_putsf("Map");
                +
0007fe e0a5     +LDI R26 , LOW ( 2 * _0x0 + ( 125 ) )
0007ff e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 125 ) )
                 	__POINTW2FN _0x0,125
000800 940e 0c93 	CALL _lcd_putsf
                 ;break;
000802 c032      	RJMP _0x126
                 ;case 3: // Test Motor
                 _0x12D:
000803 30e3      	CPI  R30,LOW(0x3)
000804 e0a0      	LDI  R26,HIGH(0x3)
000805 07fa      	CPC  R31,R26
000806 f469      	BRNE _0x131
                 ;if(isSelect) { test_motor(); break; }
000807 81ea      	LDD  R30,Y+2
000808 30e0      	CPI  R30,0
000809 f011      	BREQ _0x132
00080a d0a8      	RCALL _test_motor
00080b c029      	RJMP _0x126
                 ;lcd_gotoxy(0, 1);
                 _0x132:
00080c e0e0      	LDI  R30,LOW(0)
00080d 940e 0dac 	CALL SUBOPT_0x1C
                 ;lcd_putsf("Motor");
                +
00080f e0a9     +LDI R26 , LOW ( 2 * _0x0 + ( 129 ) )
000810 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 129 ) )
                 	__POINTW2FN _0x0,129
000811 940e 0c93 	CALL _lcd_putsf
                 ;break;
000813 c021      	RJMP _0x126
                 ;case 4: // Test tombol
                 _0x131:
000814 30e4      	CPI  R30,LOW(0x4)
000815 e0a0      	LDI  R26,HIGH(0x4)
000816 07fa      	CPC  R31,R26
000817 f469      	BRNE _0x133
                 ;if(isSelect) { test_tombol(); break; }
000818 81ea      	LDD  R30,Y+2
000819 30e0      	CPI  R30,0
00081a f011      	BREQ _0x134
00081b d0c5      	RCALL _test_tombol
00081c c018      	RJMP _0x126
                 ;lcd_gotoxy(0, 1);
                 _0x134:
00081d e0e0      	LDI  R30,LOW(0)
00081e 940e 0dac 	CALL SUBOPT_0x1C
                 ;lcd_putsf("Button");
                +
000820 e0af     +LDI R26 , LOW ( 2 * _0x0 + ( 135 ) )
000821 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 135 ) )
                 	__POINTW2FN _0x0,135
000822 940e 0c93 	CALL _lcd_putsf
                 ;break;
000824 c010      	RJMP _0x126
                 ;case 5: // Tepuk tangan XD
                 _0x133:
000825 30e5      	CPI  R30,LOW(0x5)
000826 e0a0      	LDI  R26,HIGH(0x5)
000827 07fa      	CPC  R31,R26
000828 f461      	BRNE _0x137
                 ;if(isSelect) { tepuk_tangan(); break; }
000829 81ea      	LDD  R30,Y+2
00082a 30e0      	CPI  R30,0
00082b f011      	BREQ _0x136
00082c d0ef      	RCALL _tepuk_tangan
00082d c007      	RJMP _0x126
                 ;lcd_gotoxy(0, 1);
                 _0x136:
00082e e0e0      	LDI  R30,LOW(0)
00082f 940e 0dac 	CALL SUBOPT_0x1C
                 ;lcd_putsf("Clap XD");
                +
000831 e1a6     +LDI R26 , LOW ( 2 * _0x0 + ( 142 ) )
000832 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 142 ) )
                 	__POINTW2FN _0x0,142
000833 940e 0c93 	CALL _lcd_putsf
                 ;break;
                 ;default:
                 _0x137:
                 ;break;
                 _0x126:
000835 c221      	RJMP _0x20C0005
                 ; .FEND
                 ;void runBot() {
                 _runBot:
                 ; .FSTART _runBot
                 ;if(!isChildSelect) {
000836 91e0 028b 	LDS  R30,_isChildSelect
000838 30e0      	CPI  R30,0
000839 f471      	BRNE _0x138
                 ;lcd_clear();
00083a 940e 0e8a 	CALL SUBOPT_0x3C
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Run Bot");
                +
00083c efad     +LDI R26 , LOW ( 2 * _0x0 + ( 117 ) )
00083d e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 117 ) )
                 	__POINTW2FN _0x0,117
00083e 940e 0e8e 	CALL SUBOPT_0x3D
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("Click 2 to start");
                +
000840 e1ae     +LDI R26 , LOW ( 2 * _0x0 + ( 150 ) )
000841 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 150 ) )
                 	__POINTW2FN _0x0,150
000842 940e 0c93 	CALL _lcd_putsf
                 ;isChildSelect = true;
000844 e0e1      	LDI  R30,LOW(1)
000845 93e0 028b 	STS  _isChildSelect,R30
                 ;} else if(isChildSelect) {
000847 c015      	RJMP _0x139
                 _0x138:
000848 91e0 028b 	LDS  R30,_isChildSelect
00084a 30e0      	CPI  R30,0
00084b f089      	BREQ _0x13A
                 ;lcd_clear();
00084c 940e 0c48 	CALL _lcd_clear
                 ;lcd_gotoxy(0, 1);
00084e e0e0      	LDI  R30,LOW(0)
00084f 940e 0dac 	CALL SUBOPT_0x1C
                 ;lcd_putsf("Running...");
                +
000851 e2af     +LDI R26 , LOW ( 2 * _0x0 + ( 167 ) )
000852 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 167 ) )
                 	__POINTW2FN _0x0,167
000853 940e 0c93 	CALL _lcd_putsf
                 ;Program_Jalan();
000855 df04      	RCALL _Program_Jalan
                 ;isChildSelect = false;
000856 e0e0      	LDI  R30,LOW(0)
000857 93e0 028b 	STS  _isChildSelect,R30
                 ;count_child_btn = 0;
000859 940e 0e92 	CALL SUBOPT_0x3E
                 ;changeMenu(0, false, 0);
00085b 940e 0e98 	CALL SUBOPT_0x3F
                 _0x13A:
                 _0x139:
00085d 9508      	RET
                 ; .FEND
                 ;void calibration() {
                 _calibration:
                 ; .FSTART _calibration
                 ;scan_garis();
00085e d990      	RCALL _scan_garis
                 ;delay(300);
00085f e2ac      	LDI  R26,LOW(300)
000860 e0b1      	LDI  R27,HIGH(300)
000861 d90e      	RCALL _delay
                 ;scan_back();
000862 d9ac      	RCALL _scan_back
                 ;delay(100);
000863 e6a4      	LDI  R26,LOW(100)
000864 e0b0      	LDI  R27,0
000865 d90a      	RCALL _delay
                 ;hit_tengah();
000866 d9c8      	RCALL _hit_tengah
                 ;isChildSelect = false;
000867 c075      	RJMP _0x20C0006
                 ;changeMenu(0, false, 0);
                 ; .FEND
                 ;void map_select(int childMenuSelect) {
                 _map_select:
                 ; .FSTART _map_select
                 ;switch(childMenuSelect) {
000868 93ba      	ST   -Y,R27
000869 93aa      	ST   -Y,R26
                 ;	childMenuSelect -> Y+0
00086a 81e8      	LD   R30,Y
00086b 81f9      	LDD  R31,Y+1
                 ;case 0:
00086c 9730      	SBIW R30,0
00086d f4f1      	BRNE _0x13E
                 ;if(!isChildSelect) {
00086e 91e0 028b 	LDS  R30,_isChildSelect
000870 30e0      	CPI  R30,0
000871 f471      	BRNE _0x13F
                 ;isChildSelect = true;
000872 e0e1      	LDI  R30,LOW(1)
000873 93e0 028b 	STS  _isChildSelect,R30
                 ;lcd_clear();
000875 940e 0e8a 	CALL SUBOPT_0x3C
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Map Biru");
                +
000877 e3aa     +LDI R26 , LOW ( 2 * _0x0 + ( 178 ) )
000878 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 178 ) )
                 	__POINTW2FN _0x0,178
000879 940e 0e8e 	CALL SUBOPT_0x3D
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("Click 2 to select");
                +
00087b e4a3     +LDI R26 , LOW ( 2 * _0x0 + ( 187 ) )
00087c e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 187 ) )
                 	__POINTW2FN _0x0,187
00087d 940e 0c93 	CALL _lcd_putsf
                 ;} else if(isChildSelect) {
00087f c00b      	RJMP _0x140
                 _0x13F:
000880 91e0 028b 	LDS  R30,_isChildSelect
000882 30e0      	CPI  R30,0
000883 f039      	BREQ _0x141
                 ;mapMirror[0] = 0;
000884 940e 0ea1 	CALL SUBOPT_0x40
                 ;count_child_btn = 0;
000886 940e 0e92 	CALL SUBOPT_0x3E
                 ;isChildSelect = false;
000888 e0e0      	LDI  R30,LOW(0)
000889 940e 0ea8 	CALL SUBOPT_0x41
                 ;changeMenu(0, false, 0);
                 ;break;
                 _0x141:
                 _0x140:
00088b c025      	RJMP _0x13D
                 ;case 1:
                 _0x13E:
00088c 30e1      	CPI  R30,LOW(0x1)
00088d e0a0      	LDI  R26,HIGH(0x1)
00088e 07fa      	CPC  R31,R26
00088f f509      	BRNE _0x146
                 ;if(!isChildSelect) {
000890 91e0 028b 	LDS  R30,_isChildSelect
000892 30e0      	CPI  R30,0
000893 f471      	BRNE _0x143
                 ;isChildSelect = true;
000894 e0e1      	LDI  R30,LOW(1)
000895 93e0 028b 	STS  _isChildSelect,R30
                 ;lcd_clear();
000897 940e 0e8a 	CALL SUBOPT_0x3C
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Map Merah");
                +
000899 e5a5     +LDI R26 , LOW ( 2 * _0x0 + ( 205 ) )
00089a e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 205 ) )
                 	__POINTW2FN _0x0,205
00089b 940e 0e8e 	CALL SUBOPT_0x3D
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("Click 2 to select");
                +
00089d e4a3     +LDI R26 , LOW ( 2 * _0x0 + ( 187 ) )
00089e e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 187 ) )
                 	__POINTW2FN _0x0,187
00089f 940e 0c93 	CALL _lcd_putsf
                 ;} else if(isChildSelect) {
0008a1 c00f      	RJMP _0x144
                 _0x143:
0008a2 91e0 028b 	LDS  R30,_isChildSelect
0008a4 30e0      	CPI  R30,0
0008a5 f059      	BREQ _0x145
                 ;mapMirror[0] = 1;
0008a6 e2aa      	LDI  R26,LOW(_mapMirror)
0008a7 e0b0      	LDI  R27,HIGH(_mapMirror)
0008a8 e0e1      	LDI  R30,LOW(1)
0008a9 e0f0      	LDI  R31,HIGH(1)
0008aa 940e 0f6f 	CALL __EEPROMWRW
                 ;count_child_btn = 0;
0008ac 940e 0e92 	CALL SUBOPT_0x3E
                 ;isChildSelect = false;
0008ae e0e0      	LDI  R30,LOW(0)
0008af 940e 0ea8 	CALL SUBOPT_0x41
                 ;changeMenu(0, false, 0);
                 ;break;
                 _0x145:
                 _0x144:
                 ;default:
                 _0x146:
                 ;break;
                 _0x13D:
0008b1 940c 0c46 	JMP  _0x20C0003
                 ; .FEND
                 ;void test_motor()
                 _test_motor:
                 ; .FSTART _test_motor
                 ;lcd_clear();
0008b3 940e 0e8a 	CALL SUBOPT_0x3C
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Test Motor");
                +
0008b5 e5af     +LDI R26 , LOW ( 2 * _0x0 + ( 215 ) )
0008b6 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 215 ) )
                 	__POINTW2FN _0x0,215
0008b7 940e 0e8e 	CALL SUBOPT_0x3D
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("+100 +100");
                +
0008b9 e6aa     +LDI R26 , LOW ( 2 * _0x0 + ( 226 ) )
0008ba e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 226 ) )
                 	__POINTW2FN _0x0,226
0008bb 940e 0c93 	CALL _lcd_putsf
                 ;setMotor(100, 100);
0008bd 940e 0e74 	CALL SUBOPT_0x39
0008bf 940e 0eab 	CALL SUBOPT_0x42
                 ;delay_ms(200);
                 ;lcd_gotoxy(0, 1);
0008c1 e0e0      	LDI  R30,LOW(0)
0008c2 940e 0dac 	CALL SUBOPT_0x1C
                 ;lcd_putsf("-100 -100");
                +
0008c4 e7a4     +LDI R26 , LOW ( 2 * _0x0 + ( 236 ) )
0008c5 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 236 ) )
                 	__POINTW2FN _0x0,236
0008c6 940e 0eb3 	CALL SUBOPT_0x43
                 ;setMotor(-100, -100);
0008c8 940e 0eba 	CALL SUBOPT_0x44
                 ;delay_ms(200);
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("+100 -100");
                +
0008ca e7ae     +LDI R26 , LOW ( 2 * _0x0 + ( 246 ) )
0008cb e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 246 ) )
                 	__POINTW2FN _0x0,246
0008cc 940e 0c93 	CALL _lcd_putsf
                 ;setMotor(100, -100);
0008ce 940e 0e74 	CALL SUBOPT_0x39
0008d0 940e 0eba 	CALL SUBOPT_0x44
                 ;delay_ms(200);
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("-100 +100");
                +
0008d2 e8a8     +LDI R26 , LOW ( 2 * _0x0 + ( 256 ) )
0008d3 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 256 ) )
                 	__POINTW2FN _0x0,256
0008d4 940e 0eb3 	CALL SUBOPT_0x43
                 ;setMotor(-100, 100);
0008d6 940e 0eab 	CALL SUBOPT_0x42
                 ;delay_ms(200);
                 ;rem(100);
0008d8 e6a4      	LDI  R26,LOW(100)
0008d9 e0b0      	LDI  R27,0
0008da d9e4      	RCALL _rem
                 ;lcd_clear();
0008db 940e 0e8a 	CALL SUBOPT_0x3C
                 ;lcd_gotoxy(0, 0);
                 ;isChildSelect = false;
                 _0x20C0006:
0008dd e0e0      	LDI  R30,LOW(0)
0008de 940e 0ea8 	CALL SUBOPT_0x41
                 ;changeMenu(0, false, 0);
0008e0 9508      	RET
                 ; .FEND
                 ;void test_tombol()
                 _test_tombol:
                 ; .FSTART _test_tombol
                 ;lcd_gotoxy(0, 1);
0008e1 e0e0      	LDI  R30,LOW(0)
0008e2 940e 0dac 	CALL SUBOPT_0x1C
                 ;lcd_putsf("Click 1 to exit");
                +
0008e4 e9a2     +LDI R26 , LOW ( 2 * _0x0 + ( 266 ) )
0008e5 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 266 ) )
                 	__POINTW2FN _0x0,266
0008e6 940e 0c93 	CALL _lcd_putsf
                 ;isTestTombol = true;
0008e8 e0e1      	LDI  R30,LOW(1)
0008e9 93e0 028c 	STS  _isTestTombol,R30
                 ;while (1)
                 _0x147:
                 ;if (!isTestTombol) break;
0008eb 91e0 028c 	LDS  R30,_isTestTombol
0008ed 30e0      	CPI  R30,0
0008ee f161      	BREQ _0x149
                 ;if ((t1 == 0))
0008ef 9998      	SBIC 0x13,0
0008f0 c00e      	RJMP _0x14B
                 ;lcd_gotoxy(0, 0);
0008f1 e0e0      	LDI  R30,LOW(0)
0008f2 940e 0d05 	CALL SUBOPT_0x3
                 ;lcd_putsf("tombol = 1     ");
                +
0008f4 eaa2     +LDI R26 , LOW ( 2 * _0x0 + ( 282 ) )
0008f5 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 282 ) )
                 	__POINTW2FN _0x0,282
0008f6 940e 0c93 	CALL _lcd_putsf
                 ;isTestTombol = false;
0008f8 e0e0      	LDI  R30,LOW(0)
0008f9 93e0 028c 	STS  _isTestTombol,R30
                 ;delay(50);
0008fb 940e 0ec4 	CALL SUBOPT_0x45
                 ;changeMenu(0, false, 0);
0008fd 940e 0e98 	CALL SUBOPT_0x3F
                 ;if (t2 == 0)
                 _0x14B:
0008ff 9999      	SBIC 0x13,1
000900 c007      	RJMP _0x14C
                 ;lcd_gotoxy(0, 0);
000901 e0e0      	LDI  R30,LOW(0)
000902 940e 0d05 	CALL SUBOPT_0x3
                 ;lcd_putsf("tombol = 2     ");
                +
000904 eba2     +LDI R26 , LOW ( 2 * _0x0 + ( 298 ) )
000905 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 298 ) )
                 	__POINTW2FN _0x0,298
000906 940e 0c93 	CALL _lcd_putsf
                 ;if (t3 == 0)
                 _0x14C:
000908 999a      	SBIC 0x13,2
000909 c007      	RJMP _0x14D
                 ;lcd_gotoxy(0, 0);
00090a e0e0      	LDI  R30,LOW(0)
00090b 940e 0d05 	CALL SUBOPT_0x3
                 ;lcd_putsf("tombol = 3     ");
                +
00090d eca2     +LDI R26 , LOW ( 2 * _0x0 + ( 314 ) )
00090e e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 314 ) )
                 	__POINTW2FN _0x0,314
00090f 940e 0c93 	CALL _lcd_putsf
                 ;if (t4 == 0)
                 _0x14D:
000911 999b      	SBIC 0x13,3
000912 c007      	RJMP _0x14E
                 ;lcd_gotoxy(0, 0);
000913 e0e0      	LDI  R30,LOW(0)
000914 940e 0d05 	CALL SUBOPT_0x3
                 ;lcd_putsf("tombol = 4     ");
                +
000916 eda2     +LDI R26 , LOW ( 2 * _0x0 + ( 330 ) )
000917 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 330 ) )
                 	__POINTW2FN _0x0,330
000918 940e 0c93 	CALL _lcd_putsf
                 _0x14E:
00091a cfd0      	RJMP _0x147
                 _0x149:
00091b 9508      	RET
                 ; .FEND
                 ;void tepuk_tangan() {
                 _tepuk_tangan:
                 ; .FSTART _tepuk_tangan
                 ;lcd_clear();
00091c 940e 0c48 	CALL _lcd_clear
                 ;lcd_gotoxy(0, 1);
00091e e0e0      	LDI  R30,LOW(0)
00091f 940e 0dac 	CALL SUBOPT_0x1C
                 ;lcd_putsf("Hold 1 to exit");
                +
000921 eea2     +LDI R26 , LOW ( 2 * _0x0 + ( 346 ) )
000922 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 346 ) )
                 	__POINTW2FN _0x0,346
000923 940e 0c93 	CALL _lcd_putsf
                 ;lcd_gotoxy(0, 0);
000925 e0e0      	LDI  R30,LOW(0)
000926 940e 0d05 	CALL SUBOPT_0x3
                 ;while (1)
                 _0x14F:
                 ;lcd_putsf("XD");
                +
000928 e1ab     +LDI R26 , LOW ( 2 * _0x0 + ( 147 ) )
000929 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 147 ) )
                 	__POINTW2FN _0x0,147
00092a 940e 0c93 	CALL _lcd_putsf
                 ;if(t1 == 0) break;
00092c 9b98      	SBIS 0x13,0
00092d c013      	RJMP _0x151
                 ;capit_lepas;
00092e eee6      	LDI  R30,LOW(230)
00092f 93e0 0283 	STS  _pos_servo1,R30
                 ;if(t1 == 0) break;
000931 9b98      	SBIS 0x13,0
000932 c00e      	RJMP _0x151
                 ;delay(50);
000933 940e 0ec4 	CALL SUBOPT_0x45
                 ;if(t1 == 0) break;
000935 9b98      	SBIS 0x13,0
000936 c00a      	RJMP _0x151
                 ;capit_ambil;
000937 eeee      	LDI  R30,LOW(238)
000938 93e0 0283 	STS  _pos_servo1,R30
                 ;if(t1 == 0) break;
00093a 9b98      	SBIS 0x13,0
00093b c005      	RJMP _0x151
                 ;delay(50);
00093c 940e 0ec4 	CALL SUBOPT_0x45
                 ;if(t1 == 0) break;
00093e 9b98      	SBIS 0x13,0
00093f c001      	RJMP _0x151
000940 cfe7      	RJMP _0x14F
                 _0x151:
000941 9508      	RET
                 ; .FEND
                 ;void tes_sensor()
                 ;for (i = 0; i < 7; i++)
                 ;lcd_gotoxy(0, 0);
                 ;sprintf(buff, "sensor:%d = %d  ", i, read_adc(i));
                 ;lcd_puts(buff);
                 ;delay_ms(100);
                 ;void tampil_count()
                 ;lcd_gotoxy(0, 0);
                 ;sprintf(buff, " %d  ", second);
                 ;lcd_puts(buff);
                 ;interrupt[TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 0073 {
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
000942 93aa      	ST   -Y,R26
000943 93ea      	ST   -Y,R30
000944 b7ef      	IN   R30,SREG
000945 93ea      	ST   -Y,R30
                 ; 0000 0074 TCNT0 = 0x96; // BE
000946 e9e6      	LDI  R30,LOW(150)
000947 bfe2      	OUT  0x32,R30
                 ; 0000 0075 a++;
000948 91e0 0286 	LDS  R30,_a
00094a 5fef      	SUBI R30,-LOW(1)
00094b 93e0 0286 	STS  _a,R30
                 ; 0000 0076 
                 ; 0000 0077 if (a <= pos_servo1)
00094d 91e0 0283 	LDS  R30,_pos_servo1
00094f 91a0 0286 	LDS  R26,_a
000951 17ea      	CP   R30,R26
000952 f010      	BRLO _0x15A
                 ; 0000 0078 {
                 ; 0000 0079 servo1 = 0;
000953 98ae      	CBI  0x15,6
                 ; 0000 007A }
                 ; 0000 007B else
000954 c001      	RJMP _0x15D
                 _0x15A:
                 ; 0000 007C {
                 ; 0000 007D servo1 = 1;
000955 9aae      	SBI  0x15,6
                 ; 0000 007E }
                 _0x15D:
                 ; 0000 007F if (a <= pos_servo2)
000956 91e0 0284 	LDS  R30,_pos_servo2
000958 91a0 0286 	LDS  R26,_a
00095a 17ea      	CP   R30,R26
00095b f010      	BRLO _0x160
                 ; 0000 0080 {
                 ; 0000 0081 servo2 = 0;
00095c 98af      	CBI  0x15,7
                 ; 0000 0082 }
                 ; 0000 0083 else
00095d c001      	RJMP _0x163
                 _0x160:
                 ; 0000 0084 {
                 ; 0000 0085 servo2 = 1;
00095e 9aaf      	SBI  0x15,7
                 ; 0000 0086 }
                 _0x163:
                 ; 0000 0087 if (a <= pos_gulung)
00095f 91e0 0285 	LDS  R30,_pos_gulung
000961 91a0 0286 	LDS  R26,_a
000963 17ea      	CP   R30,R26
000964 f010      	BRLO _0x166
                 ; 0000 0088 {
                 ; 0000 0089 servo_gulung = 0;
000965 98ad      	CBI  0x15,5
                 ; 0000 008A }
                 ; 0000 008B else
000966 c001      	RJMP _0x169
                 _0x166:
                 ; 0000 008C {
                 ; 0000 008D servo_gulung = 1;
000967 9aad      	SBI  0x15,5
                 ; 0000 008E }
                 _0x169:
                 ; 0000 008F }
000968 91e9      	LD   R30,Y+
000969 bfef      	OUT  SREG,R30
00096a 91e9      	LD   R30,Y+
00096b 91a9      	LD   R26,Y+
00096c 9518      	RETI
                 ; .FEND
                 ;interrupt[TIM0_COMP] void timer0_comp_isr(void)
                 ; 0000 0093 {
                 _timer0_comp_isr:
                 ; .FSTART _timer0_comp_isr
                 ; 0000 0094 // Place your code here
                 ; 0000 0095 }
00096d 9518      	RETI
                 ; .FEND
                 ;void main(void)
                 ; 0000 0098 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0099 // Declare your local variables here
                 ; 0000 009A 
                 ; 0000 009B // Input/Output Ports initialization
                 ; 0000 009C // Port A initialization
                 ; 0000 009D // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 009E // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 009F PORTA = 0x00;
00096e e0e0      	LDI  R30,LOW(0)
00096f bbeb      	OUT  0x1B,R30
                 ; 0000 00A0 DDRA = 0x00;
000970 bbea      	OUT  0x1A,R30
                 ; 0000 00A1 
                 ; 0000 00A2 // Port B initialization
                 ; 0000 00A3 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 00A4 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 00A5 PORTB = 0x08;
000971 e0e8      	LDI  R30,LOW(8)
000972 bbe8      	OUT  0x18,R30
                 ; 0000 00A6 DDRB = 0Xff; // 0x08;
000973 efef      	LDI  R30,LOW(255)
000974 bbe7      	OUT  0x17,R30
                 ; 0000 00A7 
                 ; 0000 00A8 // Port C initialization
                 ; 0000 00A9 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 00AA // State7=T State6=T State5=T State4=T State3=P State2=P State1=P State0=P
                 ; 0000 00AB PORTC = 0xFF;
000975 bbe5      	OUT  0x15,R30
                 ; 0000 00AC DDRC = 0xF0; // C0
000976 efe0      	LDI  R30,LOW(240)
000977 bbe4      	OUT  0x14,R30
                 ; 0000 00AD 
                 ; 0000 00AE // Port D initialization
                 ; 0000 00AF // Func7=In Func6=In Func5=Out Func4=Out Func3=In Func2=In Func1=In Func0=In
                 ; 0000 00B0 // State7=T State6=T State5=0 State4=0 State3=T State2=T State1=T State0=T
                 ; 0000 00B1 PORTD = 0x03;
000978 e0e3      	LDI  R30,LOW(3)
000979 bbe2      	OUT  0x12,R30
                 ; 0000 00B2 DDRD = 0xFC; // 3F
00097a efec      	LDI  R30,LOW(252)
00097b bbe1      	OUT  0x11,R30
                 ; 0000 00B3 
                 ; 0000 00B4 // Timer/Counter 0 initialization
                 ; 0000 00B5 TCCR0 = 0x4A;
00097c e4ea      	LDI  R30,LOW(74)
00097d bfe3      	OUT  0x33,R30
                 ; 0000 00B6 TCNT0 = 0x96;
00097e e9e6      	LDI  R30,LOW(150)
00097f bfe2      	OUT  0x32,R30
                 ; 0000 00B7 OCR0 = 0x00;
000980 e0e0      	LDI  R30,LOW(0)
000981 bfec      	OUT  0x3C,R30
                 ; 0000 00B8 
                 ; 0000 00B9 // Timer/Counter 1 initialization
                 ; 0000 00BA TCCR1A = 0xA1;
000982 eae1      	LDI  R30,LOW(161)
000983 bdef      	OUT  0x2F,R30
                 ; 0000 00BB TCCR1B = 0x09;
000984 e0e9      	LDI  R30,LOW(9)
000985 bdee      	OUT  0x2E,R30
                 ; 0000 00BC TCNT1H = 0x00;
000986 e0e0      	LDI  R30,LOW(0)
000987 bded      	OUT  0x2D,R30
                 ; 0000 00BD TCNT1L = 0x00;
000988 bdec      	OUT  0x2C,R30
                 ; 0000 00BE ICR1H = 0x00;
000989 bde7      	OUT  0x27,R30
                 ; 0000 00BF ICR1L = 0x00;
00098a bde6      	OUT  0x26,R30
                 ; 0000 00C0 OCR1AH = 0x00;
00098b bdeb      	OUT  0x2B,R30
                 ; 0000 00C1 OCR1AL = 0x00;
00098c bdea      	OUT  0x2A,R30
                 ; 0000 00C2 OCR1BH = 0x00;
00098d bde9      	OUT  0x29,R30
                 ; 0000 00C3 OCR1BL = 0x00;
00098e bde8      	OUT  0x28,R30
                 ; 0000 00C4 
                 ; 0000 00C5 // Timer/Counter 2 initialization
                 ; 0000 00C6 // Clock source: System Clock
                 ; 0000 00C7 // Clock value: Timer 2 Stopped
                 ; 0000 00C8 // Mode: Normal top=FFh
                 ; 0000 00C9 // OC2 output: Disconnected
                 ; 0000 00CA ASSR = 0x00;
00098f bde2      	OUT  0x22,R30
                 ; 0000 00CB TCCR2 = 0x00;
000990 bde5      	OUT  0x25,R30
                 ; 0000 00CC TCNT2 = 0x00;
000991 bde4      	OUT  0x24,R30
                 ; 0000 00CD OCR2 = 0x00;
000992 bde3      	OUT  0x23,R30
                 ; 0000 00CE 
                 ; 0000 00CF // External Interrupt(s) initialization
                 ; 0000 00D0 // INT0: Off
                 ; 0000 00D1 // INT1: Off
                 ; 0000 00D2 // INT2: Off
                 ; 0000 00D3 MCUCR = 0x00;
000993 bfe5      	OUT  0x35,R30
                 ; 0000 00D4 MCUCSR = 0x00;
000994 bfe4      	OUT  0x34,R30
                 ; 0000 00D5 
                 ; 0000 00D6 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 00D7 TIMSK = 0x01;
000995 e0e1      	LDI  R30,LOW(1)
000996 bfe9      	OUT  0x39,R30
                 ; 0000 00D8 
                 ; 0000 00D9 // Analog Comparator initialization
                 ; 0000 00DA // Analog Comparator: Off
                 ; 0000 00DB // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0000 00DC ACSR = 0x80;
000997 e8e0      	LDI  R30,LOW(128)
000998 b9e8      	OUT  0x8,R30
                 ; 0000 00DD SFIOR = 0x00;
000999 e0e0      	LDI  R30,LOW(0)
00099a bfe0      	OUT  0x30,R30
                 ; 0000 00DE 
                 ; 0000 00DF MCUCR = 0x00;
00099b bfe5      	OUT  0x35,R30
                 ; 0000 00E0 MCUCSR = 0x00;
00099c bfe4      	OUT  0x34,R30
                 ; 0000 00E1 
                 ; 0000 00E2 // USART, UNTUK KOMUNIKASI BLUETOOTH
                 ; 0000 00E3 UCSRA = 0x00;
00099d b9eb      	OUT  0xB,R30
                 ; 0000 00E4 UCSRB = 0x18;
00099e e1e8      	LDI  R30,LOW(24)
00099f b9ea      	OUT  0xA,R30
                 ; 0000 00E5 UCSRC = 0x86;
0009a0 e8e6      	LDI  R30,LOW(134)
0009a1 bde0      	OUT  0x20,R30
                 ; 0000 00E6 UBRRH = 0x00;
0009a2 e0e0      	LDI  R30,LOW(0)
0009a3 bde0      	OUT  0x20,R30
                 ; 0000 00E7 UBRRL = 0x47;
0009a4 e4e7      	LDI  R30,LOW(71)
0009a5 b9e9      	OUT  0x9,R30
                 ; 0000 00E8 // ADC initialization
                 ; 0000 00E9 // ADC Clock frequency: 691.200 kHz
                 ; 0000 00EA // ADC Voltage Reference: AVCC pin
                 ; 0000 00EB // ADC Auto Trigger Source: None
                 ; 0000 00EC // Only the 8 most significant bits of
                 ; 0000 00ED // the AD conversion result are used
                 ; 0000 00EE ADMUX = ADC_VREF_TYPE & 0xff;
0009a6 e6e0      	LDI  R30,LOW(96)
0009a7 b9e7      	OUT  0x7,R30
                 ; 0000 00EF ADCSRA = 0x84;
0009a8 e8e4      	LDI  R30,LOW(132)
0009a9 b9e6      	OUT  0x6,R30
                 ; 0000 00F0 // ADCSRA=0xA6;
                 ; 0000 00F1 SFIOR &= 0x1F;
0009aa b7e0      	IN   R30,0x30
0009ab 71ef      	ANDI R30,LOW(0x1F)
0009ac bfe0      	OUT  0x30,R30
                 ; 0000 00F2 
                 ; 0000 00F3 // LCD module initialization
                 ; 0000 00F4 lcd_init(16); //
0009ad e1a0      	LDI  R26,LOW(16)
0009ae 940e 0cb7 	CALL _lcd_init
                 ; 0000 00F5 lcd_clear();  //
0009b0 940e 0c48 	CALL _lcd_clear
                 ; 0000 00F6 lampu = 0;    //
0009b2 98c3      	CBI  0x18,3
                 ; 0000 00F7 // k,b
                 ; 0000 00F8 lcd_gotoxy(0, 0);
0009b3 e0e0      	LDI  R30,LOW(0)
0009b4 940e 0d05 	CALL SUBOPT_0x3
                 ; 0000 00F9 lcd_putsf("LEGION");
                +
0009b6 efa1     +LDI R26 , LOW ( 2 * _0x0 + ( 361 ) )
0009b7 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 361 ) )
                 	__POINTW2FN _0x0,361
0009b8 940e 0e8e 	CALL SUBOPT_0x3D
                 ; 0000 00FA lcd_gotoxy(0, 1);
                 ; 0000 00FB lcd_putsf("MAN 4 JOMBANG");
                +
0009ba efa8     +LDI R26 , LOW ( 2 * _0x0 + ( 368 ) )
0009bb e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 368 ) )
                 	__POINTW2FN _0x0,368
0009bc 940e 0c93 	CALL _lcd_putsf
                 ; 0000 00FC delay_ms(100);
0009be e6a4      	LDI  R26,LOW(100)
0009bf e0b0      	LDI  R27,0
0009c0 940e 1073 	CALL _delay_ms
                 ; 0000 00FD lcd_clear();
0009c2 940e 0c48 	CALL _lcd_clear
                 ; 0000 00FE 
                 ; 0000 00FF // PROGRAM UTAMA
                 ; 0000 0100 // Global enable interrupts
                 ; 0000 0101 #asm("sei")
0009c4 9478      	SEI
                 ; 0000 0102 lengan_atas;
0009c5 eeea      	LDI  R30,LOW(234)
0009c6 93e0 0284 	STS  _pos_servo2,R30
                 ; 0000 0103 capit_lepas;
0009c8 eee6      	LDI  R30,LOW(230)
0009c9 93e0 0283 	STS  _pos_servo1,R30
                 ; 0000 0104 gulung_stop;
0009cb efef      	LDI  R30,LOW(255)
0009cc 93e0 0285 	STS  _pos_gulung,R30
                 ; 0000 0105 
                 ; 0000 0106 /// mapMirror = 0 - map/lintasan bagian biru
                 ; 0000 0107 /// mapMirror = 1 - map/lintasan bagian merah
                 ; 0000 0108 if(mapMirror[0] != 0 && mapMirror[0] != 1) mapMirror[0] = 0;
0009ce e2aa      	LDI  R26,LOW(_mapMirror)
0009cf e0b0      	LDI  R27,HIGH(_mapMirror)
0009d0 940e 0f5f 	CALL __EEPROMRDW
0009d2 9730      	SBIW R30,0
0009d3 f021      	BREQ _0x16F
0009d4 30e1      	CPI  R30,LOW(0x1)
0009d5 e0a0      	LDI  R26,HIGH(0x1)
0009d6 07fa      	CPC  R31,R26
0009d7 f409      	BRNE _0x170
                 _0x16F:
0009d8 c002      	RJMP _0x16E
                 _0x170:
0009d9 940e 0ea1 	CALL SUBOPT_0x40
                 ; 0000 0109 
                 ; 0000 010A lcd_clear();
                 _0x16E:
0009db 940e 0e8a 	CALL SUBOPT_0x3C
                 ; 0000 010B lcd_gotoxy(0, 0);
                 ; 0000 010C lcd_putsf("Menu");
                +
0009dd eeac     +LDI R26 , LOW ( 2 * _0x0 + ( 100 ) )
0009de e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 100 ) )
                 	__POINTW2FN _0x0,100
0009df 940e 0e8e 	CALL SUBOPT_0x3D
                 ; 0000 010D lcd_gotoxy(0, 1);
                 ; 0000 010E lcd_putsf("Calibration");
                +
0009e1 efa1     +LDI R26 , LOW ( 2 * _0x0 + ( 105 ) )
0009e2 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 105 ) )
                 	__POINTW2FN _0x0,105
0009e3 940e 0c93 	CALL _lcd_putsf
                 ; 0000 010F 
                 ; 0000 0110 while(1) {
                 _0x171:
                 ; 0000 0111 if(!isChildSelect) {
0009e5 91e0 028b 	LDS  R30,_isChildSelect
0009e7 30e0      	CPI  R30,0
0009e8 f419      	BRNE _0x174
                 ; 0000 0112 display_sensor();
0009e9 940e 01c4 	CALL _display_sensor
                 ; 0000 0113 bacawarna();
0009eb dabb      	RCALL _bacawarna
                 ; 0000 0114 }
                 ; 0000 0115 
                 ; 0000 0116 // lcd_gotoxy(0, 1);
                 ; 0000 0117 // sprintf(buff, "button1 = %d  ", count_btn);
                 ; 0000 0118 // lcd_puts(buff);
                 ; 0000 0119 
                 ; 0000 011A //bacawarna();
                 ; 0000 011B if((t1 == 0)) {
                 _0x174:
0009ec 9998      	SBIC 0x13,0
0009ed c024      	RJMP _0x175
                 ; 0000 011C // Program_Jalan();
                 ; 0000 011D 
                 ; 0000 011E if(!isChildSelect) count_btn ++;
0009ee 91e0 028b 	LDS  R30,_isChildSelect
0009f0 30e0      	CPI  R30,0
0009f1 f421      	BRNE _0x176
0009f2 e8a7      	LDI  R26,LOW(_count_btn)
0009f3 e0b2      	LDI  R27,HIGH(_count_btn)
0009f4 940e 0d85 	CALL SUBOPT_0x16
                 ; 0000 011F if(isChildSelect) count_child_btn ++;
                 _0x176:
0009f6 91e0 028b 	LDS  R30,_isChildSelect
0009f8 30e0      	CPI  R30,0
0009f9 f021      	BREQ _0x177
0009fa e8a9      	LDI  R26,LOW(_count_child_btn)
0009fb e0b2      	LDI  R27,HIGH(_count_child_btn)
0009fc 940e 0d85 	CALL SUBOPT_0x16
                 ; 0000 0120 if(count_btn >= 6) count_btn = 0;
                 _0x177:
0009fe 91a0 0287 	LDS  R26,_count_btn
000a00 91b0 0288 	LDS  R27,_count_btn+1
000a02 9716      	SBIW R26,6
000a03 f02c      	BRLT _0x178
000a04 e0e0      	LDI  R30,LOW(0)
000a05 93e0 0287 	STS  _count_btn,R30
000a07 93e0 0288 	STS  _count_btn+1,R30
                 ; 0000 0121 delay(10);
                 _0x178:
000a09 e0aa      	LDI  R26,LOW(10)
000a0a e0b0      	LDI  R27,0
000a0b 940e 0170 	CALL _delay
                 ; 0000 0122 changeMenu(count_btn, false, count_child_btn);
000a0d 940e 0ec8 	CALL SUBOPT_0x46
000a0f e0e0      	LDI  R30,LOW(0)
000a10 940e 0ecf 	CALL SUBOPT_0x47
                 ; 0000 0123 
                 ; 0000 0124 // buttonhold[0] += 1;
                 ; 0000 0125 // while((t1 == 0) && !isTestTombol && !isDelayClick1) {
                 ; 0000 0126 //     isDelayClick1 = true;
                 ; 0000 0127 //     delay(3);
                 ; 0000 0128 //     if(buttonhold[0] > 20) {
                 ; 0000 0129 //         isSelect = true;
                 ; 0000 012A //         changeMenu();
                 ; 0000 012B //     } else {
                 ; 0000 012C //         isSelect = false; isChildSelect = false;
                 ; 0000 012D //         changeMenu();
                 ; 0000 012E //         buttonhold[0] = 0;
                 ; 0000 012F //     }
                 ; 0000 0130 //     isDelayClick1 = false; break;
                 ; 0000 0131 // }
                 ; 0000 0132 // lcd_gotoxy(0, 0);
                 ; 0000 0133 // sprintf(buff, "button1 = %d  ", button1click);
                 ; 0000 0134 }
                 ; 0000 0135 if((t2 == 0)) {
                 _0x175:
000a12 9999      	SBIC 0x13,1
000a13 c009      	RJMP _0x179
                 ; 0000 0136 changeMenu(count_btn, true, count_child_btn);
000a14 940e 0ec8 	CALL SUBOPT_0x46
000a16 e0e1      	LDI  R30,LOW(1)
000a17 940e 0ecf 	CALL SUBOPT_0x47
                 ; 0000 0137 delay(10);
000a19 e0aa      	LDI  R26,LOW(10)
000a1a e0b0      	LDI  R27,0
000a1b 940e 0170 	CALL _delay
                 ; 0000 0138 }
                 ; 0000 0139 // lcd_puts(buff);
                 ; 0000 013A // } else if((t1 == 1)) {
                 ; 0000 013B //     buttonhold[0] = 0;
                 ; 0000 013C //     isDelayClick1 = false;
                 ; 0000 013D // }
                 ; 0000 013E 
                 ; 0000 013F // if ((count_btn==0) && (t2==0)){
                 ; 0000 0140 //     lcd_clear();
                 ; 0000 0141 //     lcd_gotoxy(0, 0);
                 ; 0000 0142 //     lcd_putsf("menu 1");
                 ; 0000 0143 // } else if((count_btn == 1) && (t2 == 0)) {
                 ; 0000 0144 //     lcd_clear();
                 ; 0000 0145 //     lcd_gotoxy(0, 0);
                 ; 0000 0146 //     lcd_putsf("menu 2");
                 ; 0000 0147 // } else if((count_btn == 2) && (t2 == 0)) {
                 ; 0000 0148 //     lcd_clear();
                 ; 0000 0149 //     lcd_gotoxy(0, 0);
                 ; 0000 014A //     lcd_putsf("menu 3");
                 ; 0000 014B // } else if((count_btn == 3) && (t2 == 0)) {
                 ; 0000 014C //     lcd_clear();
                 ; 0000 014D //     lcd_gotoxy(0, 0);
                 ; 0000 014E //     lcd_putsf("menu 4");
                 ; 0000 014F // } else if((count_btn == 4) && (t2 == 0)) {
                 ; 0000 0150 //     lcd_clear();
                 ; 0000 0151 //     lcd_gotoxy(0, 0);
                 ; 0000 0152 //     lcd_putsf("menu 5");
                 ; 0000 0153 // } else if((count_btn == 5) && (t2 == 0)) {
                 ; 0000 0154 //     lcd_clear();
                 ; 0000 0155 //     lcd_gotoxy(0, 0);
                 ; 0000 0156 //     lcd_putsf("menu 6");
                 ; 0000 0157 // } else if((count_btn == 6) && (t2 == 0)) {
                 ; 0000 0158 //     lcd_clear();
                 ; 0000 0159 //     lcd_gotoxy(0, 0);
                 ; 0000 015A //     lcd_putsf("menu 7");
                 ; 0000 015B // } else if((count_btn == 7) && (t2 == 0)) {
                 ; 0000 015C //     lcd_clear();
                 ; 0000 015D //     lcd_gotoxy(0, 0);
                 ; 0000 015E //     lcd_putsf("menu 8");
                 ; 0000 015F // } else if((count_btn == 8) && (t2 == 0)) {
                 ; 0000 0160 //     lcd_clear();
                 ; 0000 0161 //     lcd_gotoxy(0, 0);
                 ; 0000 0162 //     lcd_putsf("menu 9");
                 ; 0000 0163 // } else if((count_btn == 9) && (t2 == 0)) {
                 ; 0000 0164 //     lcd_clear();
                 ; 0000 0165 //     lcd_gotoxy(0, 0);
                 ; 0000 0166 //     lcd_putsf("menu 10");
                 ; 0000 0167 // } else if((count_btn == 10) && (t2 == 0)) {
                 ; 0000 0168 //     lcd_clear();
                 ; 0000 0169 //     lcd_gotoxy(0, 0);
                 ; 0000 016A // }
                 ; 0000 016B 
                 ; 0000 016C // if (    (t2 == 0)
                 ; 0000 016D //         && !isTestTombol
                 ; 0000 016E //         && (!isChildSelect && menuSelect == 0) // Jika Menu di Run Bot, janga ...
                 ; 0000 016F //     ) {
                 ; 0000 0170 
                 ; 0000 0171 //         // lengan_bawah;
                 ; 0000 0172 //         // delay(50);
                 ; 0000 0173 //     // menuSelect += 1;
                 ; 0000 0174 //     // if(menuSelect >= 4) menuSelect = 0;
                 ; 0000 0175 //     // changeMenu();
                 ; 0000 0176 
                 ; 0000 0177 //     scan_garis();
                 ; 0000 0178 //     delay(300);
                 ; 0000 0179 //     scan_back();
                 ; 0000 017A //     delay(100);
                 ; 0000 017B //     hit_tengah();
                 ; 0000 017C 
                 ; 0000 017D //     // button1click = 0;
                 ; 0000 017E //     // lcd_gotoxy(0, 0);
                 ; 0000 017F //     // sprintf(buff, "button1 = %d  ", button1click);
                 ; 0000 0180 //     // lcd_puts(buff);
                 ; 0000 0181 // }
                 ; 0000 0182 }
                 _0x179:
000a1d cfc7      	RJMP _0x171
                 ; 0000 0183 }
                 _0x17A:
000a1e cfff      	RJMP _0x17A
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
000a1f 93ba      	ST   -Y,R27
000a20 93aa      	ST   -Y,R26
000a21 931a      	ST   -Y,R17
000a22 930a      	ST   -Y,R16
000a23 81aa      	LDD  R26,Y+2
000a24 81bb      	LDD  R27,Y+2+1
000a25 9612      	ADIW R26,2
000a26 940e 0f52 	CALL __GETW1P
000a28 9730      	SBIW R30,0
000a29 f129      	BREQ _0x2000010
000a2a 81aa      	LDD  R26,Y+2
000a2b 81bb      	LDD  R27,Y+2+1
000a2c 9614      	ADIW R26,4
000a2d 940e 0f52 	CALL __GETW1P
000a2f 018f      	MOVW R16,R30
000a30 9730      	SBIW R30,0
000a31 f061      	BREQ _0x2000012
                +
000a32 3002     +CPI R16 , LOW ( 2 )
000a33 e0e0     +LDI R30 , HIGH ( 2 )
000a34 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000a35 f080      	BRLO _0x2000013
000a36 01f8      	MOVW R30,R16
000a37 9731      	SBIW R30,1
000a38 018f      	MOVW R16,R30
                +
000a39 81aa     +LDD R26 , Y + 2
000a3a 81bb     +LDD R27 , Y + 2 + 1
000a3b 9614     +ADIW R26 , 4
000a3c 93ed     +ST X + , R30
000a3d 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
000a3e 81aa      	LDD  R26,Y+2
000a3f 81bb      	LDD  R27,Y+2+1
000a40 9612      	ADIW R26,2
000a41 940e 0d85 	CALL SUBOPT_0x16
000a43 9731      	SBIW R30,1
000a44 81ac      	LDD  R26,Y+4
000a45 83a0      	STD  Z+0,R26
                 _0x2000013:
000a46 81aa      	LDD  R26,Y+2
000a47 81bb      	LDD  R27,Y+2+1
000a48 940e 0f52 	CALL __GETW1P
000a4a 23ff      	TST  R31
000a4b f012      	BRMI _0x2000014
000a4c 940e 0d85 	CALL SUBOPT_0x16
                 _0x2000014:
000a4e c006      	RJMP _0x2000015
                 _0x2000010:
000a4f 81aa      	LDD  R26,Y+2
000a50 81bb      	LDD  R27,Y+2+1
000a51 efef      	LDI  R30,LOW(65535)
000a52 efff      	LDI  R31,HIGH(65535)
000a53 93ed      	ST   X+,R30
000a54 93fc      	ST   X,R31
                 _0x2000015:
000a55 8119      	LDD  R17,Y+1
000a56 8108      	LDD  R16,Y+0
                 _0x20C0005:
000a57 9625      	ADIW R28,5
000a58 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
000a59 93ba      	ST   -Y,R27
000a5a 93aa      	ST   -Y,R26
000a5b 9726      	SBIW R28,6
000a5c 940e 0efc 	CALL __SAVELOCR6
000a5e e010      	LDI  R17,0
000a5f 85ac      	LDD  R26,Y+12
000a60 85bd      	LDD  R27,Y+12+1
000a61 e0e0      	LDI  R30,LOW(0)
000a62 e0f0      	LDI  R31,HIGH(0)
000a63 93ed      	ST   X+,R30
000a64 93fc      	ST   X,R31
                 _0x2000016:
000a65 89ea      	LDD  R30,Y+18
000a66 89fb      	LDD  R31,Y+18+1
000a67 9631      	ADIW R30,1
000a68 8bea      	STD  Y+18,R30
000a69 8bfb      	STD  Y+18+1,R31
000a6a 9731      	SBIW R30,1
000a6b 91e4      	LPM  R30,Z
000a6c 2f2e      	MOV  R18,R30
000a6d 30e0      	CPI  R30,0
000a6e f409      	BRNE PC+2
000a6f c11d      	RJMP _0x2000018
000a70 2fe1      	MOV  R30,R17
000a71 30e0      	CPI  R30,0
000a72 f439      	BRNE _0x200001C
000a73 3225      	CPI  R18,37
000a74 f411      	BRNE _0x200001D
000a75 e011      	LDI  R17,LOW(1)
000a76 c002      	RJMP _0x200001E
                 _0x200001D:
000a77 940e 0ed6 	CALL SUBOPT_0x48
                 _0x200001E:
000a79 c112      	RJMP _0x200001B
                 _0x200001C:
000a7a 30e1      	CPI  R30,LOW(0x1)
000a7b f4a9      	BRNE _0x200001F
000a7c 3225      	CPI  R18,37
000a7d f419      	BRNE _0x2000020
000a7e 940e 0ed6 	CALL SUBOPT_0x48
000a80 c10a      	RJMP _0x20000CC
                 _0x2000020:
000a81 e012      	LDI  R17,LOW(2)
000a82 e040      	LDI  R20,LOW(0)
000a83 e000      	LDI  R16,LOW(0)
000a84 322d      	CPI  R18,45
000a85 f411      	BRNE _0x2000021
000a86 e001      	LDI  R16,LOW(1)
000a87 c104      	RJMP _0x200001B
                 _0x2000021:
000a88 322b      	CPI  R18,43
000a89 f411      	BRNE _0x2000022
000a8a e24b      	LDI  R20,LOW(43)
000a8b c100      	RJMP _0x200001B
                 _0x2000022:
000a8c 3220      	CPI  R18,32
000a8d f411      	BRNE _0x2000023
000a8e e240      	LDI  R20,LOW(32)
000a8f c0fc      	RJMP _0x200001B
                 _0x2000023:
000a90 c002      	RJMP _0x2000024
                 _0x200001F:
000a91 30e2      	CPI  R30,LOW(0x2)
000a92 f439      	BRNE _0x2000025
                 _0x2000024:
000a93 e050      	LDI  R21,LOW(0)
000a94 e013      	LDI  R17,LOW(3)
000a95 3320      	CPI  R18,48
000a96 f411      	BRNE _0x2000026
000a97 6800      	ORI  R16,LOW(128)
000a98 c0f3      	RJMP _0x200001B
                 _0x2000026:
000a99 c003      	RJMP _0x2000027
                 _0x2000025:
000a9a 30e3      	CPI  R30,LOW(0x3)
000a9b f009      	BREQ PC+2
000a9c c0ef      	RJMP _0x200001B
                 _0x2000027:
000a9d 3320      	CPI  R18,48
000a9e f010      	BRLO _0x200002A
000a9f 332a      	CPI  R18,58
000aa0 f008      	BRLO _0x200002B
                 _0x200002A:
000aa1 c007      	RJMP _0x2000029
                 _0x200002B:
000aa2 e0aa      	LDI  R26,LOW(10)
000aa3 9f5a      	MUL  R21,R26
000aa4 2d50      	MOV  R21,R0
000aa5 2fe2      	MOV  R30,R18
000aa6 53e0      	SUBI R30,LOW(48)
000aa7 0f5e      	ADD  R21,R30
000aa8 c0e3      	RJMP _0x200001B
                 _0x2000029:
000aa9 2fe2      	MOV  R30,R18
000aaa 36e3      	CPI  R30,LOW(0x63)
000aab f449      	BRNE _0x200002F
000aac 940e 0edd 	CALL SUBOPT_0x49
000aae 89e8      	LDD  R30,Y+16
000aaf 89f9      	LDD  R31,Y+16+1
000ab0 81a4      	LDD  R26,Z+4
000ab1 93aa      	ST   -Y,R26
000ab2 940e 0ee3 	CALL SUBOPT_0x4A
000ab4 c0d6      	RJMP _0x2000030
                 _0x200002F:
000ab5 37e3      	CPI  R30,LOW(0x73)
000ab6 f441      	BRNE _0x2000032
000ab7 940e 0edd 	CALL SUBOPT_0x49
000ab9 940e 0ee9 	CALL SUBOPT_0x4B
000abb 940e 0bd1 	CALL _strlen
000abd 2f1e      	MOV  R17,R30
000abe c00a      	RJMP _0x2000033
                 _0x2000032:
000abf 37e0      	CPI  R30,LOW(0x70)
000ac0 f461      	BRNE _0x2000035
000ac1 940e 0edd 	CALL SUBOPT_0x49
000ac3 940e 0ee9 	CALL SUBOPT_0x4B
000ac5 940e 0bdd 	CALL _strlenf
000ac7 2f1e      	MOV  R17,R30
000ac8 6008      	ORI  R16,LOW(8)
                 _0x2000033:
000ac9 6002      	ORI  R16,LOW(2)
000aca 770f      	ANDI R16,LOW(127)
000acb e030      	LDI  R19,LOW(0)
000acc c03c      	RJMP _0x2000036
                 _0x2000035:
000acd 36e4      	CPI  R30,LOW(0x64)
000ace f011      	BREQ _0x2000039
000acf 36e9      	CPI  R30,LOW(0x69)
000ad0 f411      	BRNE _0x200003A
                 _0x2000039:
000ad1 6004      	ORI  R16,LOW(4)
000ad2 c002      	RJMP _0x200003B
                 _0x200003A:
000ad3 37e5      	CPI  R30,LOW(0x75)
000ad4 f431      	BRNE _0x200003C
                 _0x200003B:
000ad5 e5e4      	LDI  R30,LOW(_tbl10_G100*2)
000ad6 e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
000ad7 83ee      	STD  Y+6,R30
000ad8 83ff      	STD  Y+6+1,R31
000ad9 e015      	LDI  R17,LOW(5)
000ada c00c      	RJMP _0x200003D
                 _0x200003C:
000adb 35e8      	CPI  R30,LOW(0x58)
000adc f411      	BRNE _0x200003F
000add 6008      	ORI  R16,LOW(8)
000ade c003      	RJMP _0x2000040
                 _0x200003F:
000adf 37e8      	CPI  R30,LOW(0x78)
000ae0 f009      	BREQ PC+2
000ae1 c0a9      	RJMP _0x2000071
                 _0x2000040:
000ae2 e5ee      	LDI  R30,LOW(_tbl16_G100*2)
000ae3 e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
000ae4 83ee      	STD  Y+6,R30
000ae5 83ff      	STD  Y+6+1,R31
000ae6 e014      	LDI  R17,LOW(4)
                 _0x200003D:
000ae7 ff02      	SBRS R16,2
000ae8 c017      	RJMP _0x2000042
000ae9 940e 0edd 	CALL SUBOPT_0x49
000aeb 89a8      	LDD  R26,Y+16
000aec 89b9      	LDD  R27,Y+16+1
000aed 9614      	ADIW R26,4
000aee 91ed      	LD   R30,X+
000aef 91fd      	LD   R31,X+
000af0 87ea      	STD  Y+10,R30
000af1 87fb      	STD  Y+10+1,R31
000af2 85ab      	LDD  R26,Y+11
000af3 23aa      	TST  R26
000af4 f42a      	BRPL _0x2000043
000af5 940e 0f0e 	CALL __ANEGW1
000af7 87ea      	STD  Y+10,R30
000af8 87fb      	STD  Y+10+1,R31
000af9 e24d      	LDI  R20,LOW(45)
                 _0x2000043:
000afa 3040      	CPI  R20,0
000afb f011      	BREQ _0x2000044
000afc 5f1f      	SUBI R17,-LOW(1)
000afd c001      	RJMP _0x2000045
                 _0x2000044:
000afe 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
000aff c009      	RJMP _0x2000046
                 _0x2000042:
000b00 940e 0edd 	CALL SUBOPT_0x49
000b02 89a8      	LDD  R26,Y+16
000b03 89b9      	LDD  R27,Y+16+1
000b04 9614      	ADIW R26,4
000b05 940e 0f52 	CALL __GETW1P
000b07 87ea      	STD  Y+10,R30
000b08 87fb      	STD  Y+10+1,R31
                 _0x2000046:
                 _0x2000036:
000b09 fd00      	SBRC R16,0
000b0a c011      	RJMP _0x2000047
                 _0x2000048:
000b0b 1715      	CP   R17,R21
000b0c f478      	BRSH _0x200004A
000b0d ff07      	SBRS R16,7
000b0e c008      	RJMP _0x200004B
000b0f ff02      	SBRS R16,2
000b10 c004      	RJMP _0x200004C
000b11 7f0b      	ANDI R16,LOW(251)
000b12 2f24      	MOV  R18,R20
000b13 5011      	SUBI R17,LOW(1)
000b14 c001      	RJMP _0x200004D
                 _0x200004C:
000b15 e320      	LDI  R18,LOW(48)
                 _0x200004D:
000b16 c001      	RJMP _0x200004E
                 _0x200004B:
000b17 e220      	LDI  R18,LOW(32)
                 _0x200004E:
000b18 940e 0ed6 	CALL SUBOPT_0x48
000b1a 5051      	SUBI R21,LOW(1)
000b1b cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
000b1c 2f31      	MOV  R19,R17
000b1d ff01      	SBRS R16,1
000b1e c017      	RJMP _0x200004F
                 _0x2000050:
000b1f 3030      	CPI  R19,0
000b20 f0a1      	BREQ _0x2000052
000b21 ff03      	SBRS R16,3
000b22 c006      	RJMP _0x2000053
000b23 81ee      	LDD  R30,Y+6
000b24 81ff      	LDD  R31,Y+6+1
000b25 9125      	LPM  R18,Z+
000b26 83ee      	STD  Y+6,R30
000b27 83ff      	STD  Y+6+1,R31
000b28 c005      	RJMP _0x2000054
                 _0x2000053:
000b29 81ae      	LDD  R26,Y+6
000b2a 81bf      	LDD  R27,Y+6+1
000b2b 912d      	LD   R18,X+
000b2c 83ae      	STD  Y+6,R26
000b2d 83bf      	STD  Y+6+1,R27
                 _0x2000054:
000b2e 940e 0ed6 	CALL SUBOPT_0x48
000b30 3050      	CPI  R21,0
000b31 f009      	BREQ _0x2000055
000b32 5051      	SUBI R21,LOW(1)
                 _0x2000055:
000b33 5031      	SUBI R19,LOW(1)
000b34 cfea      	RJMP _0x2000050
                 _0x2000052:
000b35 c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
000b36 e320      	LDI  R18,LOW(48)
000b37 81ee      	LDD  R30,Y+6
000b38 81ff      	LDD  R31,Y+6+1
000b39 940e 0f56 	CALL __GETW1PF
000b3b 87e8      	STD  Y+8,R30
000b3c 87f9      	STD  Y+8+1,R31
000b3d 81ee      	LDD  R30,Y+6
000b3e 81ff      	LDD  R31,Y+6+1
000b3f 9632      	ADIW R30,2
000b40 83ee      	STD  Y+6,R30
000b41 83ff      	STD  Y+6+1,R31
                 _0x200005A:
000b42 85e8      	LDD  R30,Y+8
000b43 85f9      	LDD  R31,Y+8+1
000b44 85aa      	LDD  R26,Y+10
000b45 85bb      	LDD  R27,Y+10+1
000b46 17ae      	CP   R26,R30
000b47 07bf      	CPC  R27,R31
000b48 f050      	BRLO _0x200005C
000b49 5f2f      	SUBI R18,-LOW(1)
000b4a 85a8      	LDD  R26,Y+8
000b4b 85b9      	LDD  R27,Y+8+1
000b4c 85ea      	LDD  R30,Y+10
000b4d 85fb      	LDD  R31,Y+10+1
000b4e 1bea      	SUB  R30,R26
000b4f 0bfb      	SBC  R31,R27
000b50 87ea      	STD  Y+10,R30
000b51 87fb      	STD  Y+10+1,R31
000b52 cfef      	RJMP _0x200005A
                 _0x200005C:
000b53 332a      	CPI  R18,58
000b54 f028      	BRLO _0x200005D
000b55 ff03      	SBRS R16,3
000b56 c002      	RJMP _0x200005E
000b57 5f29      	SUBI R18,-LOW(7)
000b58 c001      	RJMP _0x200005F
                 _0x200005E:
000b59 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
000b5a fd04      	SBRC R16,4
000b5b c01a      	RJMP _0x2000061
000b5c 3321      	CPI  R18,49
000b5d f420      	BRSH _0x2000063
000b5e 85a8      	LDD  R26,Y+8
000b5f 85b9      	LDD  R27,Y+8+1
000b60 9711      	SBIW R26,1
000b61 f409      	BRNE _0x2000062
                 _0x2000063:
000b62 c009      	RJMP _0x20000CD
                 _0x2000062:
000b63 1753      	CP   R21,R19
000b64 f010      	BRLO _0x2000067
000b65 ff00      	SBRS R16,0
000b66 c001      	RJMP _0x2000068
                 _0x2000067:
000b67 c013      	RJMP _0x2000066
                 _0x2000068:
000b68 e220      	LDI  R18,LOW(32)
000b69 ff07      	SBRS R16,7
000b6a c00b      	RJMP _0x2000069
000b6b e320      	LDI  R18,LOW(48)
                 _0x20000CD:
000b6c 6100      	ORI  R16,LOW(16)
000b6d ff02      	SBRS R16,2
000b6e c007      	RJMP _0x200006A
000b6f 7f0b      	ANDI R16,LOW(251)
000b70 934a      	ST   -Y,R20
000b71 940e 0ee3 	CALL SUBOPT_0x4A
000b73 3050      	CPI  R21,0
000b74 f009      	BREQ _0x200006B
000b75 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
000b76 940e 0ed6 	CALL SUBOPT_0x48
000b78 3050      	CPI  R21,0
000b79 f009      	BREQ _0x200006C
000b7a 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
000b7b 5031      	SUBI R19,LOW(1)
000b7c 85a8      	LDD  R26,Y+8
000b7d 85b9      	LDD  R27,Y+8+1
000b7e 9712      	SBIW R26,2
000b7f f008      	BRLO _0x2000059
000b80 cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
000b81 ff00      	SBRS R16,0
000b82 c008      	RJMP _0x200006D
                 _0x200006E:
000b83 3050      	CPI  R21,0
000b84 f031      	BREQ _0x2000070
000b85 5051      	SUBI R21,LOW(1)
000b86 e2e0      	LDI  R30,LOW(32)
000b87 93ea      	ST   -Y,R30
000b88 940e 0ee3 	CALL SUBOPT_0x4A
000b8a cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
000b8b e010      	LDI  R17,LOW(0)
                 _0x200001B:
000b8c ced8      	RJMP _0x2000016
                 _0x2000018:
000b8d 85ac      	LDD  R26,Y+12
000b8e 85bd      	LDD  R27,Y+12+1
000b8f 91ed      	LD   R30,X+
000b90 91fd      	LD   R31,X+
000b91 940e 0f03 	CALL __LOADLOCR6
000b93 9664      	ADIW R28,20
000b94 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
000b95 92ff      	PUSH R15
000b96 2ef8      	MOV  R15,R24
000b97 9726      	SBIW R28,6
000b98 940e 0efe 	CALL __SAVELOCR4
000b9a 01de      	MOVW R26,R28
000b9b 961c      	ADIW R26,12
000b9c 940e 0f0a 	CALL __ADDW2R15
000b9e 940e 0f52 	CALL __GETW1P
000ba0 9730      	SBIW R30,0
000ba1 f419      	BRNE _0x2000072
000ba2 efef      	LDI  R30,LOW(65535)
000ba3 efff      	LDI  R31,HIGH(65535)
000ba4 c027      	RJMP _0x20C0004
                 _0x2000072:
000ba5 01de      	MOVW R26,R28
000ba6 9616      	ADIW R26,6
000ba7 940e 0f0a 	CALL __ADDW2R15
000ba9 018d      	MOVW R16,R26
000baa 01de      	MOVW R26,R28
000bab 961c      	ADIW R26,12
000bac 940e 0f0a 	CALL __ADDW2R15
000bae 91ed      	LD   R30,X+
000baf 91fd      	LD   R31,X+
000bb0 83ee      	STD  Y+6,R30
000bb1 83ff      	STD  Y+6+1,R31
000bb2 e0e0      	LDI  R30,LOW(0)
000bb3 87e8      	STD  Y+8,R30
000bb4 87e9      	STD  Y+8+1,R30
000bb5 01de      	MOVW R26,R28
000bb6 961a      	ADIW R26,10
000bb7 940e 0f0a 	CALL __ADDW2R15
000bb9 91ed      	LD   R30,X+
000bba 91fd      	LD   R31,X+
000bbb 93fa      	ST   -Y,R31
000bbc 93ea      	ST   -Y,R30
000bbd 931a      	ST   -Y,R17
000bbe 930a      	ST   -Y,R16
000bbf e1ef      	LDI  R30,LOW(_put_buff_G100)
000bc0 e0fa      	LDI  R31,HIGH(_put_buff_G100)
000bc1 93fa      	ST   -Y,R31
000bc2 93ea      	ST   -Y,R30
000bc3 01de      	MOVW R26,R28
000bc4 961a      	ADIW R26,10
000bc5 de93      	RCALL __print_G100
000bc6 019f      	MOVW R18,R30
000bc7 81ae      	LDD  R26,Y+6
000bc8 81bf      	LDD  R27,Y+6+1
000bc9 e0e0      	LDI  R30,LOW(0)
000bca 93ec      	ST   X,R30
000bcb 01f9      	MOVW R30,R18
                 _0x20C0004:
000bcc 940e 0f05 	CALL __LOADLOCR4
000bce 962a      	ADIW R28,10
000bcf 90ff      	POP  R15
000bd0 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000bd1 93ba      	ST   -Y,R27
000bd2 93aa      	ST   -Y,R26
000bd3 91a9          ld   r26,y+
000bd4 91b9          ld   r27,y+
000bd5 27ee          clr  r30
000bd6 27ff          clr  r31
                 strlen0:
000bd7 916d          ld   r22,x+
000bd8 2366          tst  r22
000bd9 f011          breq strlen1
000bda 9631          adiw r30,1
000bdb cffb          rjmp strlen0
                 strlen1:
000bdc 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000bdd 93ba      	ST   -Y,R27
000bde 93aa      	ST   -Y,R26
000bdf 27aa          clr  r26
000be0 27bb          clr  r27
000be1 91e9          ld   r30,y+
000be2 91f9          ld   r31,y+
                 strlenf0:
000be3 9005      	lpm  r0,z+
000be4 2000          tst  r0
000be5 f011          breq strlenf1
000be6 9611          adiw r26,1
000be7 cffb          rjmp strlenf0
                 strlenf1:
000be8 01fd          movw r30,r26
000be9 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 _abs:
                 ; .FSTART _abs
000bea 93ba      	ST   -Y,R27
000beb 93aa      	ST   -Y,R26
000bec 91e9          ld   r30,y+
000bed 91f9          ld   r31,y+
000bee 9730          sbiw r30,0
000bef f41a          brpl __abs0
000bf0 95e0          com  r30
000bf1 95f0          com  r31
000bf2 9631          adiw r30,1
                 __abs0:
000bf3 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                     .equ __lcd_direction=__lcd_port-1
                     .equ __lcd_pin=__lcd_port-2
                     .equ __lcd_rs=0
                     .equ __lcd_rd=1
                     .equ __lcd_enable=2
                     .equ __lcd_busy_flag=7
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_delay_G103:
                 ; .FSTART __lcd_delay_G103
000bf4 e0ff          ldi   r31,15
                 __lcd_delay0:
000bf5 95fa          dec   r31
000bf6 f7f1          brne  __lcd_delay0
000bf7 9508      	RET
                 ; .FEND
                 __lcd_ready:
                 ; .FSTART __lcd_ready
000bf8 b3a7          in    r26,__lcd_direction
000bf9 70af          andi  r26,0xf                 ;set as input
000bfa bba7          out   __lcd_direction,r26
000bfb 9ac1          sbi   __lcd_port,__lcd_rd     ;RD=1
000bfc 98c0          cbi   __lcd_port,__lcd_rs     ;RS=0
                 __lcd_busy:
000bfd dff6      	RCALL __lcd_delay_G103
000bfe 9ac2          sbi   __lcd_port,__lcd_enable ;EN=1
000bff dff4      	RCALL __lcd_delay_G103
000c00 b3a6          in    r26,__lcd_pin
000c01 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
000c02 dff1      	RCALL __lcd_delay_G103
000c03 9ac2          sbi   __lcd_port,__lcd_enable ;EN=1
000c04 dfef      	RCALL __lcd_delay_G103
000c05 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
000c06 fda7          sbrc  r26,__lcd_busy_flag
000c07 cff5          rjmp  __lcd_busy
000c08 9508      	RET
                 ; .FEND
                 __lcd_write_nibble_G103:
                 ; .FSTART __lcd_write_nibble_G103
000c09 7fa0          andi  r26,0xf0
000c0a 2bab          or    r26,r27
000c0b bba8          out   __lcd_port,r26          ;write
000c0c 9ac2          sbi   __lcd_port,__lcd_enable ;EN=1
000c0d 940e 0bf4 	CALL __lcd_delay_G103
000c0f 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
000c10 940e 0bf4 	CALL __lcd_delay_G103
000c12 9508      	RET
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000c13 93aa      	ST   -Y,R26
000c14 98c1          cbi  __lcd_port,__lcd_rd 	  ;RD=0
000c15 b3a7          in    r26,__lcd_direction
000c16 6fa7          ori   r26,0xf0 | (1<<__lcd_rs) | (1<<__lcd_rd) | (1<<__lcd_enable) ;set as output
000c17 bba7          out   __lcd_direction,r26
000c18 b3b8          in    r27,__lcd_port
000c19 70bf          andi  r27,0xf
000c1a 81a8          ld    r26,y
000c1b dfed      	RCALL __lcd_write_nibble_G103
000c1c 81a8          ld    r26,y
000c1d 95a2          swap  r26
000c1e dfea      	RCALL __lcd_write_nibble_G103
000c1f 9ac1          sbi   __lcd_port,__lcd_rd     ;RD=1
000c20 940c 0ce9 	JMP  _0x20C0001
                 ; .FEND
                 __lcd_read_nibble_G103:
                 ; .FSTART __lcd_read_nibble_G103
000c22 9ac2          sbi   __lcd_port,__lcd_enable ;EN=1
000c23 940e 0bf4 	CALL __lcd_delay_G103
000c25 b3e6          in    r30,__lcd_pin           ;read
000c26 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
000c27 940e 0bf4 	CALL __lcd_delay_G103
000c29 7fe0          andi  r30,0xf0
000c2a 9508      	RET
                 ; .FEND
                 _lcd_read_byte0_G103:
                 ; .FSTART _lcd_read_byte0_G103
000c2b 940e 0bf4 	CALL __lcd_delay_G103
000c2d dff4      	RCALL __lcd_read_nibble_G103
000c2e 2fae          mov   r26,r30
000c2f dff2      	RCALL __lcd_read_nibble_G103
000c30 98c1          cbi   __lcd_port,__lcd_rd     ;RD=0
000c31 95e2          swap  r30
000c32 2bea          or    r30,r26
000c33 9508      	RET
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000c34 93aa      	ST   -Y,R26
000c35 940e 0bf8 	CALL __lcd_ready
000c37 81e8      	LD   R30,Y
000c38 e0f0      	LDI  R31,0
000c39 54e4      	SUBI R30,LOW(-__base_y_G103)
000c3a 4ffd      	SBCI R31,HIGH(-__base_y_G103)
000c3b 81e0      	LD   R30,Z
000c3c 81a9      	LDD  R26,Y+1
000c3d 0fae      	ADD  R26,R30
000c3e 940e 0c13 	CALL __lcd_write_data
000c40 81e9      	LDD  R30,Y+1
000c41 93e0 02c0 	STS  __lcd_x,R30
000c43 81e8      	LD   R30,Y
000c44 93e0 02c1 	STS  __lcd_y,R30
                 _0x20C0003:
000c46 9622      	ADIW R28,2
000c47 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000c48 940e 0bf8 	CALL __lcd_ready
000c4a e0a2      	LDI  R26,LOW(2)
000c4b 940e 0c13 	CALL __lcd_write_data
000c4d 940e 0bf8 	CALL __lcd_ready
000c4f e0ac      	LDI  R26,LOW(12)
000c50 940e 0c13 	CALL __lcd_write_data
000c52 940e 0bf8 	CALL __lcd_ready
000c54 e0a1      	LDI  R26,LOW(1)
000c55 940e 0c13 	CALL __lcd_write_data
000c57 e0e0      	LDI  R30,LOW(0)
000c58 93e0 02c1 	STS  __lcd_y,R30
000c5a 93e0 02c0 	STS  __lcd_x,R30
000c5c 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000c5d 93aa      	ST   -Y,R26
000c5e 93ef          push r30
000c5f 93ff          push r31
000c60 81a8          ld   r26,y
000c61 9468          set
000c62 30aa          cpi  r26,10
000c63 f039          breq __lcd_putchar1
000c64 94e8          clt
000c65 91e0 02c2 	LDS  R30,__lcd_maxx
000c67 91a0 02c0 	LDS  R26,__lcd_x
000c69 17ae      	CP   R26,R30
000c6a f058      	BRLO _0x2060004
                 	__lcd_putchar1:
000c6b 91e0 02c1 	LDS  R30,__lcd_y
000c6d 5fef      	SUBI R30,-LOW(1)
000c6e 93e0 02c1 	STS  __lcd_y,R30
000c70 e0e0      	LDI  R30,LOW(0)
000c71 93ea      	ST   -Y,R30
000c72 91a0 02c1 	LDS  R26,__lcd_y
000c74 dfbf      	RCALL _lcd_gotoxy
000c75 f056      	brts __lcd_putchar0
                 _0x2060004:
000c76 91e0 02c0 	LDS  R30,__lcd_x
000c78 5fef      	SUBI R30,-LOW(1)
000c79 93e0 02c0 	STS  __lcd_x,R30
000c7b df7c          rcall __lcd_ready
000c7c 9ac0          sbi  __lcd_port,__lcd_rs ;RS=1
000c7d 81a8      	LD   R26,Y
000c7e 940e 0c13 	CALL __lcd_write_data
                 __lcd_putchar0:
000c80 91ff          pop  r31
000c81 91ef          pop  r30
000c82 940c 0ce9 	JMP  _0x20C0001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000c84 93ba      	ST   -Y,R27
000c85 93aa      	ST   -Y,R26
000c86 931a      	ST   -Y,R17
                 _0x2060005:
000c87 81a9      	LDD  R26,Y+1
000c88 81ba      	LDD  R27,Y+1+1
000c89 91ed      	LD   R30,X+
000c8a 83a9      	STD  Y+1,R26
000c8b 83ba      	STD  Y+1+1,R27
000c8c 2f1e      	MOV  R17,R30
000c8d 30e0      	CPI  R30,0
000c8e f019      	BREQ _0x2060007
000c8f 2fa1      	MOV  R26,R17
000c90 dfcc      	RCALL _lcd_putchar
000c91 cff5      	RJMP _0x2060005
                 _0x2060007:
000c92 c010      	RJMP _0x20C0002
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
000c93 93ba      	ST   -Y,R27
000c94 93aa      	ST   -Y,R26
000c95 931a      	ST   -Y,R17
                 _0x2060008:
000c96 81e9      	LDD  R30,Y+1
000c97 81fa      	LDD  R31,Y+1+1
000c98 9631      	ADIW R30,1
000c99 83e9      	STD  Y+1,R30
000c9a 83fa      	STD  Y+1+1,R31
000c9b 9731      	SBIW R30,1
000c9c 91e4      	LPM  R30,Z
000c9d 2f1e      	MOV  R17,R30
000c9e 30e0      	CPI  R30,0
000c9f f019      	BREQ _0x206000A
000ca0 2fa1      	MOV  R26,R17
000ca1 dfbb      	RCALL _lcd_putchar
000ca2 cff3      	RJMP _0x2060008
                 _0x206000A:
                 _0x20C0002:
000ca3 8118      	LDD  R17,Y+0
000ca4 9623      	ADIW R28,3
000ca5 9508      	RET
                 ; .FEND
                 __long_delay_G103:
                 ; .FSTART __long_delay_G103
000ca6 27aa          clr   r26
000ca7 27bb          clr   r27
                 __long_delay0:
000ca8 9711          sbiw  r26,1         ;2 cycles
000ca9 f7f1          brne  __long_delay0 ;2 cycles
000caa 9508      	RET
                 ; .FEND
                 __lcd_init_write_G103:
                 ; .FSTART __lcd_init_write_G103
000cab 93aa      	ST   -Y,R26
000cac 98c1          cbi  __lcd_port,__lcd_rd 	  ;RD=0
000cad b3a7          in    r26,__lcd_direction
000cae 6fa7          ori   r26,0xf7                ;set as output
000caf bba7          out   __lcd_direction,r26
000cb0 b3b8          in    r27,__lcd_port
000cb1 70bf          andi  r27,0xf
000cb2 81a8          ld    r26,y
000cb3 940e 0c09 	CALL __lcd_write_nibble_G103
000cb5 9ac1          sbi   __lcd_port,__lcd_rd     ;RD=1
000cb6 c032      	RJMP _0x20C0001
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000cb7 93aa      	ST   -Y,R26
000cb8 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
000cb9 98c0          cbi   __lcd_port,__lcd_rs     ;RS=0
000cba 81e8      	LD   R30,Y
000cbb 93e0 02c2 	STS  __lcd_maxx,R30
000cbd 58e0      	SUBI R30,-LOW(128)
                +
000cbe 93e0 02be+STS __base_y_G103 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G103,2
000cc0 81e8      	LD   R30,Y
000cc1 54e0      	SUBI R30,-LOW(192)
                +
000cc2 93e0 02bf+STS __base_y_G103 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G103,3
000cc4 940e 0ef3 	CALL SUBOPT_0x4C
000cc6 940e 0ef3 	CALL SUBOPT_0x4C
000cc8 940e 0ef3 	CALL SUBOPT_0x4C
000cca dfdb      	RCALL __long_delay_G103
000ccb e2a0      	LDI  R26,LOW(32)
000ccc dfde      	RCALL __lcd_init_write_G103
000ccd dfd8      	RCALL __long_delay_G103
000cce e2a8      	LDI  R26,LOW(40)
000ccf 940e 0ef8 	CALL SUBOPT_0x4D
000cd1 e0a4      	LDI  R26,LOW(4)
000cd2 940e 0ef8 	CALL SUBOPT_0x4D
000cd4 e8a5      	LDI  R26,LOW(133)
000cd5 940e 0ef8 	CALL SUBOPT_0x4D
000cd7 b3a7          in    r26,__lcd_direction
000cd8 70af          andi  r26,0xf                 ;set as input
000cd9 bba7          out   __lcd_direction,r26
000cda 9ac1          sbi   __lcd_port,__lcd_rd     ;RD=1
000cdb 940e 0c2b 	CALL _lcd_read_byte0_G103
000cdd 30e5      	CPI  R30,LOW(0x5)
000cde f011      	BREQ _0x206000B
000cdf e0e0      	LDI  R30,LOW(0)
000ce0 c008      	RJMP _0x20C0001
                 _0x206000B:
000ce1 940e 0bf8 	CALL __lcd_ready
000ce3 e0a6      	LDI  R26,LOW(6)
000ce4 940e 0c13 	CALL __lcd_write_data
000ce6 940e 0c48 	CALL _lcd_clear
000ce8 e0e1      	LDI  R30,LOW(1)
                 _0x20C0001:
000ce9 9621      	ADIW R28,1
000cea 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _buff:
000260           	.BYTE 0x21
                 _k:
000281           	.BYTE 0x2
                 _pos_servo1:
000283           	.BYTE 0x1
                 _pos_servo2:
000284           	.BYTE 0x1
                 _pos_gulung:
000285           	.BYTE 0x1
                 _a:
000286           	.BYTE 0x1
                 _count_btn:
000287           	.BYTE 0x2
                 _count_child_btn:
000289           	.BYTE 0x2
                 _isChildSelect:
00028b           	.BYTE 0x1
                 _isTestTombol:
00028c           	.BYTE 0x1
                 _positionD:
00028d           	.BYTE 0x2
                 
                 	.ESEG
                 _garis:
000000           	.BYTE 0xE
                 _back:
00000e           	.BYTE 0xE
                 _tengah:
00001c           	.BYTE 0xE
                 _mapMirror:
00002a           	.BYTE 0x2
                 
                 	.DSEG
                 _sen:
00028f           	.BYTE 0x7
                 _sensor:
000296           	.BYTE 0x2
                 _error:
000298           	.BYTE 0x2
                 _lastError:
00029a           	.BYTE 0x2
                 _kp:
00029c           	.BYTE 0x2
                 _kd:
00029e           	.BYTE 0x2
                 _SPEED:
0002a0           	.BYTE 0x2
                 _MIN_SPEED:
0002a2           	.BYTE 0x2
                 _MAX_SPEED:
0002a4           	.BYTE 0x2
                 _count:
0002a6           	.BYTE 0x2
                 _second:
0002a8           	.BYTE 0x2
                 _maxHijau:
0002aa           	.BYTE 0x2
                 _maxKuning:
0002ac           	.BYTE 0x2
                 _maxMerah:
0002ae           	.BYTE 0x2
                 _minHijau:
0002b0           	.BYTE 0x2
                 _minKuning:
0002b2           	.BYTE 0x2
                 _minMerah:
0002b4           	.BYTE 0x2
                 _isWarna:
0002b6           	.BYTE 0x2
                 __seed_G102:
0002b8           	.BYTE 0x4
                 __base_y_G103:
0002bc           	.BYTE 0x4
                 __lcd_x:
0002c0           	.BYTE 0x1
                 __lcd_y:
0002c1           	.BYTE 0x1
                 __lcd_maxx:
0002c2           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
000ceb e0e7      	LDI  R30,LOW(7)
000cec e0f0      	LDI  R31,HIGH(7)
000ced 16ce      	CP   R12,R30
000cee 06df      	CPC  R13,R31
000cef 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x1:
000cf0 2dac      	MOV  R26,R12
000cf1 940e 0165 	CALL _read_adc
000cf3 2e0e      	MOV  R0,R30
000cf4 01f6      	MOVW R30,R12
000cf5 e1ac      	LDI  R26,LOW(_tengah)
000cf6 e0b0      	LDI  R27,HIGH(_tengah)
000cf7 0fee      	LSL  R30
000cf8 1fff      	ROL  R31
000cf9 0fae      	ADD  R26,R30
000cfa 1fbf      	ADC  R27,R31
000cfb 940e 0f5f 	CALL __EEPROMRDW
000cfd 2da0      	MOV  R26,R0
000cfe e0b0      	LDI  R27,0
000cff 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2:
000d00 9fea      	MUL  R30,R26
000d01 01f0      	MOVW R30,R0
                +
000d02 0f6e     +ADD R22 , R30
000d03 1f7f     +ADC R23 , R31
                 	__ADDWRR 22,23,30,31
000d04 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 17 TIMES, CODE SIZE REDUCTION:29 WORDS
                 SUBOPT_0x3:
000d05 93ea      	ST   -Y,R30
000d06 e0a0      	LDI  R26,LOW(0)
000d07 940c 0c34 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x4:
000d09 e6e0      	LDI  R30,LOW(_buff)
000d0a e0f2      	LDI  R31,HIGH(_buff)
000d0b 93fa      	ST   -Y,R31
000d0c 93ea      	ST   -Y,R30
000d0d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x5:
000d0e 27ff      	CLR  R31
000d0f 2766      	CLR  R22
000d10 2777      	CLR  R23
000d11 940e 0f5a 	CALL __PUTPARD1
000d13 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6:
000d14 01f6      	MOVW R30,R12
000d15 e0a0      	LDI  R26,LOW(_garis)
000d16 e0b0      	LDI  R27,HIGH(_garis)
000d17 0fee      	LSL  R30
000d18 1fff      	ROL  R31
000d19 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
000d1a e0f0      	LDI  R31,0
000d1b 940e 0f6f 	CALL __EEPROMWRW
000d1d e0e0      	LDI  R30,LOW(0)
000d1e cfe6      	RJMP SUBOPT_0x3
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x8:
000d1f 940e 0c93 	CALL _lcd_putsf
000d21 e0e0      	LDI  R30,LOW(0)
000d22 93ea      	ST   -Y,R30
000d23 e0a1      	LDI  R26,LOW(1)
000d24 940e 0c34 	CALL _lcd_gotoxy
000d26 cfe2      	RJMP SUBOPT_0x4
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x9:
                +
000d27 eae1     +LDI R30 , LOW ( 2 * _0x0 + ( 25 ) )
000d28 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 25 ) )
                 	__POINTW1FN _0x0,25
000d29 93fa      	ST   -Y,R31
000d2a 93ea      	ST   -Y,R30
000d2b 01f6      	MOVW R30,R12
000d2c 940e 0f1a 	CALL __CWD1
000d2e 940e 0f5a 	CALL __PUTPARD1
000d30 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0xA:
000d31 0fae      	ADD  R26,R30
000d32 1fbf      	ADC  R27,R31
000d33 940e 0f5f 	CALL __EEPROMRDW
000d35 940e 0f1a 	CALL __CWD1
000d37 940e 0f5a 	CALL __PUTPARD1
000d39 e088      	LDI  R24,8
000d3a 940e 0b95 	CALL _sprintf
000d3c 962c      	ADIW R28,12
000d3d e6a0      	LDI  R26,LOW(_buff)
000d3e e0b2      	LDI  R27,HIGH(_buff)
000d3f 940e 0c84 	CALL _lcd_puts
000d41 98c3      	CBI  0x18,3
000d42 e0aa      	LDI  R26,LOW(10)
000d43 e0b0      	LDI  R27,0
000d44 940e 1073 	CALL _delay_ms
000d46 9ac3      	SBI  0x18,3
000d47 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xB:
000d48 01f6      	MOVW R30,R12
000d49 e0ae      	LDI  R26,LOW(_back)
000d4a e0b0      	LDI  R27,HIGH(_back)
000d4b 0fee      	LSL  R30
000d4c 1fff      	ROL  R31
000d4d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xC:
000d4e 0fae      	ADD  R26,R30
000d4f 1fbf      	ADC  R27,R31
000d50 940e 0f5f 	CALL __EEPROMRDW
000d52 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0xD:
000d53 93aa      	ST   -Y,R26
000d54 81e8      	LD   R30,Y
000d55 e0f0      	LDI  R31,0
000d56 bdf9      	OUT  0x28+1,R31
000d57 bde8      	OUT  0x28,R30
000d58 81e9      	LDD  R30,Y+1
000d59 e0f0      	LDI  R31,0
000d5a bdfb      	OUT  0x2A+1,R31
000d5b bdea      	OUT  0x2A,R30
000d5c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
000d5d 81a8      	LD   R26,Y
000d5e 81b9      	LDD  R27,Y+1
000d5f 940e 0f88 	CALL __CPW02
000d61 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xF:
000d62 81a8      	LD   R26,Y
000d63 81b9      	LDD  R27,Y+1
000d64 940c 0170 	JMP  _delay
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x10:
000d66 81e8      	LD   R30,Y
000d67 81f9      	LDD  R31,Y+1
000d68 940e 0f1a 	CALL __CWD1
000d6a 940e 0ff8 	CALL __CDF1
000d6c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x11:
000d6d 940e 0fc1 	CALL __CFD1
000d6f 93ed      	ST   X+,R30
000d70 93fc      	ST   X,R31
000d71 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x12:
000d72 91e0 0296 	LDS  R30,_sensor
000d74 91f0 0297 	LDS  R31,_sensor+1
000d76 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x13:
000d77 91e0 02a4 	LDS  R30,_MAX_SPEED
000d79 91f0 02a5 	LDS  R31,_MAX_SPEED+1
000d7b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x14:
000d7c 91e0 02a2 	LDS  R30,_MIN_SPEED
000d7e 91f0 02a3 	LDS  R31,_MIN_SPEED+1
000d80 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x15:
000d81 dff0      	RCALL SUBOPT_0x12
000d82 71ec      	ANDI R30,LOW(0x1C)
000d83 31ec      	CPI  R30,LOW(0x1C)
000d84 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x16:
000d85 91ed      	LD   R30,X+
000d86 91fd      	LD   R31,X+
000d87 9631      	ADIW R30,1
000d88 93fe      	ST   -X,R31
000d89 93ee      	ST   -X,R30
000d8a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x17:
000d8b 81a8      	LD   R26,Y
000d8c 81b9      	LDD  R27,Y+1
000d8d 940c 02bf 	JMP  _rem
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x18:
000d8f 81ea      	LDD  R30,Y+2
000d90 93ea      	ST   -Y,R30
000d91 81ab      	LDD  R26,Y+3
000d92 940e 028f 	CALL _kiri
000d94 940c 01c1 	JMP  _cek_sensor
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x19:
000d96 81ea      	LDD  R30,Y+2
000d97 93ea      	ST   -Y,R30
000d98 81ab      	LDD  R26,Y+3
000d99 940e 0288 	CALL _kanan
000d9b 940c 01c1 	JMP  _cek_sensor
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1A:
000d9d 93ba      	ST   -Y,R27
000d9e 93aa      	ST   -Y,R26
000d9f e2aa      	LDI  R26,LOW(_mapMirror)
000da0 e0b0      	LDI  R27,HIGH(_mapMirror)
000da1 940e 0f5f 	CALL __EEPROMRDW
000da3 9730      	SBIW R30,0
000da4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1B:
000da5 81ea      	LDD  R30,Y+2
000da6 81fb      	LDD  R31,Y+2+1
000da7 93fa      	ST   -Y,R31
000da8 93ea      	ST   -Y,R30
000da9 81aa      	LDD  R26,Y+2
000daa 81bb      	LDD  R27,Y+2+1
000dab 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 19 TIMES, CODE SIZE REDUCTION:33 WORDS
                 SUBOPT_0x1C:
000dac 93ea      	ST   -Y,R30
000dad e0a1      	LDI  R26,LOW(1)
000dae 940c 0c34 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 13 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x1D:
000db0 e0e2      	LDI  R30,LOW(2)
000db1 e0f0      	LDI  R31,HIGH(2)
000db2 93fa      	ST   -Y,R31
000db3 93ea      	ST   -Y,R30
000db4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x1E:
000db5 e7a8      	LDI  R26,LOW(120)
000db6 e0b0      	LDI  R27,0
000db7 940c 03ea 	JMP  _scanX
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 36 TIMES, CODE SIZE REDUCTION:207 WORDS
                 SUBOPT_0x1F:
000db9 e0e1      	LDI  R30,LOW(1)
000dba e0f0      	LDI  R31,HIGH(1)
000dbb 93fa      	ST   -Y,R31
000dbc 93ea      	ST   -Y,R30
000dbd e5a0      	LDI  R26,LOW(80)
000dbe e0b0      	LDI  R27,0
000dbf 940c 03ea 	JMP  _scanX
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x20:
000dc1 e2ed      	LDI  R30,LOW(45)
000dc2 e0f0      	LDI  R31,HIGH(45)
000dc3 93fa      	ST   -Y,R31
000dc4 93ea      	ST   -Y,R30
000dc5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:22 WORDS
                 SUBOPT_0x21:
000dc6 e5e0      	LDI  R30,LOW(80)
000dc7 e0f0      	LDI  R31,HIGH(80)
000dc8 93fa      	ST   -Y,R31
000dc9 93ea      	ST   -Y,R30
000dca e3a2      	LDI  R26,LOW(50)
000dcb e0b0      	LDI  R27,0
000dcc 940e 040e 	CALL _scanTimer
000dce e1a4      	LDI  R26,LOW(20)
000dcf e0b0      	LDI  R27,0
000dd0 940e 048f 	CALL _taruh
000dd2 e6e4      	LDI  R30,LOW(100)
000dd3 93ea      	ST   -Y,R30
000dd4 e6a4      	LDI  R26,LOW(100)
000dd5 940e 0281 	CALL _mundur
000dd7 e1ae      	LDI  R26,LOW(30)
000dd8 e0b0      	LDI  R27,0
000dd9 940e 0170 	CALL _delay
000ddb e6e4      	LDI  R30,LOW(100)
000ddc e0f0      	LDI  R31,HIGH(100)
000ddd 93fa      	ST   -Y,R31
000dde 93ea      	ST   -Y,R30
000ddf e1a4      	LDI  R26,LOW(20)
000de0 e0b0      	LDI  R27,0
000de1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x22:
000de2 940e 0476 	CALL _belokKiri
000de4 cfcb      	RJMP SUBOPT_0x1D
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 23 TIMES, CODE SIZE REDUCTION:41 WORDS
                 SUBOPT_0x23:
000de5 e6a4      	LDI  R26,LOW(100)
000de6 e0b0      	LDI  R27,0
000de7 940c 03ea 	JMP  _scanX
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 38 TIMES, CODE SIZE REDUCTION:145 WORDS
                 SUBOPT_0x24:
000de9 e6e4      	LDI  R30,LOW(100)
000dea e0f0      	LDI  R31,HIGH(100)
000deb 93fa      	ST   -Y,R31
000dec 93ea      	ST   -Y,R30
000ded e1a4      	LDI  R26,LOW(20)
000dee e0b0      	LDI  R27,0
000def 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x25:
000df0 940e 04a0 	CALL _bawah_lepas
000df2 cfc6      	RJMP SUBOPT_0x1F
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x26:
000df3 940e 046b 	CALL _belokKanan
000df5 cfba      	RJMP SUBOPT_0x1D
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:51 WORDS
                 SUBOPT_0x27:
000df6 93fa      	ST   -Y,R31
000df7 93ea      	ST   -Y,R30
000df8 e5ef      	LDI  R30,LOW(95)
000df9 e0f0      	LDI  R31,HIGH(95)
000dfa 93fa      	ST   -Y,R31
000dfb 93ea      	ST   -Y,R30
000dfc e3a2      	LDI  R26,LOW(50)
000dfd e0b0      	LDI  R27,0
000dfe 940e 040e 	CALL _scanTimer
000e00 e1a4      	LDI  R26,LOW(20)
000e01 e0b0      	LDI  R27,0
000e02 940e 048f 	CALL _taruh
000e04 e6e4      	LDI  R30,LOW(100)
000e05 93ea      	ST   -Y,R30
000e06 e6a4      	LDI  R26,LOW(100)
000e07 940e 0281 	CALL _mundur
000e09 e1ae      	LDI  R26,LOW(30)
000e0a e0b0      	LDI  R27,0
000e0b 940e 0170 	CALL _delay
000e0d e6e4      	LDI  R30,LOW(100)
000e0e e0f0      	LDI  R31,HIGH(100)
000e0f 93fa      	ST   -Y,R31
000e10 93ea      	ST   -Y,R30
000e11 e0a0      	LDI  R26,LOW(0)
000e12 e0b0      	LDI  R27,0
000e13 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x28:
000e14 940e 0476 	CALL _belokKiri
000e16 e0e1      	LDI  R30,LOW(1)
000e17 e0f0      	LDI  R31,HIGH(1)
000e18 93fa      	ST   -Y,R31
000e19 93ea      	ST   -Y,R30
000e1a cfca      	RJMP SUBOPT_0x23
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x29:
000e1b e0e3      	LDI  R30,LOW(3)
000e1c e0f0      	LDI  R31,HIGH(3)
000e1d 93fa      	ST   -Y,R31
000e1e 93ea      	ST   -Y,R30
000e1f e9a6      	LDI  R26,LOW(150)
000e20 e0b0      	LDI  R27,0
000e21 940c 03ea 	JMP  _scanX
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2A:
000e23 940e 0476 	CALL _belokKiri
000e25 cf93      	RJMP SUBOPT_0x1F
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x2B:
000e26 940e 046b 	CALL _belokKanan
000e28 cfc0      	RJMP SUBOPT_0x24
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 11 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x2C:
000e29 940e 046b 	CALL _belokKanan
000e2b cf8d      	RJMP SUBOPT_0x1F
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2D:
000e2c 93fa      	ST   -Y,R31
000e2d 93ea      	ST   -Y,R30
000e2e e5ef      	LDI  R30,LOW(95)
000e2f e0f0      	LDI  R31,HIGH(95)
000e30 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:53 WORDS
                 SUBOPT_0x2E:
000e31 e9a6      	LDI  R26,LOW(150)
000e32 e0b0      	LDI  R27,0
000e33 940e 03ea 	CALL _scanX
000e35 e0e1      	LDI  R30,LOW(1)
000e36 e0f0      	LDI  R31,HIGH(1)
000e37 93fa      	ST   -Y,R31
000e38 93ea      	ST   -Y,R30
000e39 cfab      	RJMP SUBOPT_0x23
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 21 TIMES, CODE SIZE REDUCTION:37 WORDS
                 SUBOPT_0x2F:
000e3a e0e1      	LDI  R30,LOW(1)
000e3b e0f0      	LDI  R31,HIGH(1)
000e3c 93fa      	ST   -Y,R31
000e3d 93ea      	ST   -Y,R30
000e3e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x30:
000e3f 93fa      	ST   -Y,R31
000e40 93ea      	ST   -Y,R30
000e41 e3a2      	LDI  R26,LOW(50)
000e42 e0b0      	LDI  R27,0
000e43 940c 040e 	JMP  _scanTimer
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 17 TIMES, CODE SIZE REDUCTION:45 WORDS
                 SUBOPT_0x31:
000e45 e6e4      	LDI  R30,LOW(100)
000e46 93ea      	ST   -Y,R30
000e47 e6a4      	LDI  R26,LOW(100)
000e48 940c 0281 	JMP  _mundur
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x32:
000e4a e0b0      	LDI  R27,0
000e4b 940e 0170 	CALL _delay
000e4d cf9b      	RJMP SUBOPT_0x24
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:39 WORDS
                 SUBOPT_0x33:
000e4e e0b0      	LDI  R27,0
000e4f 940e 0170 	CALL _delay
000e51 e6e4      	LDI  R30,LOW(100)
000e52 e0f0      	LDI  R31,HIGH(100)
000e53 93fa      	ST   -Y,R31
000e54 93ea      	ST   -Y,R30
000e55 e0a0      	LDI  R26,LOW(0)
000e56 e0b0      	LDI  R27,0
000e57 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x34:
000e58 940e 046b 	CALL _belokKanan
000e5a cfdf      	RJMP SUBOPT_0x2F
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x35:
000e5b e1a4      	LDI  R26,LOW(20)
000e5c e0b0      	LDI  R27,0
000e5d 940c 0482 	JMP  _ambil
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x36:
000e5f 91e0 028d 	LDS  R30,_positionD
000e61 91f0 028e 	LDS  R31,_positionD+1
000e63 9730      	SBIW R30,0
000e64 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:19 WORDS
                 SUBOPT_0x37:
000e65 91a0 028d 	LDS  R26,_positionD
000e67 91b0 028e 	LDS  R27,_positionD+1
000e69 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x38:
000e6a e0b0      	LDI  R27,0
000e6b 940e 0170 	CALL _delay
000e6d e5e0      	LDI  R30,LOW(80)
000e6e e0f0      	LDI  R31,HIGH(80)
000e6f 93fa      	ST   -Y,R31
000e70 93ea      	ST   -Y,R30
000e71 e1a4      	LDI  R26,LOW(20)
000e72 e0b0      	LDI  R27,0
000e73 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x39:
000e74 e6e4      	LDI  R30,LOW(100)
000e75 e0f0      	LDI  R31,HIGH(100)
000e76 93fa      	ST   -Y,R31
000e77 93ea      	ST   -Y,R30
000e78 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x3A:
000e79 e3a2      	LDI  R26,LOW(50)
000e7a e0b0      	LDI  R27,0
000e7b 940e 0170 	CALL _delay
000e7d 940e 04c2 	CALL _checkWarna
000e7f 93e0 02b6 	STS  _isWarna,R30
000e81 93f0 02b7 	STS  _isWarna+1,R31
000e83 9730      	SBIW R30,0
000e84 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x3B:
000e85 91a0 02b6 	LDS  R26,_isWarna
000e87 91b0 02b7 	LDS  R27,_isWarna+1
000e89 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x3C:
000e8a 940e 0c48 	CALL _lcd_clear
000e8c e0e0      	LDI  R30,LOW(0)
000e8d ce77      	RJMP SUBOPT_0x3
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x3D:
000e8e 940e 0c93 	CALL _lcd_putsf
000e90 e0e0      	LDI  R30,LOW(0)
000e91 cf1a      	RJMP SUBOPT_0x1C
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3E:
000e92 e0e0      	LDI  R30,LOW(0)
000e93 93e0 0289 	STS  _count_child_btn,R30
000e95 93e0 028a 	STS  _count_child_btn+1,R30
000e97 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:29 WORDS
                 SUBOPT_0x3F:
000e98 e0e0      	LDI  R30,LOW(0)
000e99 e0f0      	LDI  R31,HIGH(0)
000e9a 93fa      	ST   -Y,R31
000e9b 93ea      	ST   -Y,R30
000e9c 93ea      	ST   -Y,R30
000e9d e0a0      	LDI  R26,LOW(0)
000e9e e0b0      	LDI  R27,0
000e9f 940c 07a9 	JMP  _changeMenu
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x40:
000ea1 e2aa      	LDI  R26,LOW(_mapMirror)
000ea2 e0b0      	LDI  R27,HIGH(_mapMirror)
000ea3 e0e0      	LDI  R30,LOW(0)
000ea4 e0f0      	LDI  R31,HIGH(0)
000ea5 940e 0f6f 	CALL __EEPROMWRW
000ea7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x41:
000ea8 93e0 028b 	STS  _isChildSelect,R30
000eaa cfed      	RJMP SUBOPT_0x3F
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x42:
000eab e6a4      	LDI  R26,LOW(100)
000eac e0b0      	LDI  R27,0
000ead 940e 0296 	CALL _setMotor
000eaf eca8      	LDI  R26,LOW(200)
000eb0 e0b0      	LDI  R27,0
000eb1 940c 1073 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x43:
000eb3 940e 0c93 	CALL _lcd_putsf
000eb5 e9ec      	LDI  R30,LOW(65436)
000eb6 efff      	LDI  R31,HIGH(65436)
000eb7 93fa      	ST   -Y,R31
000eb8 93ea      	ST   -Y,R30
000eb9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x44:
000eba e9ac      	LDI  R26,LOW(65436)
000ebb efbf      	LDI  R27,HIGH(65436)
000ebc 940e 0296 	CALL _setMotor
000ebe eca8      	LDI  R26,LOW(200)
000ebf e0b0      	LDI  R27,0
000ec0 940e 1073 	CALL _delay_ms
000ec2 e0e0      	LDI  R30,LOW(0)
000ec3 cee8      	RJMP SUBOPT_0x1C
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x45:
000ec4 e3a2      	LDI  R26,LOW(50)
000ec5 e0b0      	LDI  R27,0
000ec6 940c 0170 	JMP  _delay
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x46:
000ec8 91e0 0287 	LDS  R30,_count_btn
000eca 91f0 0288 	LDS  R31,_count_btn+1
000ecc 93fa      	ST   -Y,R31
000ecd 93ea      	ST   -Y,R30
000ece 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x47:
000ecf 93ea      	ST   -Y,R30
000ed0 91a0 0289 	LDS  R26,_count_child_btn
000ed2 91b0 028a 	LDS  R27,_count_child_btn+1
000ed4 940c 07a9 	JMP  _changeMenu
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x48:
000ed6 932a      	ST   -Y,R18
000ed7 85ad      	LDD  R26,Y+13
000ed8 85be      	LDD  R27,Y+13+1
000ed9 85ef      	LDD  R30,Y+15
000eda 89f8      	LDD  R31,Y+15+1
000edb 9509      	ICALL
000edc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x49:
000edd 89e8      	LDD  R30,Y+16
000ede 89f9      	LDD  R31,Y+16+1
000edf 9734      	SBIW R30,4
000ee0 8be8      	STD  Y+16,R30
000ee1 8bf9      	STD  Y+16+1,R31
000ee2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4A:
000ee3 85ad      	LDD  R26,Y+13
000ee4 85be      	LDD  R27,Y+13+1
000ee5 85ef      	LDD  R30,Y+15
000ee6 89f8      	LDD  R31,Y+15+1
000ee7 9509      	ICALL
000ee8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x4B:
000ee9 89a8      	LDD  R26,Y+16
000eea 89b9      	LDD  R27,Y+16+1
000eeb 9614      	ADIW R26,4
000eec 91ed      	LD   R30,X+
000eed 91fd      	LD   R31,X+
000eee 83ee      	STD  Y+6,R30
000eef 83ff      	STD  Y+6+1,R31
000ef0 81ae      	LDD  R26,Y+6
000ef1 81bf      	LDD  R27,Y+6+1
000ef2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4C:
000ef3 940e 0ca6 	CALL __long_delay_G103
000ef5 e3a0      	LDI  R26,LOW(48)
000ef6 940c 0cab 	JMP  __lcd_init_write_G103
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4D:
000ef8 940e 0c13 	CALL __lcd_write_data
000efa 940c 0ca6 	JMP  __long_delay_G103
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
000efc 935a      	ST   -Y,R21
                 __SAVELOCR5:
000efd 934a      	ST   -Y,R20
                 __SAVELOCR4:
000efe 933a      	ST   -Y,R19
                 __SAVELOCR3:
000eff 932a      	ST   -Y,R18
                 __SAVELOCR2:
000f00 931a      	ST   -Y,R17
000f01 930a      	ST   -Y,R16
000f02 9508      	RET
                 
                 __LOADLOCR6:
000f03 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000f04 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000f05 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000f06 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000f07 8119      	LDD  R17,Y+1
000f08 8108      	LD   R16,Y
000f09 9508      	RET
                 
                 __ADDW2R15:
000f0a 2400      	CLR  R0
000f0b 0daf      	ADD  R26,R15
000f0c 1db0      	ADC  R27,R0
000f0d 9508      	RET
                 
                 __ANEGW1:
000f0e 95f1      	NEG  R31
000f0f 95e1      	NEG  R30
000f10 40f0      	SBCI R31,0
000f11 9508      	RET
                 
                 __ANEGD1:
000f12 95f0      	COM  R31
000f13 9560      	COM  R22
000f14 9570      	COM  R23
000f15 95e1      	NEG  R30
000f16 4fff      	SBCI R31,-1
000f17 4f6f      	SBCI R22,-1
000f18 4f7f      	SBCI R23,-1
000f19 9508      	RET
                 
                 __CWD1:
000f1a 2f6f      	MOV  R22,R31
000f1b 0f66      	ADD  R22,R22
000f1c 0b66      	SBC  R22,R22
000f1d 2f76      	MOV  R23,R22
000f1e 9508      	RET
                 
                 __MULW12U:
000f1f 9ffa      	MUL  R31,R26
000f20 2df0      	MOV  R31,R0
000f21 9feb      	MUL  R30,R27
000f22 0df0      	ADD  R31,R0
000f23 9fea      	MUL  R30,R26
000f24 2de0      	MOV  R30,R0
000f25 0df1      	ADD  R31,R1
000f26 9508      	RET
                 
                 __MULW12:
000f27 d01c      	RCALL __CHKSIGNW
000f28 dff6      	RCALL __MULW12U
000f29 f40e      	BRTC __MULW121
000f2a dfe3      	RCALL __ANEGW1
                 __MULW121:
000f2b 9508      	RET
                 
                 __DIVW21U:
000f2c 2400      	CLR  R0
000f2d 2411      	CLR  R1
000f2e e190      	LDI  R25,16
                 __DIVW21U1:
000f2f 0faa      	LSL  R26
000f30 1fbb      	ROL  R27
000f31 1c00      	ROL  R0
000f32 1c11      	ROL  R1
000f33 1a0e      	SUB  R0,R30
000f34 0a1f      	SBC  R1,R31
000f35 f418      	BRCC __DIVW21U2
000f36 0e0e      	ADD  R0,R30
000f37 1e1f      	ADC  R1,R31
000f38 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000f39 60a1      	SBR  R26,1
                 __DIVW21U3:
000f3a 959a      	DEC  R25
000f3b f799      	BRNE __DIVW21U1
000f3c 01fd      	MOVW R30,R26
000f3d 01d0      	MOVW R26,R0
000f3e 9508      	RET
                 
                 __DIVW21:
000f3f d004      	RCALL __CHKSIGNW
000f40 dfeb      	RCALL __DIVW21U
000f41 f40e      	BRTC __DIVW211
000f42 dfcb      	RCALL __ANEGW1
                 __DIVW211:
000f43 9508      	RET
                 
                 __CHKSIGNW:
000f44 94e8      	CLT
000f45 fff7      	SBRS R31,7
000f46 c002      	RJMP __CHKSW1
000f47 dfc6      	RCALL __ANEGW1
000f48 9468      	SET
                 __CHKSW1:
000f49 ffb7      	SBRS R27,7
000f4a c006      	RJMP __CHKSW2
000f4b 95b1      	NEG  R27
000f4c 95a1      	NEG  R26
000f4d 40b0      	SBCI R27,0
000f4e f800      	BLD  R0,0
000f4f 9403      	INC  R0
000f50 fa00      	BST  R0,0
                 __CHKSW2:
000f51 9508      	RET
                 
                 __GETW1P:
000f52 91ed      	LD   R30,X+
000f53 91fc      	LD   R31,X
000f54 9711      	SBIW R26,1
000f55 9508      	RET
                 
                 __GETW1PF:
000f56 9005      	LPM  R0,Z+
000f57 91f4      	LPM  R31,Z
000f58 2de0      	MOV  R30,R0
000f59 9508      	RET
                 
                 __PUTPARD1:
000f5a 937a      	ST   -Y,R23
000f5b 936a      	ST   -Y,R22
000f5c 93fa      	ST   -Y,R31
000f5d 93ea      	ST   -Y,R30
000f5e 9508      	RET
                 
                 __EEPROMRDW:
000f5f 9611      	ADIW R26,1
000f60 d002      	RCALL __EEPROMRDB
000f61 2ffe      	MOV  R31,R30
000f62 9711      	SBIW R26,1
                 
                 __EEPROMRDB:
000f63 99e1      	SBIC EECR,EEWE
000f64 cffe      	RJMP __EEPROMRDB
000f65 93ff      	PUSH R31
000f66 b7ff      	IN   R31,SREG
000f67 94f8      	CLI
000f68 bbae      	OUT  EEARL,R26
000f69 bbbf      	OUT  EEARH,R27
000f6a 9ae0      	SBI  EECR,EERE
000f6b b3ed      	IN   R30,EEDR
000f6c bfff      	OUT  SREG,R31
000f6d 91ff      	POP  R31
000f6e 9508      	RET
                 
                 __EEPROMWRW:
000f6f d007      	RCALL __EEPROMWRB
000f70 9611      	ADIW R26,1
000f71 93ef      	PUSH R30
000f72 2fef      	MOV  R30,R31
000f73 d003      	RCALL __EEPROMWRB
000f74 91ef      	POP  R30
000f75 9711      	SBIW R26,1
000f76 9508      	RET
                 
                 __EEPROMWRB:
000f77 9be1      	SBIS EECR,EEWE
000f78 c002      	RJMP __EEPROMWRB1
000f79 95a8      	WDR
000f7a cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
000f7b b79f      	IN   R25,SREG
000f7c 94f8      	CLI
000f7d bbae      	OUT  EEARL,R26
000f7e bbbf      	OUT  EEARH,R27
000f7f 9ae0      	SBI  EECR,EERE
000f80 b38d      	IN   R24,EEDR
000f81 17e8      	CP   R30,R24
000f82 f019      	BREQ __EEPROMWRB0
000f83 bbed      	OUT  EEDR,R30
000f84 9ae2      	SBI  EECR,EEMWE
000f85 9ae1      	SBI  EECR,EEWE
                 __EEPROMWRB0:
000f86 bf9f      	OUT  SREG,R25
000f87 9508      	RET
                 
                 __CPW02:
000f88 2400      	CLR  R0
000f89 160a      	CP   R0,R26
000f8a 060b      	CPC  R0,R27
000f8b 9508      	RET
                 
                 __ANEGF1:
000f8c 9730      	SBIW R30,0
000f8d 4060      	SBCI R22,0
000f8e 4070      	SBCI R23,0
000f8f f009      	BREQ __ANEGF10
000f90 5870      	SUBI R23,0x80
                 __ANEGF10:
000f91 9508      	RET
                 
                 __ROUND_REPACK:
000f92 2355      	TST  R21
000f93 f442      	BRPL __REPACK
000f94 3850      	CPI  R21,0x80
000f95 f411      	BRNE __ROUND_REPACK0
000f96 ffe0      	SBRS R30,0
000f97 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000f98 9631      	ADIW R30,1
000f99 1f69      	ADC  R22,R25
000f9a 1f79      	ADC  R23,R25
000f9b f06b      	BRVS __REPACK1
                 
                 __REPACK:
000f9c e850      	LDI  R21,0x80
000f9d 2757      	EOR  R21,R23
000f9e f411      	BRNE __REPACK0
000f9f 935f      	PUSH R21
000fa0 c073      	RJMP __ZERORES
                 __REPACK0:
000fa1 3f5f      	CPI  R21,0xFF
000fa2 f031      	BREQ __REPACK1
000fa3 0f66      	LSL  R22
000fa4 0c00      	LSL  R0
000fa5 9557      	ROR  R21
000fa6 9567      	ROR  R22
000fa7 2f75      	MOV  R23,R21
000fa8 9508      	RET
                 __REPACK1:
000fa9 935f      	PUSH R21
000faa 2000      	TST  R0
000fab f00a      	BRMI __REPACK2
000fac c072      	RJMP __MAXRES
                 __REPACK2:
000fad c06b      	RJMP __MINRES
                 
                 __UNPACK:
000fae e850      	LDI  R21,0x80
000faf 2e19      	MOV  R1,R25
000fb0 2215      	AND  R1,R21
000fb1 0f88      	LSL  R24
000fb2 1f99      	ROL  R25
000fb3 2795      	EOR  R25,R21
000fb4 0f55      	LSL  R21
000fb5 9587      	ROR  R24
                 
                 __UNPACK1:
000fb6 e850      	LDI  R21,0x80
000fb7 2e07      	MOV  R0,R23
000fb8 2205      	AND  R0,R21
000fb9 0f66      	LSL  R22
000fba 1f77      	ROL  R23
000fbb 2775      	EOR  R23,R21
000fbc 0f55      	LSL  R21
000fbd 9567      	ROR  R22
000fbe 9508      	RET
                 
                 __CFD1U:
000fbf 9468      	SET
000fc0 c001      	RJMP __CFD1U0
                 __CFD1:
000fc1 94e8      	CLT
                 __CFD1U0:
000fc2 935f      	PUSH R21
000fc3 dff2      	RCALL __UNPACK1
000fc4 3870      	CPI  R23,0x80
000fc5 f018      	BRLO __CFD10
000fc6 3f7f      	CPI  R23,0xFF
000fc7 f408      	BRCC __CFD10
000fc8 c04b      	RJMP __ZERORES
                 __CFD10:
000fc9 e156      	LDI  R21,22
000fca 1b57      	SUB  R21,R23
000fcb f4aa      	BRPL __CFD11
000fcc 9551      	NEG  R21
000fcd 3058      	CPI  R21,8
000fce f40e      	BRTC __CFD19
000fcf 3059      	CPI  R21,9
                 __CFD19:
000fd0 f030      	BRLO __CFD17
000fd1 efef      	SER  R30
000fd2 efff      	SER  R31
000fd3 ef6f      	SER  R22
000fd4 e77f      	LDI  R23,0x7F
000fd5 f977      	BLD  R23,7
000fd6 c01a      	RJMP __CFD15
                 __CFD17:
000fd7 2777      	CLR  R23
000fd8 2355      	TST  R21
000fd9 f0b9      	BREQ __CFD15
                 __CFD18:
000fda 0fee      	LSL  R30
000fdb 1fff      	ROL  R31
000fdc 1f66      	ROL  R22
000fdd 1f77      	ROL  R23
000fde 955a      	DEC  R21
000fdf f7d1      	BRNE __CFD18
000fe0 c010      	RJMP __CFD15
                 __CFD11:
000fe1 2777      	CLR  R23
                 __CFD12:
000fe2 3058      	CPI  R21,8
000fe3 f028      	BRLO __CFD13
000fe4 2fef      	MOV  R30,R31
000fe5 2ff6      	MOV  R31,R22
000fe6 2f67      	MOV  R22,R23
000fe7 5058      	SUBI R21,8
000fe8 cff9      	RJMP __CFD12
                 __CFD13:
000fe9 2355      	TST  R21
000fea f031      	BREQ __CFD15
                 __CFD14:
000feb 9576      	LSR  R23
000fec 9567      	ROR  R22
000fed 95f7      	ROR  R31
000fee 95e7      	ROR  R30
000fef 955a      	DEC  R21
000ff0 f7d1      	BRNE __CFD14
                 __CFD15:
000ff1 2000      	TST  R0
000ff2 f40a      	BRPL __CFD16
000ff3 df1e      	RCALL __ANEGD1
                 __CFD16:
000ff4 915f      	POP  R21
000ff5 9508      	RET
                 
                 __CDF1U:
000ff6 9468      	SET
000ff7 c001      	RJMP __CDF1U0
                 __CDF1:
000ff8 94e8      	CLT
                 __CDF1U0:
000ff9 9730      	SBIW R30,0
000ffa 4060      	SBCI R22,0
000ffb 4070      	SBCI R23,0
000ffc f0b1      	BREQ __CDF10
000ffd 2400      	CLR  R0
000ffe f026      	BRTS __CDF11
000fff 2377      	TST  R23
001000 f412      	BRPL __CDF11
001001 9400      	COM  R0
001002 df0f      	RCALL __ANEGD1
                 __CDF11:
001003 2e17      	MOV  R1,R23
001004 e17e      	LDI  R23,30
001005 2011      	TST  R1
                 __CDF12:
001006 f032      	BRMI __CDF13
001007 957a      	DEC  R23
001008 0fee      	LSL  R30
001009 1fff      	ROL  R31
00100a 1f66      	ROL  R22
00100b 1c11      	ROL  R1
00100c cff9      	RJMP __CDF12
                 __CDF13:
00100d 2fef      	MOV  R30,R31
00100e 2ff6      	MOV  R31,R22
00100f 2d61      	MOV  R22,R1
001010 935f      	PUSH R21
001011 df8a      	RCALL __REPACK
001012 915f      	POP  R21
                 __CDF10:
001013 9508      	RET
                 
                 __ZERORES:
001014 27ee      	CLR  R30
001015 27ff      	CLR  R31
001016 01bf      	MOVW R22,R30
001017 915f      	POP  R21
001018 9508      	RET
                 
                 __MINRES:
001019 efef      	SER  R30
00101a efff      	SER  R31
00101b e76f      	LDI  R22,0x7F
00101c ef7f      	SER  R23
00101d 915f      	POP  R21
00101e 9508      	RET
                 
                 __MAXRES:
00101f efef      	SER  R30
001020 efff      	SER  R31
001021 e76f      	LDI  R22,0x7F
001022 e77f      	LDI  R23,0x7F
001023 915f      	POP  R21
001024 9508      	RET
                 
                 __MULF12:
001025 935f      	PUSH R21
001026 df87      	RCALL __UNPACK
001027 3870      	CPI  R23,0x80
001028 f359      	BREQ __ZERORES
001029 3890      	CPI  R25,0x80
00102a f349      	BREQ __ZERORES
00102b 2401      	EOR  R0,R1
00102c 9408      	SEC
00102d 1f79      	ADC  R23,R25
00102e f423      	BRVC __MULF124
00102f f324      	BRLT __ZERORES
                 __MULF125:
001030 2000      	TST  R0
001031 f33a      	BRMI __MINRES
001032 cfec      	RJMP __MAXRES
                 __MULF124:
001033 920f      	PUSH R0
001034 931f      	PUSH R17
001035 932f      	PUSH R18
001036 933f      	PUSH R19
001037 934f      	PUSH R20
001038 2711      	CLR  R17
001039 2722      	CLR  R18
00103a 2799      	CLR  R25
00103b 9f68      	MUL  R22,R24
00103c 01a0      	MOVW R20,R0
00103d 9f8f      	MUL  R24,R31
00103e 2d30      	MOV  R19,R0
00103f 0d41      	ADD  R20,R1
001040 1f59      	ADC  R21,R25
001041 9f6b      	MUL  R22,R27
001042 0d30      	ADD  R19,R0
001043 1d41      	ADC  R20,R1
001044 1f59      	ADC  R21,R25
001045 9f8e      	MUL  R24,R30
001046 d027      	RCALL __MULF126
001047 9fbf      	MUL  R27,R31
001048 d025      	RCALL __MULF126
001049 9f6a      	MUL  R22,R26
00104a d023      	RCALL __MULF126
00104b 9fbe      	MUL  R27,R30
00104c d01d      	RCALL __MULF127
00104d 9faf      	MUL  R26,R31
00104e d01b      	RCALL __MULF127
00104f 9fae      	MUL  R26,R30
001050 0d11      	ADD  R17,R1
001051 1f29      	ADC  R18,R25
001052 1f39      	ADC  R19,R25
001053 1f49      	ADC  R20,R25
001054 1f59      	ADC  R21,R25
001055 2fe3      	MOV  R30,R19
001056 2ff4      	MOV  R31,R20
001057 2f65      	MOV  R22,R21
001058 2f52      	MOV  R21,R18
001059 914f      	POP  R20
00105a 913f      	POP  R19
00105b 912f      	POP  R18
00105c 911f      	POP  R17
00105d 900f      	POP  R0
00105e 2366      	TST  R22
00105f f02a      	BRMI __MULF122
001060 0f55      	LSL  R21
001061 1fee      	ROL  R30
001062 1fff      	ROL  R31
001063 1f66      	ROL  R22
001064 c002      	RJMP __MULF123
                 __MULF122:
001065 9573      	INC  R23
001066 f24b      	BRVS __MULF125
                 __MULF123:
001067 df2a      	RCALL __ROUND_REPACK
001068 915f      	POP  R21
001069 9508      	RET
                 
                 __MULF127:
00106a 0d10      	ADD  R17,R0
00106b 1d21      	ADC  R18,R1
00106c 1f39      	ADC  R19,R25
00106d c002      	RJMP __MULF128
                 __MULF126:
00106e 0d20      	ADD  R18,R0
00106f 1d31      	ADC  R19,R1
                 __MULF128:
001070 1f49      	ADC  R20,R25
001071 1f59      	ADC  R21,R25
001072 9508      	RET
                 
                 _delay_ms:
001073 9610      	adiw r26,0
001074 f039      	breq __delay_ms1
                 __delay_ms0:
001075 95a8      	wdr
                +
001076 ec8d     +LDI R24 , LOW ( 0xACD )
001077 e09a     +LDI R25 , HIGH ( 0xACD )
                +__DELAY_USW_LOOP :
001078 9701     +SBIW R24 , 1
001079 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xACD
00107a 9711      	sbiw r26,1
00107b f7c9      	brne __delay_ms0
                 __delay_ms1:
00107c 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  48 r1 :  18 r2 :   0 r3 :   0 r4 :   4 r5 :   2 r6 :   0 r7 :   0 
r8 :   9 r9 :   8 r10:   0 r11:   0 r12:  25 r13:   7 r14:   0 r15:   4 
r16:  43 r17:  38 r18:  38 r19:  17 r20:  23 r21:  66 r22:  46 r23:  37 
r24:  24 r25:  27 r26: 416 r27: 219 r28:  24 r29:   1 r30: 703 r31: 306 
x  :  32 y  : 381 z  :  16 
Registers used: 28 out of 35 (80.0%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  30 add   :  25 
adiw  :  43 and   :   2 andi  :  14 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :  46 
brge  :  15 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  17 
brlt  :   3 brmi  :   5 brne  :  92 brpl  :   6 brsh  :   5 brtc  :   3 
brts  :   2 brvc  :   1 brvs  :   2 bset  :   0 bst   :   1 call  : 527 
cbi   :  35 cbr   :   0 clc   :   0 clh   :   0 cli   :   3 cln   :   0 
clr   :  37 cls   :   0 clt   :   4 clv   :   0 clz   :   0 com   :   6 
cp    :  24 cpc   :  38 cpi   :  92 cpse  :   0 dec   :   6 des   :   0 
eor   :   4 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :  15 inc   :   2 jmp   :  44 ld    :  56 ldd   : 134 ldi   : 570 
lds   :  99 lpm   :  16 lsl   :  15 lsr   :   1 mov   :  44 movw  :  50 
mul   :  16 muls  :   0 mulsu :   0 neg   :   6 nop   :   0 or    :   2 
ori   :   9 out   :  71 pop   :  20 push  :  19 rcall : 120 ret   : 113 
reti  :   2 rjmp  : 213 rol   :  19 ror   :   7 sbc   :   5 sbci  :  10 
sbi   :  35 sbic  :   7 sbis  :   7 sbiw  :  52 sbr   :   1 sbrc  :   3 
sbrs  :  13 sec   :   1 seh   :   0 sei   :   1 sen   :   0 ser   :   8 
ses   :   0 set   :   4 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    : 182 std   :  44 sts   :  57 sub   :   5 subi  :  21 swap  :   2 
tst   :  13 wdr   :   2 
Instructions used: 78 out of 116 (67.2%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0020fa   7908    534   8442   32768  25.8%
[.dseg] 0x000060 0x0002c3      0     99     99    2048   4.8%
[.eseg] 0x000000 0x00002c      0     44     44    1024   4.3%

Assembly complete, 0 errors, 23 warnings
