
AVRASM ver. 2.1.30  D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm Mon Nov 20 12:47:43 2023

D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1083): warning: Register r4 already defined by the .DEF directive
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1084): warning: Register r5 already defined by the .DEF directive
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1085): warning: Register r6 already defined by the .DEF directive
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1086): warning: Register r7 already defined by the .DEF directive
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1087): warning: Register r8 already defined by the .DEF directive
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1088): warning: Register r9 already defined by the .DEF directive
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1089): warning: Register r10 already defined by the .DEF directive
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1090): warning: Register r11 already defined by the .DEF directive
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1091): warning: Register r12 already defined by the .DEF directive
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1092): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.40 Advanced
                 ;(C) Copyright 1998-2020 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Release
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 11,059200 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Mode 1
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _hitung=R4
                 	.DEF _hitung_msb=R5
                 	.DEF _mulai=R6
                 	.DEF _mulai_msb=R7
                 	.DEF _nadc7=R8
                 	.DEF _nadc7_msb=R9
                 	.DEF _nilai_warna=R10
                 	.DEF _nilai_warna_msb=R11
                 	.DEF _i=R12
                 	.DEF _i_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 012c 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 07d3 	JMP  _timer0_comp_isr
000016 940c 07a8 	JMP  _timer0_ovf_isr
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000033 0000      	.DW  0x0000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000034 0000
000035 0000      	.DB  0x0,0x0,0x0,0x0
000036 0000
000037 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 _0x6:
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1139): warning: .cseg .db misalignment - padding zero byte
000038 00aa      	.DB  0xAA
                 _0x7:
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1141): warning: .cseg .db misalignment - padding zero byte
000039 0001      	.DB  0x1
                 _0x8:
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1143): warning: .cseg .db misalignment - padding zero byte
00003a 000a      	.DB  0xA
                 _0x9:
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1145): warning: .cseg .db misalignment - padding zero byte
00003b 0064      	.DB  0x64
                 _0xA:
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1147): warning: .cseg .db misalignment - padding zero byte
00003c 00c8      	.DB  0xC8
                 _0xB:
00003d ff60      	.DB  0x60,0xFF
                 _0xC:
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1151): warning: .cseg .db misalignment - padding zero byte
00003e 00c8      	.DB  0xC8
                 _0xE0:
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1153): warning: .cseg .db misalignment - padding zero byte
00003f 00be      	.DB  0xBE
                 _0xE1:
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1155): warning: .cseg .db misalignment - padding zero byte
000040 0028      	.DB  0x28
                 _0xE2:
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1157): warning: .cseg .db misalignment - padding zero byte
000041 0087      	.DB  0x87
                 _0xE3:
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1159): warning: .cseg .db misalignment - padding zero byte
000042 00aa      	.DB  0xAA
                 _0xE4:
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1161): warning: .cseg .db misalignment - padding zero byte
000043 005a      	.DB  0x5A
                 _0x0:
000044 6425
000045 6425
000046 6425
000047 6425      	.DB  0x25,0x64,0x25,0x64,0x25,0x64,0x25,0x64
000048 6425
000049 6425
00004a 6425
00004b 4200      	.DB  0x25,0x64,0x25,0x64,0x25,0x64,0x0,0x42
00004c 6361
00004d 2061
00004e 694c
00004f 656e      	.DB  0x61,0x63,0x61,0x20,0x4C,0x69,0x6E,0x65
000050 7300
000051 6e65
000052 6f73
000053 3a72      	.DB  0x0,0x73,0x65,0x6E,0x73,0x6F,0x72,0x3A
000054 6425
000055 3d20
000056 2520
000057 2064      	.DB  0x25,0x64,0x20,0x3D,0x20,0x25,0x64,0x20
000058 0020
000059 6142
00005a 6163
00005b 4220      	.DB  0x20,0x0,0x42,0x61,0x63,0x61,0x20,0x42
00005c 6361
00005d 676b
00005e 6f72
00005f 6e75      	.DB  0x61,0x63,0x6B,0x67,0x72,0x6F,0x75,0x6E
000060 0064
000061 6543
000062 746e
000063 7265      	.DB  0x64,0x0,0x43,0x65,0x6E,0x74,0x65,0x72
000064 5020
000065 696f
000066 746e
000067 2020      	.DB  0x20,0x50,0x6F,0x69,0x6E,0x74,0x20,0x20
000068 2020
000069 7300
00006a 6e65
00006b 6f73      	.DB  0x20,0x20,0x0,0x73,0x65,0x6E,0x73,0x6F
00006c 3a72
00006d 6425
00006e 2d20
00006f 3e2d      	.DB  0x72,0x3A,0x25,0x64,0x20,0x2D,0x2D,0x3E
000070 2520
000071 2064
000072 0020
000073 6425      	.DB  0x20,0x25,0x64,0x20,0x20,0x0,0x25,0x64
000074 2020
000075 0020
000076 654d
000077 756e      	.DB  0x20,0x20,0x20,0x0,0x4D,0x65,0x6E,0x75
000078 5200
000079 6e75
00007a 4220
00007b 746f      	.DB  0x0,0x52,0x75,0x6E,0x20,0x42,0x6F,0x74
00007c 4300
00007d 6c61
00007e 6269
00007f 6172      	.DB  0x0,0x43,0x61,0x6C,0x69,0x62,0x72,0x61
000080 6974
000081 6e6f
000082 4d00
000083 7061      	.DB  0x74,0x69,0x6F,0x6E,0x0,0x4D,0x61,0x70
000084 4d00
000085 746f
000086 726f
000087 4200      	.DB  0x0,0x4D,0x6F,0x74,0x6F,0x72,0x0,0x42
000088 7475
000089 6f74
00008a 006e
00008b 6c43      	.DB  0x75,0x74,0x74,0x6F,0x6E,0x0,0x43,0x6C
00008c 6369
00008d 206b
00008e 2031
00008f 6f74      	.DB  0x69,0x63,0x6B,0x20,0x31,0x20,0x74,0x6F
000090 7320
000091 6174
000092 7472
000093 5200      	.DB  0x20,0x73,0x74,0x61,0x72,0x74,0x0,0x52
000094 6e75
000095 696e
000096 676e
000097 2e2e      	.DB  0x75,0x6E,0x6E,0x69,0x6E,0x67,0x2E,0x2E
000098 002e
000099 614d
00009a 2070
00009b 6942      	.DB  0x2E,0x0,0x4D,0x61,0x70,0x20,0x42,0x69
00009c 7572
00009d 4300
00009e 696c
00009f 6b63      	.DB  0x72,0x75,0x0,0x43,0x6C,0x69,0x63,0x6B
0000a0 3120
0000a1 7420
0000a2 206f
0000a3 6573      	.DB  0x20,0x31,0x20,0x74,0x6F,0x20,0x73,0x65
0000a4 656c
0000a5 7463
0000a6 4d00
0000a7 7061      	.DB  0x6C,0x65,0x63,0x74,0x0,0x4D,0x61,0x70
0000a8 4d20
0000a9 7265
0000aa 6861
0000ab 5400      	.DB  0x20,0x4D,0x65,0x72,0x61,0x68,0x0,0x54
0000ac 7365
0000ad 2074
0000ae 6f4d
0000af 6f74      	.DB  0x65,0x73,0x74,0x20,0x4D,0x6F,0x74,0x6F
0000b0 0072
0000b1 312b
0000b2 3030
0000b3 2b20      	.DB  0x72,0x0,0x2B,0x31,0x30,0x30,0x20,0x2B
0000b4 3031
0000b5 0030
0000b6 312d
0000b7 3030      	.DB  0x31,0x30,0x30,0x0,0x2D,0x31,0x30,0x30
0000b8 2d20
0000b9 3031
0000ba 0030
0000bb 312b      	.DB  0x20,0x2D,0x31,0x30,0x30,0x0,0x2B,0x31
0000bc 3030
0000bd 2d20
0000be 3031
0000bf 0030      	.DB  0x30,0x30,0x20,0x2D,0x31,0x30,0x30,0x0
0000c0 312d
0000c1 3030
0000c2 2b20
0000c3 3031      	.DB  0x2D,0x31,0x30,0x30,0x20,0x2B,0x31,0x30
0000c4 0030
0000c5 6c43
0000c6 6369
0000c7 206b      	.DB  0x30,0x0,0x43,0x6C,0x69,0x63,0x6B,0x20
0000c8 2031
0000c9 6f74
0000ca 6520
0000cb 6978      	.DB  0x31,0x20,0x74,0x6F,0x20,0x65,0x78,0x69
0000cc 0074
0000cd 6f74
0000ce 626d
0000cf 6c6f      	.DB  0x74,0x0,0x74,0x6F,0x6D,0x62,0x6F,0x6C
0000d0 3d20
0000d1 3120
0000d2 2020
0000d3 2020      	.DB  0x20,0x3D,0x20,0x31,0x20,0x20,0x20,0x20
0000d4 0020
0000d5 6f74
0000d6 626d
0000d7 6c6f      	.DB  0x20,0x0,0x74,0x6F,0x6D,0x62,0x6F,0x6C
0000d8 3d20
0000d9 3220
0000da 2020
0000db 2020      	.DB  0x20,0x3D,0x20,0x32,0x20,0x20,0x20,0x20
0000dc 0020
0000dd 6f74
0000de 626d
0000df 6c6f      	.DB  0x20,0x0,0x74,0x6F,0x6D,0x62,0x6F,0x6C
0000e0 3d20
0000e1 3320
0000e2 2020
0000e3 2020      	.DB  0x20,0x3D,0x20,0x33,0x20,0x20,0x20,0x20
0000e4 0020
0000e5 6f74
0000e6 626d
0000e7 6c6f      	.DB  0x20,0x0,0x74,0x6F,0x6D,0x62,0x6F,0x6C
0000e8 3d20
0000e9 3420
0000ea 2020
0000eb 2020      	.DB  0x20,0x3D,0x20,0x34,0x20,0x20,0x20,0x20
0000ec 0020
0000ed 454c
0000ee 4947
0000ef 4e4f      	.DB  0x20,0x0,0x4C,0x45,0x47,0x49,0x4F,0x4E
0000f0 4d00
0000f1 4e41
0000f2 3420
0000f3 4a20      	.DB  0x0,0x4D,0x41,0x4E,0x20,0x34,0x20,0x4A
0000f4 4d4f
0000f5 4142
0000f6 474e
0000f7 5400      	.DB  0x4F,0x4D,0x42,0x41,0x4E,0x47,0x0,0x54
0000f8 5345
0000f9 0054      	.DB  0x45,0x53,0x54,0x0
                 _0x2040060:
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1210): warning: .cseg .db misalignment - padding zero byte
0000fa 0001      	.DB  0x1
                 _0x2040000:
0000fb 4e2d
0000fc 4e41
0000fd 4900
0000fe 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1213): warning: .cseg .db misalignment - padding zero byte
0000ff 0000      	.DB  0x0
                 _0x2060003:
000100 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000101 0001      	.DW  0x01
000102 0002      	.DW  0x02
000103 0066      	.DW  __REG_BIT_VARS*2
                 
000104 0008      	.DW  0x08
000105 0004      	.DW  0x04
000106 0068      	.DW  __REG_VARS*2
                 
000107 0001      	.DW  0x01
000108 029a      	.DW  _kp
000109 0074      	.DW  _0x8*2
                 
00010a 0001      	.DW  0x01
00010b 029c      	.DW  _kd
00010c 0076      	.DW  _0x9*2
                 
00010d 0001      	.DW  0x01
00010e 029e      	.DW  _SPEED
00010f 0078      	.DW  _0xA*2
                 
000110 0002      	.DW  0x02
000111 02a0      	.DW  _MIN_SPEED
000112 007a      	.DW  _0xB*2
                 
000113 0001      	.DW  0x01
000114 02a2      	.DW  _MAX_SPEED
000115 007c      	.DW  _0xC*2
                 
000116 0001      	.DW  0x01
000117 02a8      	.DW  _maxHijau
000118 007e      	.DW  _0xE0*2
                 
000119 0001      	.DW  0x01
00011a 02aa      	.DW  _maxKuning
00011b 0080      	.DW  _0xE1*2
                 
00011c 0001      	.DW  0x01
00011d 02ac      	.DW  _maxMerah
00011e 0082      	.DW  _0xE2*2
                 
00011f 0001      	.DW  0x01
000120 02ae      	.DW  _minHijau
000121 0084      	.DW  _0xE3*2
                 
000122 0001      	.DW  0x01
000123 02b2      	.DW  _minMerah
000124 0086      	.DW  _0xE4*2
                 
000125 0001      	.DW  0x01
000126 02b6      	.DW  __seed_G102
000127 01f4      	.DW  _0x2040060*2
                 
000128 0002      	.DW  0x02
000129 02ba      	.DW  __base_y_G103
00012a 0200      	.DW  _0x2060003*2
                 
                 _0xFFFFFFFF:
00012b 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00012c 94f8      	CLI
00012d 27ee      	CLR  R30
00012e bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00012f e0f1      	LDI  R31,1
000130 bffb      	OUT  GICR,R31
000131 bfeb      	OUT  GICR,R30
000132 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000133 e1f8      	LDI  R31,0x18
000134 bdf1      	OUT  WDTCR,R31
000135 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000136 e08d      	LDI  R24,(14-2)+1
000137 e0a2      	LDI  R26,2
000138 27bb      	CLR  R27
                 __CLEAR_REG:
000139 93ed      	ST   X+,R30
00013a 958a      	DEC  R24
00013b f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00013c e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00013d e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00013e e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00013f 93ed      	ST   X+,R30
000140 9701      	SBIW R24,1
000141 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000142 e0e2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000143 e0f2      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000144 9185      	LPM  R24,Z+
000145 9195      	LPM  R25,Z+
000146 9700      	SBIW R24,0
000147 f061      	BREQ __GLOBAL_INI_END
000148 91a5      	LPM  R26,Z+
000149 91b5      	LPM  R27,Z+
00014a 9005      	LPM  R0,Z+
00014b 9015      	LPM  R1,Z+
00014c 01bf      	MOVW R22,R30
00014d 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00014e 9005      	LPM  R0,Z+
00014f 920d      	ST   X+,R0
000150 9701      	SBIW R24,1
000151 f7e1      	BRNE __GLOBAL_INI_LOOP
000152 01fb      	MOVW R30,R22
000153 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000154 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000155 bfed      	OUT  SPL,R30
000156 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000157 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000158 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000159 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00015a 940c 07d4 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                    .equ __lcd_port=0x18 ;PORTB
                 ; 0000 002F #endasm
                 ;unsigned char read_adc(unsigned char adc_input)
                 ; 0000 0036 {
                 
                 	.CSEG
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 0037 ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
00015c 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
00015d 81e8      	LD   R30,Y
00015e 66e0      	ORI  R30,LOW(0x60)
00015f b9e7      	OUT  0x7,R30
                 ; 0000 0038 // Start the AD conversion
                 ; 0000 0039 ADCSRA|=0x40;
000160 9a36      	SBI  0x6,6
                 ; 0000 003A // Wait for the AD conversion to complete
                 ; 0000 003B while ((ADCSRA & 0x10)==0);
                 _0x3:
000161 9b34      	SBIS 0x6,4
000162 cffe      	RJMP _0x3
                 ; 0000 003C ADCSRA|=0x10;
000163 9a34      	SBI  0x6,4
                 ; 0000 003D return ADCH;
000164 b1e5      	IN   R30,0x5
000165 9621      	ADIW R28,1
000166 9508      	RET
                 ; 0000 003E }
                 ; .FEND
                 ;int hitung = 0, mulai = 0;
                 ;unsigned int nadc7 = 0, nilai_warna = 0;
                 ;int buttonhold[4] = {0, 0, 0, 0};
                 ;char buff[33];
                 ;int i, j, k, rka = 0, rki = 0, k_mtr = 170;
                 
                 	.DSEG
                 ;bit x, kondisi;
                 ;unsigned char kecepatanki = 0, kecepatanka = 0;
                 ;unsigned char pos_servo1, pos_servo2, pos_gulung, a, pos_led1, pos_led2;
                 ;char simpan;
                 ;int capit = 0, angkat = 0, _maju = 0, _mundur = 0, mode_kec = 0;
                 ;char arr[16], irr[16];
                 ;int push = 1;
                 ;int count_btn = 0;
                 ;int count_child_btn = 0;
                 ;bool isChildSelect = false;
                 ;bool isTestTombol = false;
                 ;eeprom int garis[7], back[7], tengah[7], mapMirror[1], positionD;
                 ;char sen[7];
                 ;int sensor;
                 ;int error = 0;
                 ;int lastError = 0;
                 ;int kp = 10;
                 ;int kd = 100;
                 ;int SPEED = 200;
                 ;int MIN_SPEED = -160;
                 ;int MAX_SPEED = 200;
                 ;int count = 0;
                 ;int second = 0;
                 ;void delay(int ms)
                 ; 0000 0066 {
                 
                 	.CSEG
                 _delay:
                 ; .FSTART _delay
                 ;delay_ms(ms);
000167 93ba      	ST   -Y,R27
000168 93aa      	ST   -Y,R26
                 ;	ms -> Y+0
000169 81a8      	LD   R26,Y
00016a 81b9      	LDD  R27,Y+1
00016b 940e 0eac 	CALL _delay_ms
00016d c322      	RJMP _0x20C000D
                 ; .FEND
                 ;void lcd_kedip(int ulangi)
                 ;for(i = 0; i < ulangi; i++)
                 ;	ulangi -> Y+0
                 ;lampu=0;
                 ;delay_ms(100);
                 ;lampu=1;
                 ;delay_ms(100);
                 ;void konvert_logic()
                 ; 0000 0067 {
                 _konvert_logic:
                 ; .FSTART _konvert_logic
                 ;for(i = 0; i < 7; i++)
00016e 24cc      	CLR  R12
00016f 24dd      	CLR  R13
                 _0x15:
000170 940e 0b4f 	CALL SUBOPT_0x0
000172 f4d4      	BRGE _0x16
                 ;if(read_adc(i) > tengah[i]) {
000173 940e 0b54 	CALL SUBOPT_0x1
000175 17ea      	CP   R30,R26
000176 07fb      	CPC  R31,R27
000177 f434      	BRGE _0x17
                 ;sen[i]=1;
000178 e8ad      	LDI  R26,LOW(_sen)
000179 e0b2      	LDI  R27,HIGH(_sen)
00017a 0dac      	ADD  R26,R12
00017b 1dbd      	ADC  R27,R13
00017c e0e1      	LDI  R30,LOW(1)
00017d c00a      	RJMP _0x163
                 ;else if(read_adc(i) < tengah[i]) {
                 _0x17:
00017e 940e 0b54 	CALL SUBOPT_0x1
000180 17ae      	CP   R26,R30
000181 07bf      	CPC  R27,R31
000182 f434      	BRGE _0x19
                 ;sen[i]=0;
000183 e8ad      	LDI  R26,LOW(_sen)
000184 e0b2      	LDI  R27,HIGH(_sen)
000185 0dac      	ADD  R26,R12
000186 1dbd      	ADC  R27,R13
000187 e0e0      	LDI  R30,LOW(0)
                 _0x163:
000188 93ec      	ST   X,R30
                 _0x19:
000189 01f6      	MOVW R30,R12
00018a 9631      	ADIW R30,1
00018b 016f      	MOVW R12,R30
00018c cfe3      	RJMP _0x15
                 _0x16:
00018d 9508      	RET
                 ; .FEND
                 ;void logika()
                 _logika:
                 ; .FSTART _logika
                 ;sensor = (sen[6] * 64) + (sen[5] * 32) + (sen[4] * 16) + (sen[3] * 8) + (sen[2]  ...
                +
00018e 91a0 0293+LDS R26 , _sen + ( 6 )
                 	__GETB2MN _sen,6
000190 e4e0      	LDI  R30,LOW(64)
000191 9fea      	MUL  R30,R26
000192 01b0      	MOVW R22,R0
                +
000193 91a0 0292+LDS R26 , _sen + ( 5 )
                 	__GETB2MN _sen,5
000195 e2e0      	LDI  R30,LOW(32)
000196 940e 0b64 	CALL SUBOPT_0x2
                +
000198 91a0 0291+LDS R26 , _sen + ( 4 )
                 	__GETB2MN _sen,4
00019a e1e0      	LDI  R30,LOW(16)
00019b 940e 0b64 	CALL SUBOPT_0x2
                +
00019d 91a0 0290+LDS R26 , _sen + ( 3 )
                 	__GETB2MN _sen,3
00019f e0e8      	LDI  R30,LOW(8)
0001a0 940e 0b64 	CALL SUBOPT_0x2
                +
0001a2 91a0 028f+LDS R26 , _sen + ( 2 )
                 	__GETB2MN _sen,2
0001a4 e0e4      	LDI  R30,LOW(4)
0001a5 940e 0b64 	CALL SUBOPT_0x2
                +
0001a7 91a0 028e+LDS R26 , _sen + ( 1 )
                 	__GETB2MN _sen,1
0001a9 e0e2      	LDI  R30,LOW(2)
0001aa 940e 0b64 	CALL SUBOPT_0x2
0001ac 91a0 028d 	LDS  R26,_sen
0001ae e0e1      	LDI  R30,LOW(1)
0001af 9fea      	MUL  R30,R26
0001b0 01f0      	MOVW R30,R0
0001b1 0fe6      	ADD  R30,R22
0001b2 1ff7      	ADC  R31,R23
0001b3 93e0 0294 	STS  _sensor,R30
0001b5 93f0 0295 	STS  _sensor+1,R31
0001b7 9508      	RET
                 ; .FEND
                 ;void cek_sensor()
                 _cek_sensor:
                 ; .FSTART _cek_sensor
                 ;konvert_logic();
0001b8 dfb5      	RCALL _konvert_logic
                 ;logika();
0001b9 dfd4      	RCALL _logika
0001ba 9508      	RET
                 ; .FEND
                 ;void display_sensor()
                 _display_sensor:
                 ; .FSTART _display_sensor
                 ;konvert_logic();
0001bb dfb2      	RCALL _konvert_logic
                 ;lcd_gotoxy(9, 0);
0001bc e0e9      	LDI  R30,LOW(9)
0001bd 940e 0b69 	CALL SUBOPT_0x3
                 ;sprintf(buff, "%d%d%d%d%d%d%d", sen[0] , sen[1] , sen[2], sen[3], sen[4], sen[5] ...
0001bf 940e 0b6d 	CALL SUBOPT_0x4
                +
0001c1 e8e8     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0001c2 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0001c3 93fa      	ST   -Y,R31
0001c4 93ea      	ST   -Y,R30
0001c5 91e0 028d 	LDS  R30,_sen
0001c7 940e 0b72 	CALL SUBOPT_0x5
                +
0001c9 91e0 028e+LDS R30 , _sen + ( 1 )
                 	__GETB1MN _sen,1
0001cb 940e 0b72 	CALL SUBOPT_0x5
                +
0001cd 91e0 028f+LDS R30 , _sen + ( 2 )
                 	__GETB1MN _sen,2
0001cf 940e 0b72 	CALL SUBOPT_0x5
                +
0001d1 91e0 0290+LDS R30 , _sen + ( 3 )
                 	__GETB1MN _sen,3
0001d3 940e 0b72 	CALL SUBOPT_0x5
                +
0001d5 91e0 0291+LDS R30 , _sen + ( 4 )
                 	__GETB1MN _sen,4
0001d7 940e 0b72 	CALL SUBOPT_0x5
                +
0001d9 91e0 0292+LDS R30 , _sen + ( 5 )
                 	__GETB1MN _sen,5
0001db 940e 0b72 	CALL SUBOPT_0x5
                +
0001dd 91e0 0293+LDS R30 , _sen + ( 6 )
                 	__GETB1MN _sen,6
0001df 940e 0b72 	CALL SUBOPT_0x5
0001e1 e18c      	LDI  R24,28
0001e2 940e 09f9 	CALL _sprintf
0001e4 96a0      	ADIW R28,32
                 ;lcd_puts(buff);
0001e5 c2c9      	RJMP _0x20C000C
                 ; .FEND
                 ;void scan_garis()
                 _scan_garis:
                 ; .FSTART _scan_garis
                 ;for (i = 0; i < 7; i++)
0001e6 24cc      	CLR  R12
0001e7 24dd      	CLR  R13
                 _0x1B:
0001e8 940e 0b4f 	CALL SUBOPT_0x0
0001ea f4d4      	BRGE _0x1C
                 ;garis[i] = read_adc(i);
0001eb 940e 0b78 	CALL SUBOPT_0x6
0001ed 0fea      	ADD  R30,R26
0001ee 1ffb      	ADC  R31,R27
0001ef 93ff      	PUSH R31
0001f0 93ef      	PUSH R30
0001f1 2dac      	MOV  R26,R12
0001f2 df69      	RCALL _read_adc
0001f3 91af      	POP  R26
0001f4 91bf      	POP  R27
0001f5 940e 0b7e 	CALL SUBOPT_0x7
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Baca Line");
                +
0001f7 e9a7     +LDI R26 , LOW ( 2 * _0x0 + ( 15 ) )
0001f8 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 15 ) )
                 	__POINTW2FN _0x0,15
0001f9 940e 0b83 	CALL SUBOPT_0x8
                 ;lcd_gotoxy(0, 1);
                 ;sprintf(buff, "sensor:%d = %d  ", i, garis[i]);
0001fb 940e 0b8b 	CALL SUBOPT_0x9
0001fd 940e 0b78 	CALL SUBOPT_0x6
0001ff 940e 0b95 	CALL SUBOPT_0xA
                 ;lcd_puts(buff);
                 ;lampu = 0;
                 ;delay_ms(10);
                 ;lampu = 1;
000201 01f6      	MOVW R30,R12
000202 9631      	ADIW R30,1
000203 016f      	MOVW R12,R30
000204 cfe3      	RJMP _0x1B
                 _0x1C:
000205 9508      	RET
                 ; .FEND
                 ;void scan_back()
                 _scan_back:
                 ; .FSTART _scan_back
                 ;for (i = 0; i < 7; i++)
000206 24cc      	CLR  R12
000207 24dd      	CLR  R13
                 _0x22:
000208 940e 0b4f 	CALL SUBOPT_0x0
00020a f4d4      	BRGE _0x23
                 ;back[i] = read_adc(i);
00020b 940e 0bac 	CALL SUBOPT_0xB
00020d 0fea      	ADD  R30,R26
00020e 1ffb      	ADC  R31,R27
00020f 93ff      	PUSH R31
000210 93ef      	PUSH R30
000211 2dac      	MOV  R26,R12
000212 df49      	RCALL _read_adc
000213 91af      	POP  R26
000214 91bf      	POP  R27
000215 940e 0b7e 	CALL SUBOPT_0x7
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Baca Background");
                +
000217 eba2     +LDI R26 , LOW ( 2 * _0x0 + ( 42 ) )
000218 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 42 ) )
                 	__POINTW2FN _0x0,42
000219 940e 0b83 	CALL SUBOPT_0x8
                 ;lcd_gotoxy(0, 1);
                 ;sprintf(buff, "sensor:%d = %d  ", i, back[i]);
00021b 940e 0b8b 	CALL SUBOPT_0x9
00021d 940e 0bac 	CALL SUBOPT_0xB
00021f 940e 0b95 	CALL SUBOPT_0xA
                 ;lcd_puts(buff);
                 ;lampu = 0;
                 ;delay_ms(10);
                 ;lampu = 1;
000221 01f6      	MOVW R30,R12
000222 9631      	ADIW R30,1
000223 016f      	MOVW R12,R30
000224 cfe3      	RJMP _0x22
                 _0x23:
000225 9508      	RET
                 ; .FEND
                 ;void hit_tengah()
                 _hit_tengah:
                 ; .FSTART _hit_tengah
                 ;for (i = 0; i < 7; i++)
000226 24cc      	CLR  R12
000227 24dd      	CLR  R13
                 _0x29:
000228 940e 0b4f 	CALL SUBOPT_0x0
00022a f00c      	BRLT PC+2
00022b c044      	RJMP _0x2A
                 ;tengah[i] = (back[i] + garis[i]) / 2;
00022c 01f6      	MOVW R30,R12
00022d e1ac      	LDI  R26,LOW(_tengah)
00022e e0b0      	LDI  R27,HIGH(_tengah)
00022f 0fee      	LSL  R30
000230 1fff      	ROL  R31
000231 0fea      	ADD  R30,R26
000232 1ffb      	ADC  R31,R27
000233 01bf      	MOVW R22,R30
000234 940e 0bac 	CALL SUBOPT_0xB
000236 940e 0bb2 	CALL SUBOPT_0xC
000238 010f      	MOVW R0,R30
000239 940e 0b78 	CALL SUBOPT_0x6
00023b 940e 0bb2 	CALL SUBOPT_0xC
00023d 01d0      	MOVW R26,R0
00023e 0fae      	ADD  R26,R30
00023f 1fbf      	ADC  R27,R31
000240 e0e2      	LDI  R30,LOW(2)
000241 e0f0      	LDI  R31,HIGH(2)
000242 940e 0d78 	CALL __DIVW21
000244 01db      	MOVW R26,R22
000245 940e 0da8 	CALL __EEPROMWRW
                 ;lcd_gotoxy(0, 0);
000247 e0e0      	LDI  R30,LOW(0)
000248 940e 0b69 	CALL SUBOPT_0x3
                 ;lcd_putsf("Center Point    ");
                +
00024a eca2     +LDI R26 , LOW ( 2 * _0x0 + ( 58 ) )
00024b e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 58 ) )
                 	__POINTW2FN _0x0,58
00024c 940e 0b83 	CALL SUBOPT_0x8
                 ;lcd_gotoxy(0, 1);
                 ;sprintf(buff, "sensor:%d --> %d  ", i, tengah[i]);
                +
00024e ede3     +LDI R30 , LOW ( 2 * _0x0 + ( 75 ) )
00024f e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 75 ) )
                 	__POINTW1FN _0x0,75
000250 93fa      	ST   -Y,R31
000251 93ea      	ST   -Y,R30
000252 01f6      	MOVW R30,R12
000253 940e 0d53 	CALL __CWD1
000255 940e 0d93 	CALL __PUTPARD1
000257 01f6      	MOVW R30,R12
000258 e1ac      	LDI  R26,LOW(_tengah)
000259 e0b0      	LDI  R27,HIGH(_tengah)
00025a 0fee      	LSL  R30
00025b 1fff      	ROL  R31
00025c 940e 0bb2 	CALL SUBOPT_0xC
00025e 940e 0d53 	CALL __CWD1
000260 940e 0d93 	CALL __PUTPARD1
000262 e088      	LDI  R24,8
000263 940e 09f9 	CALL _sprintf
000265 962c      	ADIW R28,12
                 ;lcd_puts(buff);
000266 e6a0      	LDI  R26,LOW(_buff)
000267 e0b2      	LDI  R27,HIGH(_buff)
000268 940e 0ae8 	CALL _lcd_puts
                 ;lampu = 0;
00026a 98c3      	CBI  0x18,3
                 ;lampu = 1;
00026b 9ac3      	SBI  0x18,3
00026c 01f6      	MOVW R30,R12
00026d 9631      	ADIW R30,1
00026e 016f      	MOVW R12,R30
00026f cfb8      	RJMP _0x29
                 _0x2A:
000270 9508      	RET
                 ; .FEND
                 ;void cekdatasensor()
                 ;for (i = 0; i < 7; i++)
                 ;lcd_gotoxy(0, 0);
                 ;sprintf(buff, " %d  ", garis[i]);
                 ;lcd_puts(buff);
                 ;lcd_gotoxy(10, 0);
                 ;sprintf(buff, " %d  ", back[i]);
                 ;lcd_puts(buff);
                 ;lcd_gotoxy(0, 1);
                 ;sprintf(buff, " %d  ", tengah[i]);
                 ;lcd_puts(buff);
                 ;lcd_gotoxy(10, 1);
                 ;sprintf(buff, " %d  ", read_adc(i));
                 ;lcd_puts(buff);
                 ;delay_ms(200);
                 ;void maju(unsigned char ki, unsigned char ka)
                 ; 0000 0068 {
                 _maju:
                 ; .FSTART _maju
                 ;pwmka = ka;
000271 940e 0bb7 	CALL SUBOPT_0xD
                 ;	ki -> Y+1
                 ;	ka -> Y+0
                 ;pwmki = ki;
                 ;PORTD.2 = 1;
000273 9a92      	SBI  0x12,2
                 ;PORTD.3 = 0;
000274 9893      	CBI  0x12,3
                 ;PORTD.6 = 0;
000275 9896      	CBI  0x12,6
                 ;PORTD.7 = 1;
000276 9a97      	SBI  0x12,7
000277 c218      	RJMP _0x20C000D
                 ; .FEND
                 ;void mundur(unsigned char ki, unsigned char ka)
                 _mundur:
                 ; .FSTART _mundur
                 ;pwmka = ka;
000278 940e 0bb7 	CALL SUBOPT_0xD
                 ;	ki -> Y+1
                 ;	ka -> Y+0
                 ;pwmki = ki;
                 ;PORTD.2 = 0;
00027a 9892      	CBI  0x12,2
                 ;PORTD.3 = 1;
00027b 9a93      	SBI  0x12,3
                 ;PORTD.6 = 1;
00027c 9a96      	SBI  0x12,6
                 ;PORTD.7 = 0;
00027d 9897      	CBI  0x12,7
00027e c211      	RJMP _0x20C000D
                 ; .FEND
                 ;void kanan(unsigned char ki, unsigned char ka)
                 _kanan:
                 ; .FSTART _kanan
                 ;pwmka = ka;
00027f 940e 0bb7 	CALL SUBOPT_0xD
                 ;	ki -> Y+1
                 ;	ka -> Y+0
                 ;pwmki = ki;
                 ;PORTD.2 = 0;
000281 9892      	CBI  0x12,2
                 ;PORTD.3 = 1;
000282 9a93      	SBI  0x12,3
                 ;PORTD.6 = 0;
000283 9896      	CBI  0x12,6
                 ;PORTD.7 = 1;
000284 9a97      	SBI  0x12,7
000285 c20a      	RJMP _0x20C000D
                 ; .FEND
                 ;void kiri(unsigned char ki, unsigned char ka)
                 _kiri:
                 ; .FSTART _kiri
                 ;pwmka = ka;
000286 940e 0bb7 	CALL SUBOPT_0xD
                 ;	ki -> Y+1
                 ;	ka -> Y+0
                 ;pwmki = ki;
                 ;PORTD.2 = 1;
000288 9a92      	SBI  0x12,2
                 ;PORTD.3 = 0;
000289 9893      	CBI  0x12,3
                 ;PORTD.6 = 1;
00028a 9a96      	SBI  0x12,6
                 ;PORTD.7 = 0;
00028b 9897      	CBI  0x12,7
00028c c203      	RJMP _0x20C000D
                 ; .FEND
                 ;void setMotor(int ki, int ka)
                 _setMotor:
                 ; .FSTART _setMotor
                 ;if (ki > 0)
00028d 93ba      	ST   -Y,R27
00028e 93aa      	ST   -Y,R26
                 ;	ki -> Y+2
                 ;	ka -> Y+0
00028f 81aa      	LDD  R26,Y+2
000290 81bb      	LDD  R27,Y+2+1
000291 940e 0dc1 	CALL __CPW02
000293 f41c      	BRGE _0x52
                 ;PORTD.2 = 1;
000294 9a92      	SBI  0x12,2
                 ;PORTD.3 = 0;
000295 9893      	CBI  0x12,3
                 ;else
000296 c008      	RJMP _0x57
                 _0x52:
                 ;PORTD.2 = 0;
000297 9892      	CBI  0x12,2
                 ;PORTD.3 = 1;
000298 9a93      	SBI  0x12,3
                 ;ki = abs(ki);
000299 81aa      	LDD  R26,Y+2
00029a 81bb      	LDD  R27,Y+2+1
00029b 940e 0a4e 	CALL _abs
00029d 83ea      	STD  Y+2,R30
00029e 83fb      	STD  Y+2+1,R31
                 _0x57:
                 ;pwmki = ki;
00029f 81ea      	LDD  R30,Y+2
0002a0 81fb      	LDD  R31,Y+2+1
0002a1 bdfb      	OUT  0x2A+1,R31
0002a2 bdea      	OUT  0x2A,R30
                 ;if (ka > 0)
0002a3 940e 0bc1 	CALL SUBOPT_0xE
0002a5 f41c      	BRGE _0x5C
                 ;PORTD.7 = 1;
0002a6 9a97      	SBI  0x12,7
                 ;PORTD.6 = 0;
0002a7 9896      	CBI  0x12,6
                 ;else
0002a8 c008      	RJMP _0x61
                 _0x5C:
                 ;PORTD.7 = 0;
0002a9 9897      	CBI  0x12,7
                 ;PORTD.6 = 1;
0002aa 9a96      	SBI  0x12,6
                 ;ka = abs(ka);
0002ab 81a8      	LD   R26,Y
0002ac 81b9      	LDD  R27,Y+1
0002ad 940e 0a4e 	CALL _abs
0002af 83e8      	ST   Y,R30
0002b0 83f9      	STD  Y+1,R31
                 _0x61:
                 ;pwmka = ka;
0002b1 81e8      	LD   R30,Y
0002b2 81f9      	LDD  R31,Y+1
0002b3 bdf9      	OUT  0x28+1,R31
0002b4 bde8      	OUT  0x28,R30
0002b5 c1bc      	RJMP _0x20C000E
                 ; .FEND
                 ;void rem(int nilai_rem)
                 _rem:
                 ; .FSTART _rem
                 ;PORTD .4 = 1;
0002b6 93ba      	ST   -Y,R27
0002b7 93aa      	ST   -Y,R26
                 ;	nilai_rem -> Y+0
0002b8 9a94      	SBI  0x12,4
                 ;PORTD .5 = 1;
0002b9 9a95      	SBI  0x12,5
                 ;PORTD .2 = 0;
0002ba 9892      	CBI  0x12,2
                 ;PORTD .3 = 0;
0002bb 9893      	CBI  0x12,3
                 ;PORTD .6 = 0;
0002bc 9896      	CBI  0x12,6
                 ;PORTD .7 = 0;
0002bd 9897      	CBI  0x12,7
                 ;delay_ms(nilai_rem);
0002be 81a8      	LD   R26,Y
0002bf 81b9      	LDD  R27,Y+1
0002c0 940e 0eac 	CALL _delay_ms
0002c2 c1cd      	RJMP _0x20C000D
                 ; .FEND
                 ;void maju_delay(int kec, int lama)
                 _maju_delay:
                 ; .FSTART _maju_delay
                 ;maju(kec, kec);
0002c3 93ba      	ST   -Y,R27
0002c4 93aa      	ST   -Y,R26
                 ;	kec -> Y+2
                 ;	lama -> Y+0
0002c5 81ea      	LDD  R30,Y+2
0002c6 93ea      	ST   -Y,R30
0002c7 81ab      	LDD  R26,Y+3
0002c8 dfa8      	RCALL _maju
                 ;delay(lama);
0002c9 940e 0bc6 	CALL SUBOPT_0xF
0002cb c1a6      	RJMP _0x20C000E
                 ; .FEND
                 ;void pilihSpeed(int kec)
                 _pilihSpeed:
                 ; .FSTART _pilihSpeed
                 ;kp = kec * 0.15;
0002cc 93ba      	ST   -Y,R27
0002cd 93aa      	ST   -Y,R26
                 ;	kec -> Y+0
0002ce 940e 0bca 	CALL SUBOPT_0x10
                +
0002d0 e9aa     +LDI R26 , LOW ( 0x3E19999A )
0002d1 e9b9     +LDI R27 , HIGH ( 0x3E19999A )
0002d2 e189     +LDI R24 , BYTE3 ( 0x3E19999A )
0002d3 e39e     +LDI R25 , BYTE4 ( 0x3E19999A )
                 	__GETD2N 0x3E19999A
0002d4 940e 0e5e 	CALL __MULF12
0002d6 e9aa      	LDI  R26,LOW(_kp)
0002d7 e0b2      	LDI  R27,HIGH(_kp)
0002d8 940e 0bd1 	CALL SUBOPT_0x11
                 ;kd = kec * 0.6;
0002da 940e 0bca 	CALL SUBOPT_0x10
                +
0002dc e9aa     +LDI R26 , LOW ( 0x3F19999A )
0002dd e9b9     +LDI R27 , HIGH ( 0x3F19999A )
0002de e189     +LDI R24 , BYTE3 ( 0x3F19999A )
0002df e39f     +LDI R25 , BYTE4 ( 0x3F19999A )
                 	__GETD2N 0x3F19999A
0002e0 940e 0e5e 	CALL __MULF12
0002e2 e9ac      	LDI  R26,LOW(_kd)
0002e3 e0b2      	LDI  R27,HIGH(_kd)
0002e4 940e 0bd1 	CALL SUBOPT_0x11
                 ;SPEED = kec;
0002e6 81e8      	LD   R30,Y
0002e7 81f9      	LDD  R31,Y+1
0002e8 93e0 029e 	STS  _SPEED,R30
0002ea 93f0 029f 	STS  _SPEED+1,R31
                 ;MIN_SPEED = -(kec * 0.75);
0002ec 940e 0bca 	CALL SUBOPT_0x10
                +
0002ee e0a0     +LDI R26 , LOW ( 0x3F400000 )
0002ef e0b0     +LDI R27 , HIGH ( 0x3F400000 )
0002f0 e480     +LDI R24 , BYTE3 ( 0x3F400000 )
0002f1 e39f     +LDI R25 , BYTE4 ( 0x3F400000 )
                 	__GETD2N 0x3F400000
0002f2 940e 0e5e 	CALL __MULF12
0002f4 940e 0dc5 	CALL __ANEGF1
0002f6 eaa0      	LDI  R26,LOW(_MIN_SPEED)
0002f7 e0b2      	LDI  R27,HIGH(_MIN_SPEED)
0002f8 940e 0bd1 	CALL SUBOPT_0x11
                 ;MAX_SPEED = kec;
0002fa 81e8      	LD   R30,Y
0002fb 81f9      	LDD  R31,Y+1
0002fc 93e0 02a2 	STS  _MAX_SPEED,R30
0002fe 93f0 02a3 	STS  _MAX_SPEED+1,R31
000300 c18f      	RJMP _0x20C000D
                 ; .FEND
                 ;void maju_cari_garis()
                 ;maju(180, 182);
                 ;cek_sensor(); // 0b01000000)!=0b00000000)
                 ;while ((sensor & 0b00000001) != 0b00000000)
                 ;cek_sensor();
                 ;rem(100);
                 ;void parkir()
                 ;lampu = 0;
                 ;while (1)
                 ;rem(100);
                 ;void scan(int kec)
                 _scan:
                 ; .FSTART _scan
                 ;int rateError;
                 ;int moveVal, moveLeft, moveRight;
                 ;pilihSpeed(kec);
000301 93ba      	ST   -Y,R27
000302 93aa      	ST   -Y,R26
000303 9722      	SBIW R28,2
000304 940e 0d35 	CALL __SAVELOCR6
                 ;	kec -> Y+8
                 ;	rateError -> R16,R17
                 ;	moveVal -> R18,R19
                 ;	moveLeft -> R20,R21
                 ;	moveRight -> Y+6
000306 85a8      	LDD  R26,Y+8
000307 85b9      	LDD  R27,Y+8+1
000308 dfc3      	RCALL _pilihSpeed
                 ;sensor = sensor & 0b01111111;
000309 940e 0bd6 	CALL SUBOPT_0x12
00030b 77ef      	ANDI R30,LOW(0x7F)
00030c 70f0      	ANDI R31,HIGH(0x7F)
00030d 93e0 0294 	STS  _sensor,R30
00030f 93f0 0295 	STS  _sensor+1,R31
                 ;switch (sensor) //  1=kiri 8=kanan
000311 940e 0bd6 	CALL SUBOPT_0x12
                 ;{               //  7......1
                 ;case 0b00000001:
000313 30e1      	CPI  R30,LOW(0x1)
000314 e0a0      	LDI  R26,HIGH(0x1)
000315 07fa      	CPC  R31,R26
000316 f419      	BRNE _0x7D
                 ;error = -6;
000317 efea      	LDI  R30,LOW(65530)
000318 efff      	LDI  R31,HIGH(65530)
000319 c056      	RJMP _0x164
                 ;break; // DOMINAN KANAN
                 ;case 0b00000011:
                 _0x7D:
00031a 30e3      	CPI  R30,LOW(0x3)
00031b e0a0      	LDI  R26,HIGH(0x3)
00031c 07fa      	CPC  R31,R26
00031d f419      	BRNE _0x7E
                 ;error = -5;
00031e efeb      	LDI  R30,LOW(65531)
00031f efff      	LDI  R31,HIGH(65531)
000320 c04f      	RJMP _0x164
                 ;break;
                 ;case 0b00000010:
                 _0x7E:
000321 30e2      	CPI  R30,LOW(0x2)
000322 e0a0      	LDI  R26,HIGH(0x2)
000323 07fa      	CPC  R31,R26
000324 f419      	BRNE _0x7F
                 ;error = -4;
000325 efec      	LDI  R30,LOW(65532)
000326 efff      	LDI  R31,HIGH(65532)
000327 c048      	RJMP _0x164
                 ;break;
                 ;case 0b00000110:
                 _0x7F:
000328 30e6      	CPI  R30,LOW(0x6)
000329 e0a0      	LDI  R26,HIGH(0x6)
00032a 07fa      	CPC  R31,R26
00032b f419      	BRNE _0x80
                 ;error = -3;
00032c efed      	LDI  R30,LOW(65533)
00032d efff      	LDI  R31,HIGH(65533)
00032e c041      	RJMP _0x164
                 ;break;
                 ;case 0b00000100:
                 _0x80:
00032f 30e4      	CPI  R30,LOW(0x4)
000330 e0a0      	LDI  R26,HIGH(0x4)
000331 07fa      	CPC  R31,R26
000332 f419      	BRNE _0x81
                 ;error = -2;
000333 efee      	LDI  R30,LOW(65534)
000334 efff      	LDI  R31,HIGH(65534)
000335 c03a      	RJMP _0x164
                 ;break;
                 ;case 0b00001100:
                 _0x81:
000336 30ec      	CPI  R30,LOW(0xC)
000337 e0a0      	LDI  R26,HIGH(0xC)
000338 07fa      	CPC  R31,R26
000339 f419      	BRNE _0x82
                 ;error = -1;
00033a efef      	LDI  R30,LOW(65535)
00033b efff      	LDI  R31,HIGH(65535)
00033c c033      	RJMP _0x164
                 ;break;
                 ;case 0b00001000:
                 _0x82:
00033d 30e8      	CPI  R30,LOW(0x8)
00033e e0a0      	LDI  R26,HIGH(0x8)
00033f 07fa      	CPC  R31,R26
000340 f431      	BRNE _0x83
                 ;error = 0;
000341 e0e0      	LDI  R30,LOW(0)
000342 93e0 0296 	STS  _error,R30
000344 93e0 0297 	STS  _error+1,R30
                 ;break;
000346 c02d      	RJMP _0x7C
                 ;case 0b00011000:
                 _0x83:
000347 31e8      	CPI  R30,LOW(0x18)
000348 e0a0      	LDI  R26,HIGH(0x18)
000349 07fa      	CPC  R31,R26
00034a f419      	BRNE _0x84
                 ;error = 1;
00034b e0e1      	LDI  R30,LOW(1)
00034c e0f0      	LDI  R31,HIGH(1)
00034d c022      	RJMP _0x164
                 ;break;
                 ;case 0b00010000:
                 _0x84:
00034e 31e0      	CPI  R30,LOW(0x10)
00034f e0a0      	LDI  R26,HIGH(0x10)
000350 07fa      	CPC  R31,R26
000351 f419      	BRNE _0x85
                 ;error = 2;
000352 e0e2      	LDI  R30,LOW(2)
000353 e0f0      	LDI  R31,HIGH(2)
000354 c01b      	RJMP _0x164
                 ;break;
                 ;case 0b00110000:
                 _0x85:
000355 33e0      	CPI  R30,LOW(0x30)
000356 e0a0      	LDI  R26,HIGH(0x30)
000357 07fa      	CPC  R31,R26
000358 f419      	BRNE _0x86
                 ;error = 3;
000359 e0e3      	LDI  R30,LOW(3)
00035a e0f0      	LDI  R31,HIGH(3)
00035b c014      	RJMP _0x164
                 ;break;
                 ;case 0b00100000:
                 _0x86:
00035c 32e0      	CPI  R30,LOW(0x20)
00035d e0a0      	LDI  R26,HIGH(0x20)
00035e 07fa      	CPC  R31,R26
00035f f419      	BRNE _0x87
                 ;error = 4;
000360 e0e4      	LDI  R30,LOW(4)
000361 e0f0      	LDI  R31,HIGH(4)
000362 c00d      	RJMP _0x164
                 ;break;
                 ;case 0b01100000:
                 _0x87:
000363 36e0      	CPI  R30,LOW(0x60)
000364 e0a0      	LDI  R26,HIGH(0x60)
000365 07fa      	CPC  R31,R26
000366 f419      	BRNE _0x88
                 ;error = 5;
000367 e0e5      	LDI  R30,LOW(5)
000368 e0f0      	LDI  R31,HIGH(5)
000369 c006      	RJMP _0x164
                 ;break;
                 ;case 0b01000000:
                 _0x88:
00036a 34e0      	CPI  R30,LOW(0x40)
00036b e0a0      	LDI  R26,HIGH(0x40)
00036c 07fa      	CPC  R31,R26
00036d f431      	BRNE _0x7C
                 ;error = 6;
00036e e0e6      	LDI  R30,LOW(6)
00036f e0f0      	LDI  R31,HIGH(6)
                 _0x164:
000370 93e0 0296 	STS  _error,R30
000372 93f0 0297 	STS  _error+1,R31
                 ;break; // DOMINAN KIRI
                 _0x7C:
                 ;rateError = error - lastError;
000374 91a0 0298 	LDS  R26,_lastError
000376 91b0 0299 	LDS  R27,_lastError+1
000378 91e0 0296 	LDS  R30,_error
00037a 91f0 0297 	LDS  R31,_error+1
00037c 1bea      	SUB  R30,R26
00037d 0bfb      	SBC  R31,R27
00037e 018f      	MOVW R16,R30
                 ;lastError = error;
00037f 91e0 0296 	LDS  R30,_error
000381 91f0 0297 	LDS  R31,_error+1
000383 93e0 0298 	STS  _lastError,R30
000385 93f0 0299 	STS  _lastError+1,R31
                 ;moveVal = (int)(error * kp) + (rateError * kd);
000387 91e0 029a 	LDS  R30,_kp
000389 91f0 029b 	LDS  R31,_kp+1
00038b 91a0 0296 	LDS  R26,_error
00038d 91b0 0297 	LDS  R27,_error+1
00038f 940e 0d60 	CALL __MULW12
000391 01bf      	MOVW R22,R30
000392 91e0 029c 	LDS  R30,_kd
000394 91f0 029d 	LDS  R31,_kd+1
000396 01d8      	MOVW R26,R16
000397 940e 0d60 	CALL __MULW12
000399 0fe6      	ADD  R30,R22
00039a 1ff7      	ADC  R31,R23
00039b 019f      	MOVW R18,R30
                 ;moveLeft = SPEED + moveVal;
00039c 91a0 029e 	LDS  R26,_SPEED
00039e 91b0 029f 	LDS  R27,_SPEED+1
0003a0 0fea      	ADD  R30,R26
0003a1 1ffb      	ADC  R31,R27
0003a2 01af      	MOVW R20,R30
                 ;moveRight = SPEED - moveVal;
0003a3 91e0 029e 	LDS  R30,_SPEED
0003a5 91f0 029f 	LDS  R31,_SPEED+1
0003a7 1be2      	SUB  R30,R18
0003a8 0bf3      	SBC  R31,R19
0003a9 83ee      	STD  Y+6,R30
0003aa 83ff      	STD  Y+6+1,R31
                 ;if (moveLeft > MAX_SPEED)
0003ab 940e 0bdb 	CALL SUBOPT_0x13
0003ad 17e4      	CP   R30,R20
0003ae 07f5      	CPC  R31,R21
0003af f424      	BRGE _0x8A
                 ;moveLeft = MAX_SPEED;
                +
0003b0 9140 02a2+LDS R20 , 0 + ( _MAX_SPEED )
0003b2 9150 02a3+LDS R21 , 0 + ( _MAX_SPEED ) + 1
                 	__GETWRMN 20,21,0,_MAX_SPEED
                 ;if (moveLeft < MIN_SPEED)
                 _0x8A:
0003b4 940e 0be0 	CALL SUBOPT_0x14
0003b6 174e      	CP   R20,R30
0003b7 075f      	CPC  R21,R31
0003b8 f424      	BRGE _0x8B
                 ;moveLeft = MIN_SPEED;
                +
0003b9 9140 02a0+LDS R20 , 0 + ( _MIN_SPEED )
0003bb 9150 02a1+LDS R21 , 0 + ( _MIN_SPEED ) + 1
                 	__GETWRMN 20,21,0,_MIN_SPEED
                 ;if (moveRight > MAX_SPEED)
                 _0x8B:
0003bd 940e 0bdb 	CALL SUBOPT_0x13
0003bf 81ae      	LDD  R26,Y+6
0003c0 81bf      	LDD  R27,Y+6+1
0003c1 17ea      	CP   R30,R26
0003c2 07fb      	CPC  R31,R27
0003c3 f424      	BRGE _0x8C
                 ;moveRight = MAX_SPEED;
0003c4 940e 0bdb 	CALL SUBOPT_0x13
0003c6 83ee      	STD  Y+6,R30
0003c7 83ff      	STD  Y+6+1,R31
                 ;if (moveRight < MIN_SPEED)
                 _0x8C:
0003c8 940e 0be0 	CALL SUBOPT_0x14
0003ca 81ae      	LDD  R26,Y+6
0003cb 81bf      	LDD  R27,Y+6+1
0003cc 17ae      	CP   R26,R30
0003cd 07bf      	CPC  R27,R31
0003ce f424      	BRGE _0x8D
                 ;moveRight = MIN_SPEED;
0003cf 940e 0be0 	CALL SUBOPT_0x14
0003d1 83ee      	STD  Y+6,R30
0003d2 83ff      	STD  Y+6+1,R31
                 ;setMotor(moveLeft, moveRight);
                 _0x8D:
0003d3 935a      	ST   -Y,R21
0003d4 934a      	ST   -Y,R20
0003d5 85a8      	LDD  R26,Y+8
0003d6 85b9      	LDD  R27,Y+8+1
0003d7 deb5      	RCALL _setMotor
0003d8 940e 0d3c 	CALL __LOADLOCR6
0003da 962a      	ADIW R28,10
0003db 9508      	RET
                 ; .FEND
                 ;void scanX(int brpkali, int kec)
                 _scanX:
                 ; .FSTART _scanX
                 ;while (hitung < brpkali)
0003dc 93ba      	ST   -Y,R27
0003dd 93aa      	ST   -Y,R26
                 ;	brpkali -> Y+2
                 ;	kec -> Y+0
                 _0x8E:
0003de 81ea      	LDD  R30,Y+2
0003df 81fb      	LDD  R31,Y+2+1
0003e0 164e      	CP   R4,R30
0003e1 065f      	CPC  R5,R31
0003e2 f4d4      	BRGE _0x90
                 ;while ((sensor & 0b00011100) != 0b00011100)
                 _0x91:
0003e3 940e 0be5 	CALL SUBOPT_0x15
0003e5 f029      	BREQ _0x93
                 ;cek_sensor();
0003e6 ddd1      	RCALL _cek_sensor
                 ;scan(kec);
0003e7 81a8      	LD   R26,Y
0003e8 81b9      	LDD  R27,Y+1
0003e9 df17      	RCALL _scan
0003ea cff8      	RJMP _0x91
                 _0x93:
                 ;while ((sensor & 0b00011100) == 0b00011100)
                 _0x94:
0003eb 940e 0be5 	CALL SUBOPT_0x15
0003ed f471      	BRNE _0x96
                 ;cek_sensor();
0003ee ddc9      	RCALL _cek_sensor
                 ;lampu = 0;
0003ef 98c3      	CBI  0x18,3
                 ;scan(kec);
0003f0 81a8      	LD   R26,Y
0003f1 81b9      	LDD  R27,Y+1
0003f2 df0e      	RCALL _scan
                 ;if ((sensor & 0b00011100) != 0b00011100)
0003f3 940e 0be5 	CALL SUBOPT_0x15
0003f5 f029      	BREQ _0x99
                 ;hitung++;
0003f6 01f2      	MOVW R30,R4
0003f7 9631      	ADIW R30,1
0003f8 012f      	MOVW R4,R30
0003f9 9731      	SBIW R30,1
                 ;lampu = 1;
0003fa 9ac3      	SBI  0x18,3
                 ;};
                 _0x99:
0003fb cfef      	RJMP _0x94
                 _0x96:
                 ;};
0003fc cfe1      	RJMP _0x8E
                 _0x90:
                 ;hitung = 0;
0003fd 2444      	CLR  R4
0003fe 2455      	CLR  R5
0003ff c072      	RJMP _0x20C000E
                 ; .FEND
                 ;void scanTimer(int countGoal, int kec, int lama)
                 _scanTimer:
                 ; .FSTART _scanTimer
                 ;count = 0;
000400 93ba      	ST   -Y,R27
000401 93aa      	ST   -Y,R26
                 ;	countGoal -> Y+4
                 ;	kec -> Y+2
                 ;	lama -> Y+0
000402 e0e0      	LDI  R30,LOW(0)
000403 93e0 02a4 	STS  _count,R30
000405 93e0 02a5 	STS  _count+1,R30
                 ;while (count < countGoal)
                 _0x9C:
000407 81ec      	LDD  R30,Y+4
000408 81fd      	LDD  R31,Y+4+1
000409 91a0 02a4 	LDS  R26,_count
00040b 91b0 02a5 	LDS  R27,_count+1
00040d 17ae      	CP   R26,R30
00040e 07bf      	CPC  R27,R31
00040f f44c      	BRGE _0x9E
                 ;cek_sensor();
000410 dda7      	RCALL _cek_sensor
                 ;scan(kec);
000411 81aa      	LDD  R26,Y+2
000412 81bb      	LDD  R27,Y+2+1
000413 deed      	RCALL _scan
                 ;count++;
000414 eaa4      	LDI  R26,LOW(_count)
000415 e0b2      	LDI  R27,HIGH(_count)
000416 940e 0be9 	CALL SUBOPT_0x16
000418 cfee      	RJMP _0x9C
                 _0x9E:
                 ;rem(lama);
000419 940e 0bef 	CALL SUBOPT_0x17
00041b 9626      	ADIW R28,6
00041c 9508      	RET
                 ; .FEND
                 ;void scanTka(int brpkali)
                 ;while (hitung < brpkali)
                 ;	brpkali -> Y+0
                 ;cek_sensor();
                 ;while ((sensor & 0b01110000) != 0b01110000) // kanan
                 ;cek_sensor();
                 ;scan(170);
                 ;while ((sensor & 0b01110000) == 0b01110000)
                 ;cek_sensor();
                 ;scan(170);
                 ;if ((sensor & 0b01110000) != 0b01110000)
                 ;hitung++;
                 ;lcd_kedip(1);
                 ;};
                 ;};
                 ;hitung = 0;
                 ;void scanTki(int brpkali)
                 ;while (hitung < brpkali)
                 ;	brpkali -> Y+0
                 ;cek_sensor();
                 ;while ((sensor & 0b00000111) != 0b00000111) // kanan
                 ;cek_sensor();
                 ;scan(170);
                 ;while ((sensor & 0b00000111) == 0b00000111)
                 ;cek_sensor();
                 ;scan(170);
                 ;if ((sensor & 0b00000111) != 0b00000111)
                 ;hitung++;
                 ;lcd_kedip(1);
                 ;};
                 ;};
                 ;hitung = 0;
                 ;void scan7ki()
                 ;cek_sensor();
                 ;while ((sensor & 0b01000000) != 0b01000000)
                 ;cek_sensor();
                 ;scan(170);
                 ;void scan7ka()
                 ;cek_sensor();
                 ;while ((sensor & 0b01000000) != 0b00000000)
                 ;cek_sensor();
                 ;scan(170);
                 ;void scan7ki2()
                 ;cek_sensor();
                 ;while (sensor == 0b00000000) // sensor !=0b00111111||0b00000011|| 0b00000001
                 ;cek_sensor();
                 ;scan(170);
                 ;void belki(int kec, int lama)
                 _belki:
                 ; .FSTART _belki
                 ;cek_sensor();
00041d 93ba      	ST   -Y,R27
00041e 93aa      	ST   -Y,R26
                 ;	kec -> Y+2
                 ;	lama -> Y+0
00041f dd98      	RCALL _cek_sensor
                 ;while (sen[0] || sen[1])
                 _0xBC:
000420 91e0 028d 	LDS  R30,_sen
000422 30e0      	CPI  R30,0
000423 f421      	BRNE _0xBF
                +
000424 91e0 028e+LDS R30 , _sen + ( 1 )
                 	__GETB1MN _sen,1
000426 30e0      	CPI  R30,0
000427 f019      	BREQ _0xBE
                 _0xBF:
                 ;kiri(kec, kec);
000428 940e 0bf3 	CALL SUBOPT_0x18
                 ;cek_sensor();
00042a cff5      	RJMP _0xBC
                 _0xBE:
                 ;while (!sen[0] && !sen[1])
                 _0xC1:
00042b 91e0 028d 	LDS  R30,_sen
00042d 30e0      	CPI  R30,0
00042e f421      	BRNE _0xC4
                +
00042f 91e0 028e+LDS R30 , _sen + ( 1 )
                 	__GETB1MN _sen,1
000431 30e0      	CPI  R30,0
000432 f009      	BREQ _0xC5
                 _0xC4:
000433 c003      	RJMP _0xC3
                 _0xC5:
                 ;kiri(kec, kec);
000434 940e 0bf3 	CALL SUBOPT_0x18
                 ;cek_sensor();
000436 cff4      	RJMP _0xC1
                 _0xC3:
                 ;if (lama > 0)
000437 940e 0bc1 	CALL SUBOPT_0xE
000439 f414      	BRGE _0xC6
                 ;rem(lama);
00043a 940e 0bef 	CALL SUBOPT_0x17
                 _0xC6:
00043c c035      	RJMP _0x20C000E
                 ; .FEND
                 ;void belki2()
                 ;cek_sensor();
                 ;while ((sensor & 0b00000001) != 0b00000000)
                 ;cek_sensor();
                 ;kiri(150, 150);
                 ;void belka(int kec, int lama)
                 _belka:
                 ; .FSTART _belka
                 ;cek_sensor();
00043d 93ba      	ST   -Y,R27
00043e 93aa      	ST   -Y,R26
                 ;	kec -> Y+2
                 ;	lama -> Y+0
00043f dd78      	RCALL _cek_sensor
                 ;while (sen[5] || sen[6])
                 _0xCA:
                +
000440 91e0 0292+LDS R30 , _sen + ( 5 )
                 	__GETB1MN _sen,5
000442 30e0      	CPI  R30,0
000443 f421      	BRNE _0xCD
                +
000444 91e0 0293+LDS R30 , _sen + ( 6 )
                 	__GETB1MN _sen,6
000446 30e0      	CPI  R30,0
000447 f019      	BREQ _0xCC
                 _0xCD:
                 ;kanan(kec, kec);
000448 940e 0bfa 	CALL SUBOPT_0x19
                 ;cek_sensor();
00044a cff5      	RJMP _0xCA
                 _0xCC:
                 ;while (!sen[5] && !sen[6])
                 _0xCF:
                +
00044b 91e0 0292+LDS R30 , _sen + ( 5 )
                 	__GETB1MN _sen,5
00044d 30e0      	CPI  R30,0
00044e f421      	BRNE _0xD2
                +
00044f 91e0 0293+LDS R30 , _sen + ( 6 )
                 	__GETB1MN _sen,6
000451 30e0      	CPI  R30,0
000452 f009      	BREQ _0xD3
                 _0xD2:
000453 c003      	RJMP _0xD1
                 _0xD3:
                 ;kanan(kec, kec);
000454 940e 0bfa 	CALL SUBOPT_0x19
                 ;cek_sensor();
000456 cff4      	RJMP _0xCF
                 _0xD1:
                 ;if (lama > 0)
000457 940e 0bc1 	CALL SUBOPT_0xE
000459 f414      	BRGE _0xD4
                 ;rem(lama);
00045a 940e 0bef 	CALL SUBOPT_0x17
                 _0xD4:
00045c c015      	RJMP _0x20C000E
                 ; .FEND
                 ;void belkacenter()
                 ;cek_sensor();
                 ;while ((sensor & 0b00001000) != 0b00001000)
                 ;cek_sensor();
                 ;kanan(180, 180);
                 ;if ((sensor & 0b10000000) == 0b10000000)
                 ;lcd_kedip(1);
                 ;void scan_delay(int ms)
                 ;k = 0;
                 ;	ms -> Y+0
                 ;maju(172, 170);
                 ;while (k < ms / 10)
                 ;delay_ms(10);
                 ;k++;
                 ;cek_sensor();
                 ;scan(180);
                 ;void belokKanan(int kec, int lama_rem) {
                 _belokKanan:
                 ; .FSTART _belokKanan
                 ;if(mapMirror[0] == 0) {
00045d 940e 0c01 	CALL SUBOPT_0x1A
                 ;	kec -> Y+2
                 ;	lama_rem -> Y+0
00045f f421      	BRNE _0xDC
                 ;belka(kec, lama_rem);
000460 940e 0c09 	CALL SUBOPT_0x1B
000462 dfda      	RCALL _belka
                 ;} else {
000463 c003      	RJMP _0xDD
                 _0xDC:
                 ;belki(kec, lama_rem);
000464 940e 0c09 	CALL SUBOPT_0x1B
000466 dfb6      	RCALL _belki
                 _0xDD:
000467 c00a      	RJMP _0x20C000E
                 ; .FEND
                 ;void belokKiri(int kec, int lama_rem) {
                 _belokKiri:
                 ; .FSTART _belokKiri
                 ;if(mapMirror[0] == 0) {
000468 940e 0c01 	CALL SUBOPT_0x1A
                 ;	kec -> Y+2
                 ;	lama_rem -> Y+0
00046a f421      	BRNE _0xDE
                 ;belki(kec, lama_rem);
00046b 940e 0c09 	CALL SUBOPT_0x1B
00046d dfaf      	RCALL _belki
                 ;} else {
00046e c003      	RJMP _0xDF
                 _0xDE:
                 ;belka(kec, lama_rem);
00046f 940e 0c09 	CALL SUBOPT_0x1B
000471 dfcb      	RCALL _belka
                 _0xDF:
                 _0x20C000E:
000472 9624      	ADIW R28,4
000473 9508      	RET
                 ; .FEND
                 ;void griper()
                 ; 0000 006A {
                 ;capit_lepas;
                 ;lengan_tengah;
                 ;delay_ms(5000);
                 ;lengan_bawah;
                 ;delay_ms(5000);
                 ;capit_ambil;
                 ;delay_ms(7000);
                 ;lengan_atas;
                 ;delay_ms(5000);
                 ;lengan_bawah;
                 ;delay_ms(5000);
                 ;capit_lepas;
                 ;void ambil(int lama)
                 _ambil:
                 ; .FSTART _ambil
                 ;capit_ambil;
000474 93ba      	ST   -Y,R27
000475 93aa      	ST   -Y,R26
                 ;	lama -> Y+0
000476 eeee      	LDI  R30,LOW(238)
000477 93e0 0283 	STS  _pos_servo1,R30
                 ;delay(lama);
000479 940e 0bc6 	CALL SUBOPT_0xF
                 ;lengan_atas;
00047b eeea      	LDI  R30,LOW(234)
00047c 93e0 0284 	STS  _pos_servo2,R30
                 ;delay(lama);
00047e 940e 0bc6 	CALL SUBOPT_0xF
000480 c00f      	RJMP _0x20C000D
                 ; .FEND
                 ;void taruh(int lama)
                 _taruh:
                 ; .FSTART _taruh
                 ;lengan_bawah;
000481 93ba      	ST   -Y,R27
000482 93aa      	ST   -Y,R26
                 ;	lama -> Y+0
000483 efe0      	LDI  R30,LOW(240)
000484 93e0 0284 	STS  _pos_servo2,R30
                 ;delay(lama);
000486 940e 0bc6 	CALL SUBOPT_0xF
                 ;capit_lepas;
000488 eee6      	LDI  R30,LOW(230)
000489 93e0 0283 	STS  _pos_servo1,R30
                 ;delay(lama);
00048b 940e 0bc6 	CALL SUBOPT_0xF
                 ;lengan_atas;
00048d eeea      	LDI  R30,LOW(234)
00048e 93e0 0284 	STS  _pos_servo2,R30
                 _0x20C000D:
000490 9622      	ADIW R28,2
000491 9508      	RET
                 ; .FEND
                 ;void bawah_lepas()
                 _bawah_lepas:
                 ; .FSTART _bawah_lepas
                 ;lengan_bawah;
000492 efe0      	LDI  R30,LOW(240)
000493 93e0 0284 	STS  _pos_servo2,R30
                 ;capit_lepas;
000495 eee6      	LDI  R30,LOW(230)
000496 93e0 0283 	STS  _pos_servo1,R30
000498 9508      	RET
                 ; .FEND
                 ;void atas_lepas()
                 ;lengan_atas;
                 ;capit_lepas;
                 ;int maxHijau = 190;
                 
                 	.DSEG
                 ;int maxKuning = 40;
                 ;int maxMerah = 135;
                 ;int minHijau = 170;
                 ;int minKuning = 0;
                 ;int minMerah = 90;
                 ;void bacawarna()
                 ; 0000 006B {
                 
                 	.CSEG
                 _bacawarna:
                 ; .FSTART _bacawarna
                 ;nadc7 = read_adc(7);
000499 e0a7      	LDI  R26,LOW(7)
00049a dcc1      	RCALL _read_adc
00049b 2e8e      	MOV  R8,R30
00049c 2499      	CLR  R9
                 ;lcd_gotoxy(13, 1);
00049d e0ed      	LDI  R30,LOW(13)
00049e 940e 0c10 	CALL SUBOPT_0x1C
                 ;sprintf(buff, "%d   ", nadc7);
0004a0 940e 0b6d 	CALL SUBOPT_0x4
                +
0004a2 eee6     +LDI R30 , LOW ( 2 * _0x0 + ( 94 ) )
0004a3 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 94 ) )
                 	__POINTW1FN _0x0,94
0004a4 93fa      	ST   -Y,R31
0004a5 93ea      	ST   -Y,R30
0004a6 01f4      	MOVW R30,R8
0004a7 2766      	CLR  R22
0004a8 2777      	CLR  R23
0004a9 940e 0d93 	CALL __PUTPARD1
0004ab e084      	LDI  R24,4
0004ac 940e 09f9 	CALL _sprintf
0004ae 9628      	ADIW R28,8
                 ;lcd_puts(buff);
                 _0x20C000C:
0004af e6a0      	LDI  R26,LOW(_buff)
0004b0 e0b2      	LDI  R27,HIGH(_buff)
0004b1 940e 0ae8 	CALL _lcd_puts
0004b3 9508      	RET
                 ; .FEND
                 ;int checkWarna() {
                 _checkWarna:
                 ; .FSTART _checkWarna
                 ;int warna;
                 ;nadc7 = read_adc(7);
0004b4 931a      	ST   -Y,R17
0004b5 930a      	ST   -Y,R16
                 ;	warna -> R16,R17
0004b6 e0a7      	LDI  R26,LOW(7)
0004b7 dca4      	RCALL _read_adc
0004b8 2e8e      	MOV  R8,R30
0004b9 2499      	CLR  R9
                 ;if(nadc7>minMerah && nadc7<maxMerah){
0004ba 91e0 02b2 	LDS  R30,_minMerah
0004bc 91f0 02b3 	LDS  R31,_minMerah+1
0004be 15e8      	CP   R30,R8
0004bf 05f9      	CPC  R31,R9
0004c0 f438      	BRSH _0xE6
0004c1 91e0 02ac 	LDS  R30,_maxMerah
0004c3 91f0 02ad 	LDS  R31,_maxMerah+1
0004c5 168e      	CP   R8,R30
0004c6 069f      	CPC  R9,R31
0004c7 f008      	BRLO _0xE7
                 _0xE6:
0004c8 c003      	RJMP _0xE5
                 _0xE7:
                 ;warna = 0;
                +
0004c9 e000     +LDI R16 , LOW ( 0 )
0004ca e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ;else if(nadc7>minKuning && nadc7<maxKuning){
0004cb c026      	RJMP _0xE8
                 _0xE5:
0004cc 91e0 02b0 	LDS  R30,_minKuning
0004ce 91f0 02b1 	LDS  R31,_minKuning+1
0004d0 15e8      	CP   R30,R8
0004d1 05f9      	CPC  R31,R9
0004d2 f438      	BRSH _0xEA
0004d3 91e0 02aa 	LDS  R30,_maxKuning
0004d5 91f0 02ab 	LDS  R31,_maxKuning+1
0004d7 168e      	CP   R8,R30
0004d8 069f      	CPC  R9,R31
0004d9 f008      	BRLO _0xEB
                 _0xEA:
0004da c003      	RJMP _0xE9
                 _0xEB:
                 ;warna = 1;
                +
0004db e001     +LDI R16 , LOW ( 1 )
0004dc e010     +LDI R17 , HIGH ( 1 )
                 	__GETWRN 16,17,1
                 ;else if(nadc7>minHijau && nadc7<maxHijau){
0004dd c014      	RJMP _0xEC
                 _0xE9:
0004de 91e0 02ae 	LDS  R30,_minHijau
0004e0 91f0 02af 	LDS  R31,_minHijau+1
0004e2 15e8      	CP   R30,R8
0004e3 05f9      	CPC  R31,R9
0004e4 f438      	BRSH _0xEE
0004e5 91e0 02a8 	LDS  R30,_maxHijau
0004e7 91f0 02a9 	LDS  R31,_maxHijau+1
0004e9 168e      	CP   R8,R30
0004ea 069f      	CPC  R9,R31
0004eb f008      	BRLO _0xEF
                 _0xEE:
0004ec c003      	RJMP _0xED
                 _0xEF:
                 ;warna = 2;
                +
0004ed e002     +LDI R16 , LOW ( 2 )
0004ee e010     +LDI R17 , HIGH ( 2 )
                 	__GETWRN 16,17,2
                 ;}else{
0004ef c002      	RJMP _0xF0
                 _0xED:
                 ;warna = 3;
                +
0004f0 e003     +LDI R16 , LOW ( 3 )
0004f1 e010     +LDI R17 , HIGH ( 3 )
                 	__GETWRN 16,17,3
                 _0xF0:
                 _0xEC:
                 _0xE8:
                 ;return warna;
0004f2 01f8      	MOVW R30,R16
0004f3 9109      	LD   R16,Y+
0004f4 9119      	LD   R17,Y+
0004f5 9508      	RET
                 ; .FEND
                 ;int isWarna;
                 ;void fromBtoGreen()
                 ; 0000 006C {
                 _fromBtoGreen:
                 ; .FSTART _fromBtoGreen
                 ;scanX(2, 120);
0004f6 940e 0c14 	CALL SUBOPT_0x1D
0004f8 940e 0c1a 	CALL SUBOPT_0x1E
                 ;scanX(1, 80);
0004fa 940e 0c22 	CALL SUBOPT_0x1F
                 ;scanTimer(40, 80, 50);
0004fc e2e8      	LDI  R30,LOW(40)
0004fd e0f0      	LDI  R31,HIGH(40)
0004fe 940e 0c26 	CALL SUBOPT_0x20
                 ;taruh(20);
                 ;mundur(100, 100); delay(10);
                 ;belokKiri(100, 10);
000500 940e 0c42 	CALL SUBOPT_0x21
                 ;scanX(1, 120);
000502 940e 0c46 	CALL SUBOPT_0x22
000504 e7a8      	LDI  R26,LOW(120)
000505 940e 0c1a 	CALL SUBOPT_0x1E
                 ;scanX(1, 100);
000507 940e 0c4b 	CALL SUBOPT_0x23
                 ;belokKiri(100, 10);
000509 940e 0c42 	CALL SUBOPT_0x21
                 ;scanX(2, 120);
00050b 940e 0c14 	CALL SUBOPT_0x1D
00050d c0ac      	RJMP _0x20C000B
                 ;bawah_lepas();
                 ;scanX(1, 80);
                 ;scanTimer(30, 80, 50);
                 ;ambil(20);
                 ; .FEND
                 ;void fromBtoYellow()
                 _fromBtoYellow:
                 ; .FSTART _fromBtoYellow
                 ;scanX(1, 80);
00050e 940e 0c46 	CALL SUBOPT_0x22
000510 940e 0c22 	CALL SUBOPT_0x1F
                 ;belokKanan(100, 10);
000512 940e 0c54 	CALL SUBOPT_0x24
000514 940e 0c59 	CALL SUBOPT_0x25
                 ;scanX(2, 120);
000516 940e 0c14 	CALL SUBOPT_0x1D
000518 940e 0c1a 	CALL SUBOPT_0x1E
                 ;scanX(1, 80);
00051a 940e 0c22 	CALL SUBOPT_0x1F
                 ;scanTimer(35, 95, 50);
00051c 940e 0c5d 	CALL SUBOPT_0x26
                 ;taruh(20);
                 ;mundur(100, 100); delay(10);
00051e 940e 0c72 	CALL SUBOPT_0x27
                 ;belokKiri(100, 0); belokKiri(100, 20);
000520 940e 0c77 	CALL SUBOPT_0x28
000522 e1a4      	LDI  R26,LOW(20)
000523 e0b0      	LDI  R27,0
000524 df43      	RCALL _belokKiri
                 ;scanX(4, 150);
000525 940e 0c7c 	CALL SUBOPT_0x29
                 ;scanX(1, 80);
000527 940e 0c22 	CALL SUBOPT_0x1F
                 ;belokKiri(100, 10);
000529 940e 0c54 	CALL SUBOPT_0x24
00052b 940e 0c42 	CALL SUBOPT_0x21
                 ;scanX(1, 80);
00052d 940e 0c46 	CALL SUBOPT_0x22
00052f 940e 0c22 	CALL SUBOPT_0x1F
                 ;bawah_lepas();
000531 df60      	RCALL _bawah_lepas
                 ;scanTimer(45, 80, 50);
000532 e2ed      	LDI  R30,LOW(45)
000533 e0f0      	LDI  R31,HIGH(45)
000534 c08e      	RJMP _0x20C0009
                 ;ambil(20);
                 ; .FEND
                 ;void fromBtoRed() {
                 _fromBtoRed:
                 ; .FSTART _fromBtoRed
                 ;scanX(1, 80);
000535 940e 0c46 	CALL SUBOPT_0x22
000537 940e 0c22 	CALL SUBOPT_0x1F
                 ;belokKiri(100, 10);
000539 940e 0c54 	CALL SUBOPT_0x24
00053b 940e 0c42 	CALL SUBOPT_0x21
                 ;scanX(2, 120);
00053d 940e 0c14 	CALL SUBOPT_0x1D
00053f 940e 0c1a 	CALL SUBOPT_0x1E
                 ;scanX(1, 80);
000541 940e 0c22 	CALL SUBOPT_0x1F
                 ;scanTimer(35, 95, 50);
000543 940e 0c5d 	CALL SUBOPT_0x26
                 ;taruh(20);
                 ;mundur(100, 100); delay(20);
000545 e1a4      	LDI  R26,LOW(20)
000546 e0b0      	LDI  R27,0
000547 dc1f      	RCALL _delay
                 ;belokKanan(100, 0); belokKanan(100, 20);
000548 940e 0c54 	CALL SUBOPT_0x24
00054a 940e 0c82 	CALL SUBOPT_0x2A
00054c 940e 0c87 	CALL SUBOPT_0x2B
                 ;scanX(1, 100);
00054e 940e 0c46 	CALL SUBOPT_0x22
000550 940e 0c4b 	CALL SUBOPT_0x23
                 ;belokKanan(100, 10);
000552 940e 0c59 	CALL SUBOPT_0x25
                 ;scanX(1, 80);
000554 940e 0c46 	CALL SUBOPT_0x22
000556 940e 0c22 	CALL SUBOPT_0x1F
                 ;bawah_lepas();
000558 df39      	RCALL _bawah_lepas
                 ;scanTimer(45, 95, 50);
000559 940e 0c8b 	CALL SUBOPT_0x2C
00055b c06b      	RJMP _0x20C000A
                 ;ambil(20);
                 ; .FEND
                 ;void fromCtoGreen() {
                 _fromCtoGreen:
                 ; .FSTART _fromCtoGreen
                 ;scanX(1, 80);
00055c 940e 0c46 	CALL SUBOPT_0x22
00055e 940e 0c22 	CALL SUBOPT_0x1F
                 ;belokKiri(100, 10);
000560 940e 0c54 	CALL SUBOPT_0x24
000562 940e 0c42 	CALL SUBOPT_0x21
                 ;scanX(4, 150);
000564 940e 0c7c 	CALL SUBOPT_0x29
                 ;scanX(1, 80);
000566 940e 0c22 	CALL SUBOPT_0x1F
                 ;scanTimer(35, 95, 50);
000568 940e 0c5d 	CALL SUBOPT_0x26
                 ;taruh(20);
                 ;mundur(100, 100); delay(10);
00056a 940e 0c72 	CALL SUBOPT_0x27
                 ;belokKanan(100, 0); belokKanan(100, 20);
00056c 940e 0c82 	CALL SUBOPT_0x2A
00056e 940e 0c87 	CALL SUBOPT_0x2B
                 ;scanX(2, 100);
000570 940e 0c92 	CALL SUBOPT_0x2D
000572 940e 0c4b 	CALL SUBOPT_0x23
                 ;belokKanan(100, 20);
000574 940e 0c87 	CALL SUBOPT_0x2B
                 ;scanX(3, 150);
000576 940e 0c97 	CALL SUBOPT_0x2E
                 ;scanX(1, 80);
000578 940e 0c22 	CALL SUBOPT_0x1F
                 ;bawah_lepas();
00057a df17      	RCALL _bawah_lepas
                 ;belokKanan(100, 10);
00057b 940e 0c54 	CALL SUBOPT_0x24
00057d 940e 0c59 	CALL SUBOPT_0x25
                 ;scanTimer(40, 80, 50);
00057f e2e8      	LDI  R30,LOW(40)
000580 e0f0      	LDI  R31,HIGH(40)
000581 c041      	RJMP _0x20C0009
                 ;ambil(20);
                 ; .FEND
                 ;void fromCtoYellow() {
                 _fromCtoYellow:
                 ; .FSTART _fromCtoYellow
                 ;scanX(1, 100);
000582 940e 0c46 	CALL SUBOPT_0x22
000584 940e 0c4b 	CALL SUBOPT_0x23
                 ;belokKanan(100, 10);
000586 940e 0c59 	CALL SUBOPT_0x25
                 ;scanX(1, 80);
000588 940e 0c46 	CALL SUBOPT_0x22
00058a 940e 0c22 	CALL SUBOPT_0x1F
                 ;scanTimer(45, 95, 50);
00058c 940e 0c8b 	CALL SUBOPT_0x2C
00058e 940e 0c9d 	CALL SUBOPT_0x2F
                 ;taruh(20);
                 ;mundur(100, 100); delay(10);
000590 940e 0ca7 	CALL SUBOPT_0x30
                 ;belokKanan(100, 20);
000592 940e 0c87 	CALL SUBOPT_0x2B
                 ;scanX(3, 150);
000594 940e 0c97 	CALL SUBOPT_0x2E
                 ;scanX(1, 100);
000596 940e 0c4b 	CALL SUBOPT_0x23
                 ;belokKanan(100, 10);
000598 940e 0c59 	CALL SUBOPT_0x25
                 ;scanX(2, 150);
00059a 940e 0c92 	CALL SUBOPT_0x2D
00059c e9a6      	LDI  R26,LOW(150)
00059d 940e 0cad 	CALL SUBOPT_0x31
                 ;bawah_lepas();
                 ;scanX(1, 80);
00059f 940e 0c22 	CALL SUBOPT_0x1F
                 ;scanTimer(40, 80, 50);
0005a1 e2e8      	LDI  R30,LOW(40)
0005a2 e0f0      	LDI  R31,HIGH(40)
0005a3 c01f      	RJMP _0x20C0009
                 ;ambil(20);
                 ; .FEND
                 ;void fromCtoRed() {
                 _fromCtoRed:
                 ; .FSTART _fromCtoRed
                 ;mundur(100, 100); delay(10);
0005a4 940e 0ca7 	CALL SUBOPT_0x30
                 ;belokKiri(100, 0); belokKiri(100, 20);
0005a6 940e 0c77 	CALL SUBOPT_0x28
0005a8 e1a4      	LDI  R26,LOW(20)
0005a9 e0b0      	LDI  R27,0
0005aa debd      	RCALL _belokKiri
                 ;scanX(2, 120);
0005ab 940e 0c14 	CALL SUBOPT_0x1D
0005ad 940e 0c1a 	CALL SUBOPT_0x1E
                 ;scanX(1, 80);
0005af 940e 0c22 	CALL SUBOPT_0x1F
                 ;scanTimer(30, 80, 50);
0005b1 e1ee      	LDI  R30,LOW(30)
0005b2 e0f0      	LDI  R31,HIGH(30)
0005b3 940e 0c26 	CALL SUBOPT_0x20
                 ;taruh(20);
                 ;mundur(100, 100); delay(10);
                 ;belokKanan(100, 20);
0005b5 940e 0c87 	CALL SUBOPT_0x2B
                 ;scanX(2, 150);
0005b7 940e 0c92 	CALL SUBOPT_0x2D
0005b9 e9a6      	LDI  R26,LOW(150)
                 _0x20C000B:
0005ba e0b0      	LDI  R27,0
0005bb de20      	RCALL _scanX
                 ;bawah_lepas();
0005bc ded5      	RCALL _bawah_lepas
                 ;scanX(1, 80);
0005bd 940e 0c46 	CALL SUBOPT_0x22
0005bf 940e 0c22 	CALL SUBOPT_0x1F
                 ;scanTimer(30, 80, 50);
0005c1 e1ee      	LDI  R30,LOW(30)
0005c2 e0f0      	LDI  R31,HIGH(30)
                 _0x20C0009:
0005c3 93fa      	ST   -Y,R31
0005c4 93ea      	ST   -Y,R30
0005c5 e5e0      	LDI  R30,LOW(80)
0005c6 e0f0      	LDI  R31,HIGH(80)
                 _0x20C000A:
0005c7 93fa      	ST   -Y,R31
0005c8 93ea      	ST   -Y,R30
0005c9 940e 0cb3 	CALL SUBOPT_0x32
                 ;ambil(20);
0005cb 9508      	RET
                 ; .FEND
                 ;void fromAtoGreen() {
                 _fromAtoGreen:
                 ; .FSTART _fromAtoGreen
                 ;mundur(100, 100); delay(10);
0005cc 940e 0ca7 	CALL SUBOPT_0x30
                 ;belokKanan(100, 0); belokKanan(100, 20);
0005ce 940e 0c82 	CALL SUBOPT_0x2A
0005d0 940e 0c87 	CALL SUBOPT_0x2B
                 ;scanX(3, 150);
0005d2 e0e3      	LDI  R30,LOW(3)
0005d3 e0f0      	LDI  R31,HIGH(3)
0005d4 93fa      	ST   -Y,R31
0005d5 93ea      	ST   -Y,R30
0005d6 e9a6      	LDI  R26,LOW(150)
0005d7 c00b      	RJMP _0x20C0008
                 ;scanX(1, 80);
                 ;scanTimer(35, 95, 50);
                 ;taruh(20);
                 ; .FEND
                 ;void fromAtoYellow() {
                 _fromAtoYellow:
                 ; .FSTART _fromAtoYellow
                 ;scanX(1, 100);
0005d8 940e 0c46 	CALL SUBOPT_0x22
0005da 940e 0c4b 	CALL SUBOPT_0x23
                 ;belokKiri(100, 10);
0005dc 940e 0c42 	CALL SUBOPT_0x21
                 ;scanTimer(50, 95, 50);
0005de e3e2      	LDI  R30,LOW(50)
0005df e0f0      	LDI  R31,HIGH(50)
0005e0 c00a      	RJMP _0x20C0007
                 ;taruh(20);
                 ; .FEND
                 ;void fromAtoRed() {
                 _fromAtoRed:
                 ; .FSTART _fromAtoRed
                 ;scanX(2, 120);
0005e1 940e 0c14 	CALL SUBOPT_0x1D
                 _0x20C0008:
0005e3 e0b0      	LDI  R27,0
0005e4 ddf7      	RCALL _scanX
                 ;scanX(1, 80);
0005e5 940e 0c46 	CALL SUBOPT_0x22
0005e7 940e 0c22 	CALL SUBOPT_0x1F
                 ;scanTimer(35, 95, 50);
0005e9 e2e3      	LDI  R30,LOW(35)
0005ea e0f0      	LDI  R31,HIGH(35)
                 _0x20C0007:
0005eb 93fa      	ST   -Y,R31
0005ec 93ea      	ST   -Y,R30
0005ed e5ef      	LDI  R30,LOW(95)
0005ee e0f0      	LDI  R31,HIGH(95)
0005ef 940e 0c9d 	CALL SUBOPT_0x2F
                 ;taruh(20);
0005f1 9508      	RET
                 ; .FEND
                 ;void vertikalLineD(void);
                 ;void fromGreenAtoD() {
                 ;if(positionD == 0) {
                 ;mundur(100, 100); delay(10);
                 ;belokKiri(100, 10);
                 ;} else if(positionD == 1) {
                 ;mundur(100, 100); delay(10);
                 ;belokKanan(100, 0); belokKanan(100, 20);
                 ;scanX(1, 100);
                 ;scanX(1, 120);
                 ;belokKanan(100, 10);
                 ;} else if(positionD == 2) {
                 ;mundur(100, 100); delay(10);
                 ;belokKanan(100, 0); belokKanan(100, 20);
                 ;scanX(1, 100);
                 ;scanX(2, 150);
                 ;scanX(1, 120);
                 ;belokKanan(100, 10);
                 ;} else if(positionD == 3) {
                 ;mundur(100, 100); delay(10);
                 ;belokKanan(100, 0); belokKanan(100, 20);
                 ;scanX(1, 100);
                 ;scanX(4, 150);
                 ;scanX(1, 120);
                 ;belokKanan(100, 10);
                 ;vertikalLineD();
                 ;void fromDto4(void);
                 ;void vertikalLineD() {
                 ;scanX(4, 150);
                 ;bawah_lepas();
                 ;scanX(1, 80);
                 ;scanTimer(35, 95, 50);
                 ;ambil(20);
                 ;fromDto4();
                 ;void returnHome(void);
                 ;void fromDto4() {
                 ;mundur(100, 100); delay(10);
                 ;belokKanan(100, 0); belokKanan(100, 20);
                 ;scanX(1, 90);
                 ;scanX(1, 120);
                 ;belokKiri(100, 10);
                 ;if(positionD == 0) {
                 ;scanX(1, 120);
                 ;} else if(positionD == 1) {
                 ;scanX(3, 120);
                 ;} else if(positionD == 2) {
                 ;scanX(5, 120);
                 ;} else if(positionD == 3) {
                 ;scanX(7, 120);
                 ;scanTka(1);
                 ;taruh(20);
                 ;returnHome();
                 ;void returnHome() {
                 ;mundur(100, 100); delay(10);
                 ;belokKanan(100, 0); belokKanan(100, 20);
                 ;scanX(1, 100);
                 ;scanX(3, 150);
                 ;scanX(1, 120);
                 ;belokKanan(100, 10);
                 ;scanX(2, 150);
                 ;scanTka(1);
                 ;maju_delay(80, 45);
                 ;parkir();
                 ;void Program_Jalan()
                 _Program_Jalan:
                 ; .FSTART _Program_Jalan
                 ;maju_delay(80,45);
0005f2 e5e0      	LDI  R30,LOW(80)
0005f3 e0f0      	LDI  R31,HIGH(80)
0005f4 93fa      	ST   -Y,R31
0005f5 93ea      	ST   -Y,R30
0005f6 e2ad      	LDI  R26,LOW(45)
0005f7 e0b0      	LDI  R27,0
0005f8 dcca      	RCALL _maju_delay
                 ;scanX(2, 120);
0005f9 940e 0c14 	CALL SUBOPT_0x1D
0005fb 940e 0cad 	CALL SUBOPT_0x31
                 ;bawah_lepas();
                 ;scanX(1, 80);
0005fd 940e 0c22 	CALL SUBOPT_0x1F
                 ;scanTimer(35, 80, 50);
0005ff e2e3      	LDI  R30,LOW(35)
000600 e0f0      	LDI  R31,HIGH(35)
000601 93fa      	ST   -Y,R31
000602 93ea      	ST   -Y,R30
000603 e5e0      	LDI  R30,LOW(80)
000604 e0f0      	LDI  R31,HIGH(80)
000605 93fa      	ST   -Y,R31
000606 93ea      	ST   -Y,R30
000607 940e 0cb3 	CALL SUBOPT_0x32
                 ;ambil(20);
                 ;delay(50);
000609 940e 0cbb 	CALL SUBOPT_0x33
                 ;isWarna = checkWarna();
                 ;if(isWarna == merah) {
00060b f411      	BRNE _0xFF
                 ;fromBtoRed();
00060c df28      	RCALL _fromBtoRed
                 ;} else if(isWarna == kuning) {
00060d c00b      	RJMP _0x100
                 _0xFF:
00060e 940e 0cc7 	CALL SUBOPT_0x34
000610 9711      	SBIW R26,1
000611 f411      	BRNE _0x101
                 ;fromBtoYellow();
000612 defb      	RCALL _fromBtoYellow
                 ;} else if(isWarna == hijau) {
000613 c005      	RJMP _0x102
                 _0x101:
000614 940e 0cc7 	CALL SUBOPT_0x34
000616 9712      	SBIW R26,2
000617 f401      	BRNE _0x103
                 ;fromBtoGreen();
                 ;} else {
                 _0x103:
                 ;fromBtoGreen();
                 _0x168:
000618 dedd      	RCALL _fromBtoGreen
                 _0x102:
                 _0x100:
                 ;delay(50);
000619 940e 0cbb 	CALL SUBOPT_0x33
                 ;isWarna = checkWarna();
                 ;if(isWarna == merah) {
00061b f411      	BRNE _0x105
                 ;fromCtoRed();
00061c df87      	RCALL _fromCtoRed
                 ;} else if(isWarna == kuning) {
00061d c00b      	RJMP _0x106
                 _0x105:
00061e 940e 0cc7 	CALL SUBOPT_0x34
000620 9711      	SBIW R26,1
000621 f411      	BRNE _0x107
                 ;fromCtoYellow();
000622 df5f      	RCALL _fromCtoYellow
                 ;} else if(isWarna == hijau) {
000623 c005      	RJMP _0x108
                 _0x107:
000624 940e 0cc7 	CALL SUBOPT_0x34
000626 9712      	SBIW R26,2
000627 f401      	BRNE _0x109
                 ;fromCtoGreen();
                 ;} else {
                 _0x109:
                 ;fromCtoGreen();
                 _0x169:
000628 df33      	RCALL _fromCtoGreen
                 _0x108:
                 _0x106:
                 ;delay(50);
000629 940e 0cbb 	CALL SUBOPT_0x33
                 ;isWarna = checkWarna();
                 ;if(isWarna == merah) {
00062b f411      	BRNE _0x10B
                 ;fromAtoRed();
00062c dfb4      	RCALL _fromAtoRed
                 ;} else if(isWarna == kuning) {
00062d c00b      	RJMP _0x10C
                 _0x10B:
00062e 940e 0cc7 	CALL SUBOPT_0x34
000630 9711      	SBIW R26,1
000631 f411      	BRNE _0x10D
                 ;fromAtoYellow();
000632 dfa5      	RCALL _fromAtoYellow
                 ;} else if(isWarna == hijau) {
000633 c005      	RJMP _0x10E
                 _0x10D:
000634 940e 0cc7 	CALL SUBOPT_0x34
000636 9712      	SBIW R26,2
000637 f401      	BRNE _0x10F
                 ;fromAtoGreen();
                 ;} else {
                 _0x10F:
                 ;fromAtoGreen();
                 _0x16A:
000638 df93      	RCALL _fromAtoGreen
                 _0x10E:
                 _0x10C:
000639 9508      	RET
                 ; .FEND
                 ;void runBot(void);
                 ;void calibration(void);
                 ;void Program_Jalan(void);
                 ;void test_motor(void);
                 ;void test_tombol(void);
                 ;void map_select(int childMenuSelect);
                 ;void changeMenu(int menuSelect, bool isSelect, int childMenuSelect) {
                 ; 0000 006D void changeMenu(int menuSelect, _Bool isSelect, int childMenuSelect) {
                 _changeMenu:
                 ; .FSTART _changeMenu
                 ;lampu = 0;
00063a 93ba      	ST   -Y,R27
00063b 93aa      	ST   -Y,R26
                 ;	menuSelect -> Y+3
                 ;	isSelect -> Y+2
                 ;	childMenuSelect -> Y+0
00063c 98c3      	CBI  0x18,3
                 ;if(!isSelect && !isChildSelect) {
00063d 81ea      	LDD  R30,Y+2
00063e 30e0      	CPI  R30,0
00063f f421      	BRNE _0x114
000640 91e0 028b 	LDS  R30,_isChildSelect
000642 30e0      	CPI  R30,0
000643 f009      	BREQ _0x115
                 _0x114:
000644 c006      	RJMP _0x113
                 _0x115:
                 ;lcd_clear();
000645 940e 0ccc 	CALL SUBOPT_0x35
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Menu");
                +
000647 eeac     +LDI R26 , LOW ( 2 * _0x0 + ( 100 ) )
000648 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 100 ) )
                 	__POINTW2FN _0x0,100
000649 940e 0af7 	CALL _lcd_putsf
                 ;switch (menuSelect) {
                 _0x113:
00064b 81eb      	LDD  R30,Y+3
00064c 81fc      	LDD  R31,Y+3+1
                 ;case 0: // Run bot
00064d 9730      	SBIW R30,0
00064e f479      	BRNE _0x119
                 ;if(isSelect || isChildSelect) { runBot(); break; }
00064f 81ea      	LDD  R30,Y+2
000650 30e0      	CPI  R30,0
000651 f421      	BRNE _0x11B
000652 91e0 028b 	LDS  R30,_isChildSelect
000654 30e0      	CPI  R30,0
000655 f011      	BREQ _0x11A
                 _0x11B:
000656 d051      	RCALL _runBot
000657 c04f      	RJMP _0x118
                 ;lcd_gotoxy(0, 1);
                 _0x11A:
000658 e0e0      	LDI  R30,LOW(0)
000659 940e 0c10 	CALL SUBOPT_0x1C
                 ;lcd_putsf("Run Bot");
00065b 940e 0cd0 	CALL SUBOPT_0x36
                 ;break;
00065d c049      	RJMP _0x118
                 ;case 1: // Calibration
                 _0x119:
00065e 30e1      	CPI  R30,LOW(0x1)
00065f e0a0      	LDI  R26,HIGH(0x1)
000660 07fa      	CPC  R31,R26
000661 f469      	BRNE _0x11D
                 ;if(isSelect) { calibration(); break; }
000662 81ea      	LDD  R30,Y+2
000663 30e0      	CPI  R30,0
000664 f011      	BREQ _0x11E
000665 d06d      	RCALL _calibration
000666 c040      	RJMP _0x118
                 ;lcd_gotoxy(0, 1);
                 _0x11E:
000667 e0e0      	LDI  R30,LOW(0)
000668 940e 0c10 	CALL SUBOPT_0x1C
                 ;lcd_putsf("Calibration");
                +
00066a efa9     +LDI R26 , LOW ( 2 * _0x0 + ( 113 ) )
00066b e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 113 ) )
                 	__POINTW2FN _0x0,113
00066c 940e 0af7 	CALL _lcd_putsf
                 ;break;
00066e c038      	RJMP _0x118
                 ;case 2: // Map Select
                 _0x11D:
00066f 30e2      	CPI  R30,LOW(0x2)
000670 e0a0      	LDI  R26,HIGH(0x2)
000671 07fa      	CPC  R31,R26
000672 f499      	BRNE _0x11F
                 ;if(isSelect || isChildSelect) { map_select(childMenuSelect); break; }
000673 81ea      	LDD  R30,Y+2
000674 30e0      	CPI  R30,0
000675 f421      	BRNE _0x121
000676 91e0 028b 	LDS  R30,_isChildSelect
000678 30e0      	CPI  R30,0
000679 f021      	BREQ _0x120
                 _0x121:
00067a 81a8      	LD   R26,Y
00067b 81b9      	LDD  R27,Y+1
00067c d065      	RCALL _map_select
00067d c029      	RJMP _0x118
                 ;lcd_gotoxy(0, 1);
                 _0x120:
00067e e0e0      	LDI  R30,LOW(0)
00067f 940e 0c10 	CALL SUBOPT_0x1C
                 ;lcd_putsf("Map");
                +
000681 e0a5     +LDI R26 , LOW ( 2 * _0x0 + ( 125 ) )
000682 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 125 ) )
                 	__POINTW2FN _0x0,125
000683 940e 0af7 	CALL _lcd_putsf
                 ;break;
000685 c021      	RJMP _0x118
                 ;case 3: // Test Motor
                 _0x11F:
000686 30e3      	CPI  R30,LOW(0x3)
000687 e0a0      	LDI  R26,HIGH(0x3)
000688 07fa      	CPC  R31,R26
000689 f469      	BRNE _0x123
                 ;if(isSelect) { test_motor(); break; }
00068a 81ea      	LDD  R30,Y+2
00068b 30e0      	CPI  R30,0
00068c f011      	BREQ _0x124
00068d d0a7      	RCALL _test_motor
00068e c018      	RJMP _0x118
                 ;lcd_gotoxy(0, 1);
                 _0x124:
00068f e0e0      	LDI  R30,LOW(0)
000690 940e 0c10 	CALL SUBOPT_0x1C
                 ;lcd_putsf("Motor");
                +
000692 e0a9     +LDI R26 , LOW ( 2 * _0x0 + ( 129 ) )
000693 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 129 ) )
                 	__POINTW2FN _0x0,129
000694 940e 0af7 	CALL _lcd_putsf
                 ;break;
000696 c010      	RJMP _0x118
                 ;case 4: // Test tombol
                 _0x123:
000697 30e4      	CPI  R30,LOW(0x4)
000698 e0a0      	LDI  R26,HIGH(0x4)
000699 07fa      	CPC  R31,R26
00069a f461      	BRNE _0x127
                 ;if(isSelect) { test_tombol(); break; }
00069b 81ea      	LDD  R30,Y+2
00069c 30e0      	CPI  R30,0
00069d f011      	BREQ _0x126
00069e d0cb      	RCALL _test_tombol
00069f c007      	RJMP _0x118
                 ;lcd_gotoxy(0, 1);
                 _0x126:
0006a0 e0e0      	LDI  R30,LOW(0)
0006a1 940e 0c10 	CALL SUBOPT_0x1C
                 ;lcd_putsf("Button");
                +
0006a3 e0af     +LDI R26 , LOW ( 2 * _0x0 + ( 135 ) )
0006a4 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 135 ) )
                 	__POINTW2FN _0x0,135
0006a5 940e 0af7 	CALL _lcd_putsf
                 ;break;
                 ;default:
                 _0x127:
                 ;break;
                 _0x118:
0006a7 c213      	RJMP _0x20C0005
                 ; .FEND
                 ;void runBot() {
                 _runBot:
                 ; .FSTART _runBot
                 ;if(!isChildSelect) {
0006a8 91e0 028b 	LDS  R30,_isChildSelect
0006aa 30e0      	CPI  R30,0
0006ab f479      	BRNE _0x128
                 ;lcd_clear();
0006ac 940e 0ccc 	CALL SUBOPT_0x35
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Run Bot");
0006ae 940e 0cd0 	CALL SUBOPT_0x36
                 ;lcd_gotoxy(0, 1);
0006b0 e0e0      	LDI  R30,LOW(0)
0006b1 940e 0c10 	CALL SUBOPT_0x1C
                 ;lcd_putsf("Click 1 to start");
                +
0006b3 e1a6     +LDI R26 , LOW ( 2 * _0x0 + ( 142 ) )
0006b4 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 142 ) )
                 	__POINTW2FN _0x0,142
0006b5 940e 0af7 	CALL _lcd_putsf
                 ;isChildSelect = true;
0006b7 e0e1      	LDI  R30,LOW(1)
0006b8 93e0 028b 	STS  _isChildSelect,R30
                 ;} else if(isChildSelect) {
0006ba c017      	RJMP _0x129
                 _0x128:
0006bb 91e0 028b 	LDS  R30,_isChildSelect
0006bd 30e0      	CPI  R30,0
0006be f099      	BREQ _0x12A
                 ;lcd_clear();
0006bf 940e 0aac 	CALL _lcd_clear
                 ;lcd_gotoxy(0, 1);
0006c1 e0e0      	LDI  R30,LOW(0)
0006c2 940e 0c10 	CALL SUBOPT_0x1C
                 ;lcd_putsf("Running...");
                +
0006c4 e2a7     +LDI R26 , LOW ( 2 * _0x0 + ( 159 ) )
0006c5 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 159 ) )
                 	__POINTW2FN _0x0,159
0006c6 940e 0af7 	CALL _lcd_putsf
                 ;Program_Jalan();
0006c8 df29      	RCALL _Program_Jalan
                 ;isChildSelect = false;
0006c9 e0e0      	LDI  R30,LOW(0)
0006ca 93e0 028b 	STS  _isChildSelect,R30
                 ;count_child_btn = 0;
0006cc 940e 0cd4 	CALL SUBOPT_0x37
                 ;changeMenu(0, false, 0);
0006ce e0e0      	LDI  R30,LOW(0)
0006cf e0f0      	LDI  R31,HIGH(0)
0006d0 940e 0cda 	CALL SUBOPT_0x38
                 _0x12A:
                 _0x129:
0006d2 9508      	RET
                 ; .FEND
                 ;void calibration() {
                 _calibration:
                 ; .FSTART _calibration
                 ;scan_garis();
0006d3 db12      	RCALL _scan_garis
                 ;delay(300);
0006d4 e2ac      	LDI  R26,LOW(300)
0006d5 e0b1      	LDI  R27,HIGH(300)
0006d6 da90      	RCALL _delay
                 ;scan_back();
0006d7 db2e      	RCALL _scan_back
                 ;delay(100);
0006d8 e6a4      	LDI  R26,LOW(100)
0006d9 e0b0      	LDI  R27,0
0006da da8c      	RCALL _delay
                 ;hit_tengah();
0006db db4a      	RCALL _hit_tengah
                 ;isChildSelect = false;
0006dc e0e0      	LDI  R30,LOW(0)
0006dd 93e0 028b 	STS  _isChildSelect,R30
                 ;changeMenu(1, false, 0);
0006df e0e1      	LDI  R30,LOW(1)
0006e0 e0f0      	LDI  R31,HIGH(1)
0006e1 c083      	RJMP _0x20C0006
                 ; .FEND
                 ;void map_select(int childMenuSelect) {
                 _map_select:
                 ; .FSTART _map_select
                 ;switch(childMenuSelect) {
0006e2 93ba      	ST   -Y,R27
0006e3 93aa      	ST   -Y,R26
                 ;	childMenuSelect -> Y+0
0006e4 81e8      	LD   R30,Y
0006e5 81f9      	LDD  R31,Y+1
                 ;case 0:
0006e6 9730      	SBIW R30,0
0006e7 f511      	BRNE _0x12E
                 ;if(!isChildSelect) {
0006e8 91e0 028b 	LDS  R30,_isChildSelect
0006ea 30e0      	CPI  R30,0
0006eb f471      	BRNE _0x12F
                 ;isChildSelect = true;
0006ec e0e1      	LDI  R30,LOW(1)
0006ed 93e0 028b 	STS  _isChildSelect,R30
                 ;lcd_clear();
0006ef 940e 0ccc 	CALL SUBOPT_0x35
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Map Biru");
                +
0006f1 e3a2     +LDI R26 , LOW ( 2 * _0x0 + ( 170 ) )
0006f2 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 170 ) )
                 	__POINTW2FN _0x0,170
0006f3 940e 0ce2 	CALL SUBOPT_0x39
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("Click 1 to select");
                +
0006f5 e3ab     +LDI R26 , LOW ( 2 * _0x0 + ( 179 ) )
0006f6 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 179 ) )
                 	__POINTW2FN _0x0,179
0006f7 940e 0af7 	CALL _lcd_putsf
                 ;} else if(isChildSelect) {
0006f9 c00f      	RJMP _0x130
                 _0x12F:
0006fa 91e0 028b 	LDS  R30,_isChildSelect
0006fc 30e0      	CPI  R30,0
0006fd f059      	BREQ _0x131
                 ;mapMirror[0] = 0;
0006fe 940e 0ce6 	CALL SUBOPT_0x3A
                 ;count_child_btn = 0;
000700 940e 0cd4 	CALL SUBOPT_0x37
                 ;isChildSelect = false;
000702 e0e0      	LDI  R30,LOW(0)
000703 93e0 028b 	STS  _isChildSelect,R30
                 ;changeMenu(2, false, 0);
000705 940e 0c92 	CALL SUBOPT_0x2D
000707 940e 0ced 	CALL SUBOPT_0x3B
                 ;break;
                 _0x131:
                 _0x130:
000709 c029      	RJMP _0x12D
                 ;case 1:
                 _0x12E:
00070a 30e1      	CPI  R30,LOW(0x1)
00070b e0a0      	LDI  R26,HIGH(0x1)
00070c 07fa      	CPC  R31,R26
00070d f529      	BRNE _0x136
                 ;if(!isChildSelect) {
00070e 91e0 028b 	LDS  R30,_isChildSelect
000710 30e0      	CPI  R30,0
000711 f471      	BRNE _0x133
                 ;isChildSelect = true;
000712 e0e1      	LDI  R30,LOW(1)
000713 93e0 028b 	STS  _isChildSelect,R30
                 ;lcd_clear();
000715 940e 0ccc 	CALL SUBOPT_0x35
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Map Merah");
                +
000717 e4ad     +LDI R26 , LOW ( 2 * _0x0 + ( 197 ) )
000718 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 197 ) )
                 	__POINTW2FN _0x0,197
000719 940e 0ce2 	CALL SUBOPT_0x39
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("Click 1 to select");
                +
00071b e3ab     +LDI R26 , LOW ( 2 * _0x0 + ( 179 ) )
00071c e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 179 ) )
                 	__POINTW2FN _0x0,179
00071d 940e 0af7 	CALL _lcd_putsf
                 ;} else if(isChildSelect) {
00071f c013      	RJMP _0x134
                 _0x133:
000720 91e0 028b 	LDS  R30,_isChildSelect
000722 30e0      	CPI  R30,0
000723 f079      	BREQ _0x135
                 ;mapMirror[0] = 1;
000724 e2aa      	LDI  R26,LOW(_mapMirror)
000725 e0b0      	LDI  R27,HIGH(_mapMirror)
000726 e0e1      	LDI  R30,LOW(1)
000727 e0f0      	LDI  R31,HIGH(1)
000728 940e 0da8 	CALL __EEPROMWRW
                 ;count_child_btn = 0;
00072a 940e 0cd4 	CALL SUBOPT_0x37
                 ;isChildSelect = false;
00072c e0e0      	LDI  R30,LOW(0)
00072d 93e0 028b 	STS  _isChildSelect,R30
                 ;changeMenu(2, false, 0);
00072f 940e 0c92 	CALL SUBOPT_0x2D
000731 940e 0ced 	CALL SUBOPT_0x3B
                 ;break;
                 _0x135:
                 _0x134:
                 ;default:
                 _0x136:
                 ;break;
                 _0x12D:
000733 940c 0aaa 	JMP  _0x20C0003
                 ; .FEND
                 ;void test_motor()
                 _test_motor:
                 ; .FSTART _test_motor
                 ;lcd_clear();
000735 940e 0ccc 	CALL SUBOPT_0x35
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Test Motor");
                +
000737 e5a7     +LDI R26 , LOW ( 2 * _0x0 + ( 207 ) )
000738 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 207 ) )
                 	__POINTW2FN _0x0,207
000739 940e 0ce2 	CALL SUBOPT_0x39
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("+100 +100");
                +
00073b e6a2     +LDI R26 , LOW ( 2 * _0x0 + ( 218 ) )
00073c e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 218 ) )
                 	__POINTW2FN _0x0,218
00073d 940e 0af7 	CALL _lcd_putsf
                 ;maju(100, 100);
00073f e6e4      	LDI  R30,LOW(100)
000740 93ea      	ST   -Y,R30
000741 e6a4      	LDI  R26,LOW(100)
000742 940e 0cf3 	CALL SUBOPT_0x3C
                 ;delay_ms(50);
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("-100 -100");
                +
000744 e6ac     +LDI R26 , LOW ( 2 * _0x0 + ( 228 ) )
000745 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 228 ) )
                 	__POINTW2FN _0x0,228
000746 940e 0af7 	CALL _lcd_putsf
                 ;maju(-100, -100);
000748 e9ec      	LDI  R30,LOW(156)
000749 93ea      	ST   -Y,R30
00074a e9ac      	LDI  R26,LOW(156)
00074b 940e 0cf3 	CALL SUBOPT_0x3C
                 ;delay_ms(50);
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("+100 -100");
                +
00074d e7a6     +LDI R26 , LOW ( 2 * _0x0 + ( 238 ) )
00074e e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 238 ) )
                 	__POINTW2FN _0x0,238
00074f 940e 0af7 	CALL _lcd_putsf
                 ;maju(100, -100);
000751 e6e4      	LDI  R30,LOW(100)
000752 93ea      	ST   -Y,R30
000753 e9ac      	LDI  R26,LOW(156)
000754 940e 0cf3 	CALL SUBOPT_0x3C
                 ;delay_ms(50);
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("-100 +100");
                +
000756 e8a0     +LDI R26 , LOW ( 2 * _0x0 + ( 248 ) )
000757 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 248 ) )
                 	__POINTW2FN _0x0,248
000758 940e 0af7 	CALL _lcd_putsf
                 ;maju(-100, 100);
00075a e9ec      	LDI  R30,LOW(156)
00075b 93ea      	ST   -Y,R30
00075c e6a4      	LDI  R26,LOW(100)
00075d db13      	RCALL _maju
                 ;lcd_clear();
00075e 940e 0ccc 	CALL SUBOPT_0x35
                 ;lcd_gotoxy(0, 0);
                 ;isChildSelect = false;
000760 e0e0      	LDI  R30,LOW(0)
000761 93e0 028b 	STS  _isChildSelect,R30
                 ;changeMenu(3, false, 0);
000763 e0e3      	LDI  R30,LOW(3)
000764 e0f0      	LDI  R31,HIGH(3)
                 _0x20C0006:
000765 93fa      	ST   -Y,R31
000766 93ea      	ST   -Y,R30
000767 940e 0ced 	CALL SUBOPT_0x3B
000769 9508      	RET
                 ; .FEND
                 ;void test_tombol()
                 _test_tombol:
                 ; .FSTART _test_tombol
                 ;lcd_gotoxy(0, 1);
00076a e0e0      	LDI  R30,LOW(0)
00076b 940e 0c10 	CALL SUBOPT_0x1C
                 ;lcd_putsf("Click 1 to exit");
                +
00076d e8aa     +LDI R26 , LOW ( 2 * _0x0 + ( 258 ) )
00076e e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 258 ) )
                 	__POINTW2FN _0x0,258
00076f 940e 0af7 	CALL _lcd_putsf
                 ;isTestTombol = true;
000771 e0e1      	LDI  R30,LOW(1)
000772 93e0 028c 	STS  _isTestTombol,R30
                 ;while (1)
                 _0x137:
                 ;if (!isTestTombol) break;
000774 91e0 028c 	LDS  R30,_isTestTombol
000776 30e0      	CPI  R30,0
000777 f179      	BREQ _0x139
                 ;if ((t1 == 0))
000778 9998      	SBIC 0x13,0
000779 c011      	RJMP _0x13B
                 ;lcd_gotoxy(0, 0);
00077a e0e0      	LDI  R30,LOW(0)
00077b 940e 0b69 	CALL SUBOPT_0x3
                 ;lcd_putsf("tombol = 1     ");
                +
00077d e9aa     +LDI R26 , LOW ( 2 * _0x0 + ( 274 ) )
00077e e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 274 ) )
                 	__POINTW2FN _0x0,274
00077f 940e 0af7 	CALL _lcd_putsf
                 ;isTestTombol = false;
000781 e0e0      	LDI  R30,LOW(0)
000782 93e0 028c 	STS  _isTestTombol,R30
                 ;delay(50);
000784 e3a2      	LDI  R26,LOW(50)
000785 e0b0      	LDI  R27,0
000786 d9e0      	RCALL _delay
                 ;changeMenu(4, false, 0);
000787 e0e4      	LDI  R30,LOW(4)
000788 e0f0      	LDI  R31,HIGH(4)
000789 940e 0cda 	CALL SUBOPT_0x38
                 ;if (t2 == 0)
                 _0x13B:
00078b 9999      	SBIC 0x13,1
00078c c007      	RJMP _0x13C
                 ;lcd_gotoxy(0, 0);
00078d e0e0      	LDI  R30,LOW(0)
00078e 940e 0b69 	CALL SUBOPT_0x3
                 ;lcd_putsf("tombol = 2     ");
                +
000790 eaaa     +LDI R26 , LOW ( 2 * _0x0 + ( 290 ) )
000791 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 290 ) )
                 	__POINTW2FN _0x0,290
000792 940e 0af7 	CALL _lcd_putsf
                 ;if (t3 == 0)
                 _0x13C:
000794 999a      	SBIC 0x13,2
000795 c007      	RJMP _0x13D
                 ;lcd_gotoxy(0, 0);
000796 e0e0      	LDI  R30,LOW(0)
000797 940e 0b69 	CALL SUBOPT_0x3
                 ;lcd_putsf("tombol = 3     ");
                +
000799 ebaa     +LDI R26 , LOW ( 2 * _0x0 + ( 306 ) )
00079a e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 306 ) )
                 	__POINTW2FN _0x0,306
00079b 940e 0af7 	CALL _lcd_putsf
                 ;if (t4 == 0)
                 _0x13D:
00079d 999b      	SBIC 0x13,3
00079e c007      	RJMP _0x13E
                 ;lcd_gotoxy(0, 0);
00079f e0e0      	LDI  R30,LOW(0)
0007a0 940e 0b69 	CALL SUBOPT_0x3
                 ;lcd_putsf("tombol = 4     ");
                +
0007a2 ecaa     +LDI R26 , LOW ( 2 * _0x0 + ( 322 ) )
0007a3 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 322 ) )
                 	__POINTW2FN _0x0,322
0007a4 940e 0af7 	CALL _lcd_putsf
                 _0x13E:
0007a6 cfcd      	RJMP _0x137
                 _0x139:
0007a7 9508      	RET
                 ; .FEND
                 ;void tes_sensor()
                 ;for (i = 0; i < 7; i++)
                 ;lcd_gotoxy(0, 0);
                 ;sprintf(buff, "sensor:%d = %d  ", i, read_adc(i));
                 ;lcd_puts(buff);
                 ;delay_ms(100);
                 ;void tampil_count()
                 ;lcd_gotoxy(0, 0);
                 ;sprintf(buff, " %d  ", second);
                 ;lcd_puts(buff);
                 ;interrupt[TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 0072 {
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
0007a8 93aa      	ST   -Y,R26
0007a9 93ea      	ST   -Y,R30
0007aa b7ef      	IN   R30,SREG
0007ab 93ea      	ST   -Y,R30
                 ; 0000 0073 TCNT0 = 0x96; // BE
0007ac e9e6      	LDI  R30,LOW(150)
0007ad bfe2      	OUT  0x32,R30
                 ; 0000 0074 a++;
0007ae 91e0 0286 	LDS  R30,_a
0007b0 5fef      	SUBI R30,-LOW(1)
0007b1 93e0 0286 	STS  _a,R30
                 ; 0000 0075 
                 ; 0000 0076 if (a <= pos_servo1)
0007b3 91e0 0283 	LDS  R30,_pos_servo1
0007b5 91a0 0286 	LDS  R26,_a
0007b7 17ea      	CP   R30,R26
0007b8 f010      	BRLO _0x142
                 ; 0000 0077 {
                 ; 0000 0078 servo1 = 0;
0007b9 98ae      	CBI  0x15,6
                 ; 0000 0079 }
                 ; 0000 007A else
0007ba c001      	RJMP _0x145
                 _0x142:
                 ; 0000 007B {
                 ; 0000 007C servo1 = 1;
0007bb 9aae      	SBI  0x15,6
                 ; 0000 007D }
                 _0x145:
                 ; 0000 007E if (a <= pos_servo2)
0007bc 91e0 0284 	LDS  R30,_pos_servo2
0007be 91a0 0286 	LDS  R26,_a
0007c0 17ea      	CP   R30,R26
0007c1 f010      	BRLO _0x148
                 ; 0000 007F {
                 ; 0000 0080 servo2 = 0;
0007c2 98af      	CBI  0x15,7
                 ; 0000 0081 }
                 ; 0000 0082 else
0007c3 c001      	RJMP _0x14B
                 _0x148:
                 ; 0000 0083 {
                 ; 0000 0084 servo2 = 1;
0007c4 9aaf      	SBI  0x15,7
                 ; 0000 0085 }
                 _0x14B:
                 ; 0000 0086 if (a <= pos_gulung)
0007c5 91e0 0285 	LDS  R30,_pos_gulung
0007c7 91a0 0286 	LDS  R26,_a
0007c9 17ea      	CP   R30,R26
0007ca f010      	BRLO _0x14E
                 ; 0000 0087 {
                 ; 0000 0088 servo_gulung = 0;
0007cb 98ad      	CBI  0x15,5
                 ; 0000 0089 }
                 ; 0000 008A else
0007cc c001      	RJMP _0x151
                 _0x14E:
                 ; 0000 008B {
                 ; 0000 008C servo_gulung = 1;
0007cd 9aad      	SBI  0x15,5
                 ; 0000 008D }
                 _0x151:
                 ; 0000 008E }
0007ce 91e9      	LD   R30,Y+
0007cf bfef      	OUT  SREG,R30
0007d0 91e9      	LD   R30,Y+
0007d1 91a9      	LD   R26,Y+
0007d2 9518      	RETI
                 ; .FEND
                 ;interrupt[TIM0_COMP] void timer0_comp_isr(void)
                 ; 0000 0092 {
                 _timer0_comp_isr:
                 ; .FSTART _timer0_comp_isr
                 ; 0000 0093 // Place your code here
                 ; 0000 0094 }
0007d3 9518      	RETI
                 ; .FEND
                 ;void main(void)
                 ; 0000 0097 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0098 // Declare your local variables here
                 ; 0000 0099 
                 ; 0000 009A // Input/Output Ports initialization
                 ; 0000 009B // Port A initialization
                 ; 0000 009C // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 009D // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 009E PORTA = 0x00;
0007d4 e0e0      	LDI  R30,LOW(0)
0007d5 bbeb      	OUT  0x1B,R30
                 ; 0000 009F DDRA = 0x00;
0007d6 bbea      	OUT  0x1A,R30
                 ; 0000 00A0 
                 ; 0000 00A1 // Port B initialization
                 ; 0000 00A2 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 00A3 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 00A4 PORTB = 0x08;
0007d7 e0e8      	LDI  R30,LOW(8)
0007d8 bbe8      	OUT  0x18,R30
                 ; 0000 00A5 DDRB = 0Xff; // 0x08;
0007d9 efef      	LDI  R30,LOW(255)
0007da bbe7      	OUT  0x17,R30
                 ; 0000 00A6 
                 ; 0000 00A7 // Port C initialization
                 ; 0000 00A8 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 00A9 // State7=T State6=T State5=T State4=T State3=P State2=P State1=P State0=P
                 ; 0000 00AA PORTC = 0xFF;
0007db bbe5      	OUT  0x15,R30
                 ; 0000 00AB DDRC = 0xF0; // C0
0007dc efe0      	LDI  R30,LOW(240)
0007dd bbe4      	OUT  0x14,R30
                 ; 0000 00AC 
                 ; 0000 00AD // Port D initialization
                 ; 0000 00AE // Func7=In Func6=In Func5=Out Func4=Out Func3=In Func2=In Func1=In Func0=In
                 ; 0000 00AF // State7=T State6=T State5=0 State4=0 State3=T State2=T State1=T State0=T
                 ; 0000 00B0 PORTD = 0x03;
0007de e0e3      	LDI  R30,LOW(3)
0007df bbe2      	OUT  0x12,R30
                 ; 0000 00B1 DDRD = 0xFC; // 3F
0007e0 efec      	LDI  R30,LOW(252)
0007e1 bbe1      	OUT  0x11,R30
                 ; 0000 00B2 
                 ; 0000 00B3 // Timer/Counter 0 initialization
                 ; 0000 00B4 TCCR0 = 0x4A;
0007e2 e4ea      	LDI  R30,LOW(74)
0007e3 bfe3      	OUT  0x33,R30
                 ; 0000 00B5 TCNT0 = 0x96;
0007e4 e9e6      	LDI  R30,LOW(150)
0007e5 bfe2      	OUT  0x32,R30
                 ; 0000 00B6 OCR0 = 0x00;
0007e6 e0e0      	LDI  R30,LOW(0)
0007e7 bfec      	OUT  0x3C,R30
                 ; 0000 00B7 
                 ; 0000 00B8 // Timer/Counter 1 initialization
                 ; 0000 00B9 TCCR1A = 0xA1;
0007e8 eae1      	LDI  R30,LOW(161)
0007e9 bdef      	OUT  0x2F,R30
                 ; 0000 00BA TCCR1B = 0x09;
0007ea e0e9      	LDI  R30,LOW(9)
0007eb bdee      	OUT  0x2E,R30
                 ; 0000 00BB TCNT1H = 0x00;
0007ec e0e0      	LDI  R30,LOW(0)
0007ed bded      	OUT  0x2D,R30
                 ; 0000 00BC TCNT1L = 0x00;
0007ee bdec      	OUT  0x2C,R30
                 ; 0000 00BD ICR1H = 0x00;
0007ef bde7      	OUT  0x27,R30
                 ; 0000 00BE ICR1L = 0x00;
0007f0 bde6      	OUT  0x26,R30
                 ; 0000 00BF OCR1AH = 0x00;
0007f1 bdeb      	OUT  0x2B,R30
                 ; 0000 00C0 OCR1AL = 0x00;
0007f2 bdea      	OUT  0x2A,R30
                 ; 0000 00C1 OCR1BH = 0x00;
0007f3 bde9      	OUT  0x29,R30
                 ; 0000 00C2 OCR1BL = 0x00;
0007f4 bde8      	OUT  0x28,R30
                 ; 0000 00C3 
                 ; 0000 00C4 // Timer/Counter 2 initialization
                 ; 0000 00C5 // Clock source: System Clock
                 ; 0000 00C6 // Clock value: Timer 2 Stopped
                 ; 0000 00C7 // Mode: Normal top=FFh
                 ; 0000 00C8 // OC2 output: Disconnected
                 ; 0000 00C9 ASSR = 0x00;
0007f5 bde2      	OUT  0x22,R30
                 ; 0000 00CA TCCR2 = 0x00;
0007f6 bde5      	OUT  0x25,R30
                 ; 0000 00CB TCNT2 = 0x00;
0007f7 bde4      	OUT  0x24,R30
                 ; 0000 00CC OCR2 = 0x00;
0007f8 bde3      	OUT  0x23,R30
                 ; 0000 00CD 
                 ; 0000 00CE // External Interrupt(s) initialization
                 ; 0000 00CF // INT0: Off
                 ; 0000 00D0 // INT1: Off
                 ; 0000 00D1 // INT2: Off
                 ; 0000 00D2 MCUCR = 0x00;
0007f9 bfe5      	OUT  0x35,R30
                 ; 0000 00D3 MCUCSR = 0x00;
0007fa bfe4      	OUT  0x34,R30
                 ; 0000 00D4 
                 ; 0000 00D5 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 00D6 TIMSK = 0x03;
0007fb e0e3      	LDI  R30,LOW(3)
0007fc bfe9      	OUT  0x39,R30
                 ; 0000 00D7 
                 ; 0000 00D8 // Analog Comparator initialization
                 ; 0000 00D9 // Analog Comparator: Off
                 ; 0000 00DA // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0000 00DB ACSR = 0x80;
0007fd e8e0      	LDI  R30,LOW(128)
0007fe b9e8      	OUT  0x8,R30
                 ; 0000 00DC SFIOR = 0x00;
0007ff e0e0      	LDI  R30,LOW(0)
000800 bfe0      	OUT  0x30,R30
                 ; 0000 00DD 
                 ; 0000 00DE MCUCR = 0x00;
000801 bfe5      	OUT  0x35,R30
                 ; 0000 00DF MCUCSR = 0x00;
000802 bfe4      	OUT  0x34,R30
                 ; 0000 00E0 
                 ; 0000 00E1 // USART, UNTUK KOMUNIKASI BLUETOOTH
                 ; 0000 00E2 UCSRA = 0x00;
000803 b9eb      	OUT  0xB,R30
                 ; 0000 00E3 UCSRB = 0x18;
000804 e1e8      	LDI  R30,LOW(24)
000805 b9ea      	OUT  0xA,R30
                 ; 0000 00E4 UCSRC = 0x86;
000806 e8e6      	LDI  R30,LOW(134)
000807 bde0      	OUT  0x20,R30
                 ; 0000 00E5 UBRRH = 0x00;
000808 e0e0      	LDI  R30,LOW(0)
000809 bde0      	OUT  0x20,R30
                 ; 0000 00E6 UBRRL = 0x47;
00080a e4e7      	LDI  R30,LOW(71)
00080b b9e9      	OUT  0x9,R30
                 ; 0000 00E7 // ADC initialization
                 ; 0000 00E8 // ADC Clock frequency: 691.200 kHz
                 ; 0000 00E9 // ADC Voltage Reference: AVCC pin
                 ; 0000 00EA // ADC Auto Trigger Source: None
                 ; 0000 00EB // Only the 8 most significant bits of
                 ; 0000 00EC // the AD conversion result are used
                 ; 0000 00ED ADMUX = ADC_VREF_TYPE & 0xff;
00080c e6e0      	LDI  R30,LOW(96)
00080d b9e7      	OUT  0x7,R30
                 ; 0000 00EE ADCSRA = 0x84;
00080e e8e4      	LDI  R30,LOW(132)
00080f b9e6      	OUT  0x6,R30
                 ; 0000 00EF // ADCSRA=0xA6;
                 ; 0000 00F0 SFIOR &= 0x1F;
000810 b7e0      	IN   R30,0x30
000811 71ef      	ANDI R30,LOW(0x1F)
000812 bfe0      	OUT  0x30,R30
                 ; 0000 00F1 
                 ; 0000 00F2 // LCD module initialization
                 ; 0000 00F3 lcd_init(16); //
000813 e1a0      	LDI  R26,LOW(16)
000814 940e 0b1b 	CALL _lcd_init
                 ; 0000 00F4 lcd_clear();  //
000816 940e 0aac 	CALL _lcd_clear
                 ; 0000 00F5 lampu = 0;    //
000818 98c3      	CBI  0x18,3
                 ; 0000 00F6 // k,b
                 ; 0000 00F7 lcd_gotoxy(0, 0);
000819 e0e0      	LDI  R30,LOW(0)
00081a 940e 0b69 	CALL SUBOPT_0x3
                 ; 0000 00F8 lcd_putsf("LEGION");
                +
00081c edaa     +LDI R26 , LOW ( 2 * _0x0 + ( 338 ) )
00081d e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 338 ) )
                 	__POINTW2FN _0x0,338
00081e 940e 0ce2 	CALL SUBOPT_0x39
                 ; 0000 00F9 lcd_gotoxy(0, 1);
                 ; 0000 00FA lcd_putsf("MAN 4 JOMBANG");
                +
000820 eea1     +LDI R26 , LOW ( 2 * _0x0 + ( 345 ) )
000821 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 345 ) )
                 	__POINTW2FN _0x0,345
000822 940e 0cfb 	CALL SUBOPT_0x3D
                 ; 0000 00FB delay_ms(100);
                 ; 0000 00FC lcd_clear();
000824 940e 0aac 	CALL _lcd_clear
                 ; 0000 00FD 
                 ; 0000 00FE // PROGRAM UTAMA
                 ; 0000 00FF // Global enable interrupts
                 ; 0000 0100 #asm("sei")
000826 9478      	SEI
                 ; 0000 0101 lengan_atas;
000827 eeea      	LDI  R30,LOW(234)
000828 93e0 0284 	STS  _pos_servo2,R30
                 ; 0000 0102 capit_lepas;
00082a eee6      	LDI  R30,LOW(230)
00082b 93e0 0283 	STS  _pos_servo1,R30
                 ; 0000 0103 gulung_stop;
00082d efef      	LDI  R30,LOW(255)
00082e 93e0 0285 	STS  _pos_gulung,R30
                 ; 0000 0104 
                 ; 0000 0105 lcd_gotoxy(0, 1);
000830 e0e0      	LDI  R30,LOW(0)
000831 940e 0c10 	CALL SUBOPT_0x1C
                 ; 0000 0106 lcd_putsf("TEST");
                +
000833 eeaf     +LDI R26 , LOW ( 2 * _0x0 + ( 359 ) )
000834 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 359 ) )
                 	__POINTW2FN _0x0,359
000835 940e 0cfb 	CALL SUBOPT_0x3D
                 ; 0000 0107 delay_ms(100);
                 ; 0000 0108 
                 ; 0000 0109 /// mapMirror = 0 - map/lintasan bagian biru
                 ; 0000 010A /// mapMirror = 1 - map/lintasan bagian merah
                 ; 0000 010B if(mapMirror[0] != 0 && mapMirror[0] != 1) mapMirror[0] = 0;
000837 e2aa      	LDI  R26,LOW(_mapMirror)
000838 e0b0      	LDI  R27,HIGH(_mapMirror)
000839 940e 0d98 	CALL __EEPROMRDW
00083b 9730      	SBIW R30,0
00083c f021      	BREQ _0x157
00083d 30e1      	CPI  R30,LOW(0x1)
00083e e0a0      	LDI  R26,HIGH(0x1)
00083f 07fa      	CPC  R31,R26
000840 f409      	BRNE _0x158
                 _0x157:
000841 c002      	RJMP _0x156
                 _0x158:
000842 940e 0ce6 	CALL SUBOPT_0x3A
                 ; 0000 010C 
                 ; 0000 010D lcd_clear();
                 _0x156:
000844 940e 0ccc 	CALL SUBOPT_0x35
                 ; 0000 010E lcd_gotoxy(0, 0);
                 ; 0000 010F lcd_putsf("Menu");
                +
000846 eeac     +LDI R26 , LOW ( 2 * _0x0 + ( 100 ) )
000847 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 100 ) )
                 	__POINTW2FN _0x0,100
000848 940e 0ce2 	CALL SUBOPT_0x39
                 ; 0000 0110 lcd_gotoxy(0, 1);
                 ; 0000 0111 lcd_putsf("Run Bot");
00084a 940e 0cd0 	CALL SUBOPT_0x36
                 ; 0000 0112 
                 ; 0000 0113 while(1) {
                 _0x159:
                 ; 0000 0114 if(!isChildSelect) {
00084c 91e0 028b 	LDS  R30,_isChildSelect
00084e 30e0      	CPI  R30,0
00084f f411      	BRNE _0x15C
                 ; 0000 0115 display_sensor();
000850 d96a      	RCALL _display_sensor
                 ; 0000 0116 bacawarna();
000851 dc47      	RCALL _bacawarna
                 ; 0000 0117 }
                 ; 0000 0118 
                 ; 0000 0119 // lcd_gotoxy(0, 1);
                 ; 0000 011A // sprintf(buff, "button1 = %d  ", count_btn);
                 ; 0000 011B // lcd_puts(buff);
                 ; 0000 011C 
                 ; 0000 011D //bacawarna();
                 ; 0000 011E if((t1 == 0)) {
                 _0x15C:
000852 9998      	SBIC 0x13,0
000853 c023      	RJMP _0x15D
                 ; 0000 011F // Program_Jalan();
                 ; 0000 0120 
                 ; 0000 0121 if(!isChildSelect) count_btn ++;
000854 91e0 028b 	LDS  R30,_isChildSelect
000856 30e0      	CPI  R30,0
000857 f421      	BRNE _0x15E
000858 e8a7      	LDI  R26,LOW(_count_btn)
000859 e0b2      	LDI  R27,HIGH(_count_btn)
00085a 940e 0be9 	CALL SUBOPT_0x16
                 ; 0000 0122 if(isChildSelect) count_child_btn ++;
                 _0x15E:
00085c 91e0 028b 	LDS  R30,_isChildSelect
00085e 30e0      	CPI  R30,0
00085f f021      	BREQ _0x15F
000860 e8a9      	LDI  R26,LOW(_count_child_btn)
000861 e0b2      	LDI  R27,HIGH(_count_child_btn)
000862 940e 0be9 	CALL SUBOPT_0x16
                 ; 0000 0123 if(count_btn >= 5) count_btn = 0;
                 _0x15F:
000864 91a0 0287 	LDS  R26,_count_btn
000866 91b0 0288 	LDS  R27,_count_btn+1
000868 9715      	SBIW R26,5
000869 f02c      	BRLT _0x160
00086a e0e0      	LDI  R30,LOW(0)
00086b 93e0 0287 	STS  _count_btn,R30
00086d 93e0 0288 	STS  _count_btn+1,R30
                 ; 0000 0124 delay(10);
                 _0x160:
00086f e0aa      	LDI  R26,LOW(10)
000870 e0b0      	LDI  R27,0
000871 d8f5      	RCALL _delay
                 ; 0000 0125 changeMenu(count_btn, false, count_child_btn);
000872 940e 0d01 	CALL SUBOPT_0x3E
000874 e0e0      	LDI  R30,LOW(0)
000875 940e 0d08 	CALL SUBOPT_0x3F
                 ; 0000 0126 
                 ; 0000 0127 // buttonhold[0] += 1;
                 ; 0000 0128 // while((t1 == 0) && !isTestTombol && !isDelayClick1) {
                 ; 0000 0129 //     isDelayClick1 = true;
                 ; 0000 012A //     delay(3);
                 ; 0000 012B //     if(buttonhold[0] > 20) {
                 ; 0000 012C //         isSelect = true;
                 ; 0000 012D //         changeMenu();
                 ; 0000 012E //     } else {
                 ; 0000 012F //         isSelect = false; isChildSelect = false;
                 ; 0000 0130 //         changeMenu();
                 ; 0000 0131 //         buttonhold[0] = 0;
                 ; 0000 0132 //     }
                 ; 0000 0133 //     isDelayClick1 = false; break;
                 ; 0000 0134 // }
                 ; 0000 0135 // lcd_gotoxy(0, 0);
                 ; 0000 0136 // sprintf(buff, "button1 = %d  ", button1click);
                 ; 0000 0137 }
                 ; 0000 0138 if((t2 == 0)) {
                 _0x15D:
000877 9999      	SBIC 0x13,1
000878 c008      	RJMP _0x161
                 ; 0000 0139 changeMenu(count_btn, true, count_child_btn);
000879 940e 0d01 	CALL SUBOPT_0x3E
00087b e0e1      	LDI  R30,LOW(1)
00087c 940e 0d08 	CALL SUBOPT_0x3F
                 ; 0000 013A delay(10);
00087e e0aa      	LDI  R26,LOW(10)
00087f e0b0      	LDI  R27,0
000880 d8e6      	RCALL _delay
                 ; 0000 013B }
                 ; 0000 013C // lcd_puts(buff);
                 ; 0000 013D // } else if((t1 == 1)) {
                 ; 0000 013E //     buttonhold[0] = 0;
                 ; 0000 013F //     isDelayClick1 = false;
                 ; 0000 0140 // }
                 ; 0000 0141 
                 ; 0000 0142 // if ((count_btn==0) && (t2==0)){
                 ; 0000 0143 //     lcd_clear();
                 ; 0000 0144 //     lcd_gotoxy(0, 0);
                 ; 0000 0145 //     lcd_putsf("menu 1");
                 ; 0000 0146 // } else if((count_btn == 1) && (t2 == 0)) {
                 ; 0000 0147 //     lcd_clear();
                 ; 0000 0148 //     lcd_gotoxy(0, 0);
                 ; 0000 0149 //     lcd_putsf("menu 2");
                 ; 0000 014A // } else if((count_btn == 2) && (t2 == 0)) {
                 ; 0000 014B //     lcd_clear();
                 ; 0000 014C //     lcd_gotoxy(0, 0);
                 ; 0000 014D //     lcd_putsf("menu 3");
                 ; 0000 014E // } else if((count_btn == 3) && (t2 == 0)) {
                 ; 0000 014F //     lcd_clear();
                 ; 0000 0150 //     lcd_gotoxy(0, 0);
                 ; 0000 0151 //     lcd_putsf("menu 4");
                 ; 0000 0152 // } else if((count_btn == 4) && (t2 == 0)) {
                 ; 0000 0153 //     lcd_clear();
                 ; 0000 0154 //     lcd_gotoxy(0, 0);
                 ; 0000 0155 //     lcd_putsf("menu 5");
                 ; 0000 0156 // } else if((count_btn == 5) && (t2 == 0)) {
                 ; 0000 0157 //     lcd_clear();
                 ; 0000 0158 //     lcd_gotoxy(0, 0);
                 ; 0000 0159 //     lcd_putsf("menu 6");
                 ; 0000 015A // } else if((count_btn == 6) && (t2 == 0)) {
                 ; 0000 015B //     lcd_clear();
                 ; 0000 015C //     lcd_gotoxy(0, 0);
                 ; 0000 015D //     lcd_putsf("menu 7");
                 ; 0000 015E // } else if((count_btn == 7) && (t2 == 0)) {
                 ; 0000 015F //     lcd_clear();
                 ; 0000 0160 //     lcd_gotoxy(0, 0);
                 ; 0000 0161 //     lcd_putsf("menu 8");
                 ; 0000 0162 // } else if((count_btn == 8) && (t2 == 0)) {
                 ; 0000 0163 //     lcd_clear();
                 ; 0000 0164 //     lcd_gotoxy(0, 0);
                 ; 0000 0165 //     lcd_putsf("menu 9");
                 ; 0000 0166 // } else if((count_btn == 9) && (t2 == 0)) {
                 ; 0000 0167 //     lcd_clear();
                 ; 0000 0168 //     lcd_gotoxy(0, 0);
                 ; 0000 0169 //     lcd_putsf("menu 10");
                 ; 0000 016A // } else if((count_btn == 10) && (t2 == 0)) {
                 ; 0000 016B //     lcd_clear();
                 ; 0000 016C //     lcd_gotoxy(0, 0);
                 ; 0000 016D // }
                 ; 0000 016E 
                 ; 0000 016F // if (    (t2 == 0)
                 ; 0000 0170 //         && !isTestTombol
                 ; 0000 0171 //         && (!isChildSelect && menuSelect == 0) // Jika Menu di Run Bot, janga ...
                 ; 0000 0172 //     ) {
                 ; 0000 0173 
                 ; 0000 0174 //         // lengan_bawah;
                 ; 0000 0175 //         // delay(50);
                 ; 0000 0176 //     // menuSelect += 1;
                 ; 0000 0177 //     // if(menuSelect >= 4) menuSelect = 0;
                 ; 0000 0178 //     // changeMenu();
                 ; 0000 0179 
                 ; 0000 017A //     scan_garis();
                 ; 0000 017B //     delay(300);
                 ; 0000 017C //     scan_back();
                 ; 0000 017D //     delay(100);
                 ; 0000 017E //     hit_tengah();
                 ; 0000 017F 
                 ; 0000 0180 //     // button1click = 0;
                 ; 0000 0181 //     // lcd_gotoxy(0, 0);
                 ; 0000 0182 //     // sprintf(buff, "button1 = %d  ", button1click);
                 ; 0000 0183 //     // lcd_puts(buff);
                 ; 0000 0184 // }
                 ; 0000 0185 }
                 _0x161:
000881 cfca      	RJMP _0x159
                 ; 0000 0186 }
                 _0x162:
000882 cfff      	RJMP _0x162
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
000883 93ba      	ST   -Y,R27
000884 93aa      	ST   -Y,R26
000885 931a      	ST   -Y,R17
000886 930a      	ST   -Y,R16
000887 81aa      	LDD  R26,Y+2
000888 81bb      	LDD  R27,Y+2+1
000889 9612      	ADIW R26,2
00088a 940e 0d8b 	CALL __GETW1P
00088c 9730      	SBIW R30,0
00088d f129      	BREQ _0x2000010
00088e 81aa      	LDD  R26,Y+2
00088f 81bb      	LDD  R27,Y+2+1
000890 9614      	ADIW R26,4
000891 940e 0d8b 	CALL __GETW1P
000893 018f      	MOVW R16,R30
000894 9730      	SBIW R30,0
000895 f061      	BREQ _0x2000012
                +
000896 3002     +CPI R16 , LOW ( 2 )
000897 e0e0     +LDI R30 , HIGH ( 2 )
000898 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000899 f080      	BRLO _0x2000013
00089a 01f8      	MOVW R30,R16
00089b 9731      	SBIW R30,1
00089c 018f      	MOVW R16,R30
                +
00089d 81aa     +LDD R26 , Y + 2
00089e 81bb     +LDD R27 , Y + 2 + 1
00089f 9614     +ADIW R26 , 4
0008a0 93ed     +ST X + , R30
0008a1 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
0008a2 81aa      	LDD  R26,Y+2
0008a3 81bb      	LDD  R27,Y+2+1
0008a4 9612      	ADIW R26,2
0008a5 940e 0be9 	CALL SUBOPT_0x16
0008a7 9731      	SBIW R30,1
0008a8 81ac      	LDD  R26,Y+4
0008a9 83a0      	STD  Z+0,R26
                 _0x2000013:
0008aa 81aa      	LDD  R26,Y+2
0008ab 81bb      	LDD  R27,Y+2+1
0008ac 940e 0d8b 	CALL __GETW1P
0008ae 23ff      	TST  R31
0008af f012      	BRMI _0x2000014
0008b0 940e 0be9 	CALL SUBOPT_0x16
                 _0x2000014:
0008b2 c006      	RJMP _0x2000015
                 _0x2000010:
0008b3 81aa      	LDD  R26,Y+2
0008b4 81bb      	LDD  R27,Y+2+1
0008b5 efef      	LDI  R30,LOW(65535)
0008b6 efff      	LDI  R31,HIGH(65535)
0008b7 93ed      	ST   X+,R30
0008b8 93fc      	ST   X,R31
                 _0x2000015:
0008b9 8119      	LDD  R17,Y+1
0008ba 8108      	LDD  R16,Y+0
                 _0x20C0005:
0008bb 9625      	ADIW R28,5
0008bc 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
0008bd 93ba      	ST   -Y,R27
0008be 93aa      	ST   -Y,R26
0008bf 9726      	SBIW R28,6
0008c0 940e 0d35 	CALL __SAVELOCR6
0008c2 e010      	LDI  R17,0
0008c3 85ac      	LDD  R26,Y+12
0008c4 85bd      	LDD  R27,Y+12+1
0008c5 e0e0      	LDI  R30,LOW(0)
0008c6 e0f0      	LDI  R31,HIGH(0)
0008c7 93ed      	ST   X+,R30
0008c8 93fc      	ST   X,R31
                 _0x2000016:
0008c9 89ea      	LDD  R30,Y+18
0008ca 89fb      	LDD  R31,Y+18+1
0008cb 9631      	ADIW R30,1
0008cc 8bea      	STD  Y+18,R30
0008cd 8bfb      	STD  Y+18+1,R31
0008ce 9731      	SBIW R30,1
0008cf 91e4      	LPM  R30,Z
0008d0 2f2e      	MOV  R18,R30
0008d1 30e0      	CPI  R30,0
0008d2 f409      	BRNE PC+2
0008d3 c11d      	RJMP _0x2000018
0008d4 2fe1      	MOV  R30,R17
0008d5 30e0      	CPI  R30,0
0008d6 f439      	BRNE _0x200001C
0008d7 3225      	CPI  R18,37
0008d8 f411      	BRNE _0x200001D
0008d9 e011      	LDI  R17,LOW(1)
0008da c002      	RJMP _0x200001E
                 _0x200001D:
0008db 940e 0d0f 	CALL SUBOPT_0x40
                 _0x200001E:
0008dd c112      	RJMP _0x200001B
                 _0x200001C:
0008de 30e1      	CPI  R30,LOW(0x1)
0008df f4a9      	BRNE _0x200001F
0008e0 3225      	CPI  R18,37
0008e1 f419      	BRNE _0x2000020
0008e2 940e 0d0f 	CALL SUBOPT_0x40
0008e4 c10a      	RJMP _0x20000CC
                 _0x2000020:
0008e5 e012      	LDI  R17,LOW(2)
0008e6 e040      	LDI  R20,LOW(0)
0008e7 e000      	LDI  R16,LOW(0)
0008e8 322d      	CPI  R18,45
0008e9 f411      	BRNE _0x2000021
0008ea e001      	LDI  R16,LOW(1)
0008eb c104      	RJMP _0x200001B
                 _0x2000021:
0008ec 322b      	CPI  R18,43
0008ed f411      	BRNE _0x2000022
0008ee e24b      	LDI  R20,LOW(43)
0008ef c100      	RJMP _0x200001B
                 _0x2000022:
0008f0 3220      	CPI  R18,32
0008f1 f411      	BRNE _0x2000023
0008f2 e240      	LDI  R20,LOW(32)
0008f3 c0fc      	RJMP _0x200001B
                 _0x2000023:
0008f4 c002      	RJMP _0x2000024
                 _0x200001F:
0008f5 30e2      	CPI  R30,LOW(0x2)
0008f6 f439      	BRNE _0x2000025
                 _0x2000024:
0008f7 e050      	LDI  R21,LOW(0)
0008f8 e013      	LDI  R17,LOW(3)
0008f9 3320      	CPI  R18,48
0008fa f411      	BRNE _0x2000026
0008fb 6800      	ORI  R16,LOW(128)
0008fc c0f3      	RJMP _0x200001B
                 _0x2000026:
0008fd c003      	RJMP _0x2000027
                 _0x2000025:
0008fe 30e3      	CPI  R30,LOW(0x3)
0008ff f009      	BREQ PC+2
000900 c0ef      	RJMP _0x200001B
                 _0x2000027:
000901 3320      	CPI  R18,48
000902 f010      	BRLO _0x200002A
000903 332a      	CPI  R18,58
000904 f008      	BRLO _0x200002B
                 _0x200002A:
000905 c007      	RJMP _0x2000029
                 _0x200002B:
000906 e0aa      	LDI  R26,LOW(10)
000907 9f5a      	MUL  R21,R26
000908 2d50      	MOV  R21,R0
000909 2fe2      	MOV  R30,R18
00090a 53e0      	SUBI R30,LOW(48)
00090b 0f5e      	ADD  R21,R30
00090c c0e3      	RJMP _0x200001B
                 _0x2000029:
00090d 2fe2      	MOV  R30,R18
00090e 36e3      	CPI  R30,LOW(0x63)
00090f f449      	BRNE _0x200002F
000910 940e 0d16 	CALL SUBOPT_0x41
000912 89e8      	LDD  R30,Y+16
000913 89f9      	LDD  R31,Y+16+1
000914 81a4      	LDD  R26,Z+4
000915 93aa      	ST   -Y,R26
000916 940e 0d1c 	CALL SUBOPT_0x42
000918 c0d6      	RJMP _0x2000030
                 _0x200002F:
000919 37e3      	CPI  R30,LOW(0x73)
00091a f441      	BRNE _0x2000032
00091b 940e 0d16 	CALL SUBOPT_0x41
00091d 940e 0d22 	CALL SUBOPT_0x43
00091f 940e 0a35 	CALL _strlen
000921 2f1e      	MOV  R17,R30
000922 c00a      	RJMP _0x2000033
                 _0x2000032:
000923 37e0      	CPI  R30,LOW(0x70)
000924 f461      	BRNE _0x2000035
000925 940e 0d16 	CALL SUBOPT_0x41
000927 940e 0d22 	CALL SUBOPT_0x43
000929 940e 0a41 	CALL _strlenf
00092b 2f1e      	MOV  R17,R30
00092c 6008      	ORI  R16,LOW(8)
                 _0x2000033:
00092d 6002      	ORI  R16,LOW(2)
00092e 770f      	ANDI R16,LOW(127)
00092f e030      	LDI  R19,LOW(0)
000930 c03c      	RJMP _0x2000036
                 _0x2000035:
000931 36e4      	CPI  R30,LOW(0x64)
000932 f011      	BREQ _0x2000039
000933 36e9      	CPI  R30,LOW(0x69)
000934 f411      	BRNE _0x200003A
                 _0x2000039:
000935 6004      	ORI  R16,LOW(4)
000936 c002      	RJMP _0x200003B
                 _0x200003A:
000937 37e5      	CPI  R30,LOW(0x75)
000938 f431      	BRNE _0x200003C
                 _0x200003B:
000939 e5e4      	LDI  R30,LOW(_tbl10_G100*2)
00093a e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
00093b 83ee      	STD  Y+6,R30
00093c 83ff      	STD  Y+6+1,R31
00093d e015      	LDI  R17,LOW(5)
00093e c00c      	RJMP _0x200003D
                 _0x200003C:
00093f 35e8      	CPI  R30,LOW(0x58)
000940 f411      	BRNE _0x200003F
000941 6008      	ORI  R16,LOW(8)
000942 c003      	RJMP _0x2000040
                 _0x200003F:
000943 37e8      	CPI  R30,LOW(0x78)
000944 f009      	BREQ PC+2
000945 c0a9      	RJMP _0x2000071
                 _0x2000040:
000946 e5ee      	LDI  R30,LOW(_tbl16_G100*2)
000947 e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
000948 83ee      	STD  Y+6,R30
000949 83ff      	STD  Y+6+1,R31
00094a e014      	LDI  R17,LOW(4)
                 _0x200003D:
00094b ff02      	SBRS R16,2
00094c c017      	RJMP _0x2000042
00094d 940e 0d16 	CALL SUBOPT_0x41
00094f 89a8      	LDD  R26,Y+16
000950 89b9      	LDD  R27,Y+16+1
000951 9614      	ADIW R26,4
000952 91ed      	LD   R30,X+
000953 91fd      	LD   R31,X+
000954 87ea      	STD  Y+10,R30
000955 87fb      	STD  Y+10+1,R31
000956 85ab      	LDD  R26,Y+11
000957 23aa      	TST  R26
000958 f42a      	BRPL _0x2000043
000959 940e 0d47 	CALL __ANEGW1
00095b 87ea      	STD  Y+10,R30
00095c 87fb      	STD  Y+10+1,R31
00095d e24d      	LDI  R20,LOW(45)
                 _0x2000043:
00095e 3040      	CPI  R20,0
00095f f011      	BREQ _0x2000044
000960 5f1f      	SUBI R17,-LOW(1)
000961 c001      	RJMP _0x2000045
                 _0x2000044:
000962 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
000963 c009      	RJMP _0x2000046
                 _0x2000042:
000964 940e 0d16 	CALL SUBOPT_0x41
000966 89a8      	LDD  R26,Y+16
000967 89b9      	LDD  R27,Y+16+1
000968 9614      	ADIW R26,4
000969 940e 0d8b 	CALL __GETW1P
00096b 87ea      	STD  Y+10,R30
00096c 87fb      	STD  Y+10+1,R31
                 _0x2000046:
                 _0x2000036:
00096d fd00      	SBRC R16,0
00096e c011      	RJMP _0x2000047
                 _0x2000048:
00096f 1715      	CP   R17,R21
000970 f478      	BRSH _0x200004A
000971 ff07      	SBRS R16,7
000972 c008      	RJMP _0x200004B
000973 ff02      	SBRS R16,2
000974 c004      	RJMP _0x200004C
000975 7f0b      	ANDI R16,LOW(251)
000976 2f24      	MOV  R18,R20
000977 5011      	SUBI R17,LOW(1)
000978 c001      	RJMP _0x200004D
                 _0x200004C:
000979 e320      	LDI  R18,LOW(48)
                 _0x200004D:
00097a c001      	RJMP _0x200004E
                 _0x200004B:
00097b e220      	LDI  R18,LOW(32)
                 _0x200004E:
00097c 940e 0d0f 	CALL SUBOPT_0x40
00097e 5051      	SUBI R21,LOW(1)
00097f cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
000980 2f31      	MOV  R19,R17
000981 ff01      	SBRS R16,1
000982 c017      	RJMP _0x200004F
                 _0x2000050:
000983 3030      	CPI  R19,0
000984 f0a1      	BREQ _0x2000052
000985 ff03      	SBRS R16,3
000986 c006      	RJMP _0x2000053
000987 81ee      	LDD  R30,Y+6
000988 81ff      	LDD  R31,Y+6+1
000989 9125      	LPM  R18,Z+
00098a 83ee      	STD  Y+6,R30
00098b 83ff      	STD  Y+6+1,R31
00098c c005      	RJMP _0x2000054
                 _0x2000053:
00098d 81ae      	LDD  R26,Y+6
00098e 81bf      	LDD  R27,Y+6+1
00098f 912d      	LD   R18,X+
000990 83ae      	STD  Y+6,R26
000991 83bf      	STD  Y+6+1,R27
                 _0x2000054:
000992 940e 0d0f 	CALL SUBOPT_0x40
000994 3050      	CPI  R21,0
000995 f009      	BREQ _0x2000055
000996 5051      	SUBI R21,LOW(1)
                 _0x2000055:
000997 5031      	SUBI R19,LOW(1)
000998 cfea      	RJMP _0x2000050
                 _0x2000052:
000999 c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
00099a e320      	LDI  R18,LOW(48)
00099b 81ee      	LDD  R30,Y+6
00099c 81ff      	LDD  R31,Y+6+1
00099d 940e 0d8f 	CALL __GETW1PF
00099f 87e8      	STD  Y+8,R30
0009a0 87f9      	STD  Y+8+1,R31
0009a1 81ee      	LDD  R30,Y+6
0009a2 81ff      	LDD  R31,Y+6+1
0009a3 9632      	ADIW R30,2
0009a4 83ee      	STD  Y+6,R30
0009a5 83ff      	STD  Y+6+1,R31
                 _0x200005A:
0009a6 85e8      	LDD  R30,Y+8
0009a7 85f9      	LDD  R31,Y+8+1
0009a8 85aa      	LDD  R26,Y+10
0009a9 85bb      	LDD  R27,Y+10+1
0009aa 17ae      	CP   R26,R30
0009ab 07bf      	CPC  R27,R31
0009ac f050      	BRLO _0x200005C
0009ad 5f2f      	SUBI R18,-LOW(1)
0009ae 85a8      	LDD  R26,Y+8
0009af 85b9      	LDD  R27,Y+8+1
0009b0 85ea      	LDD  R30,Y+10
0009b1 85fb      	LDD  R31,Y+10+1
0009b2 1bea      	SUB  R30,R26
0009b3 0bfb      	SBC  R31,R27
0009b4 87ea      	STD  Y+10,R30
0009b5 87fb      	STD  Y+10+1,R31
0009b6 cfef      	RJMP _0x200005A
                 _0x200005C:
0009b7 332a      	CPI  R18,58
0009b8 f028      	BRLO _0x200005D
0009b9 ff03      	SBRS R16,3
0009ba c002      	RJMP _0x200005E
0009bb 5f29      	SUBI R18,-LOW(7)
0009bc c001      	RJMP _0x200005F
                 _0x200005E:
0009bd 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
0009be fd04      	SBRC R16,4
0009bf c01a      	RJMP _0x2000061
0009c0 3321      	CPI  R18,49
0009c1 f420      	BRSH _0x2000063
0009c2 85a8      	LDD  R26,Y+8
0009c3 85b9      	LDD  R27,Y+8+1
0009c4 9711      	SBIW R26,1
0009c5 f409      	BRNE _0x2000062
                 _0x2000063:
0009c6 c009      	RJMP _0x20000CD
                 _0x2000062:
0009c7 1753      	CP   R21,R19
0009c8 f010      	BRLO _0x2000067
0009c9 ff00      	SBRS R16,0
0009ca c001      	RJMP _0x2000068
                 _0x2000067:
0009cb c013      	RJMP _0x2000066
                 _0x2000068:
0009cc e220      	LDI  R18,LOW(32)
0009cd ff07      	SBRS R16,7
0009ce c00b      	RJMP _0x2000069
0009cf e320      	LDI  R18,LOW(48)
                 _0x20000CD:
0009d0 6100      	ORI  R16,LOW(16)
0009d1 ff02      	SBRS R16,2
0009d2 c007      	RJMP _0x200006A
0009d3 7f0b      	ANDI R16,LOW(251)
0009d4 934a      	ST   -Y,R20
0009d5 940e 0d1c 	CALL SUBOPT_0x42
0009d7 3050      	CPI  R21,0
0009d8 f009      	BREQ _0x200006B
0009d9 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
0009da 940e 0d0f 	CALL SUBOPT_0x40
0009dc 3050      	CPI  R21,0
0009dd f009      	BREQ _0x200006C
0009de 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
0009df 5031      	SUBI R19,LOW(1)
0009e0 85a8      	LDD  R26,Y+8
0009e1 85b9      	LDD  R27,Y+8+1
0009e2 9712      	SBIW R26,2
0009e3 f008      	BRLO _0x2000059
0009e4 cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
0009e5 ff00      	SBRS R16,0
0009e6 c008      	RJMP _0x200006D
                 _0x200006E:
0009e7 3050      	CPI  R21,0
0009e8 f031      	BREQ _0x2000070
0009e9 5051      	SUBI R21,LOW(1)
0009ea e2e0      	LDI  R30,LOW(32)
0009eb 93ea      	ST   -Y,R30
0009ec 940e 0d1c 	CALL SUBOPT_0x42
0009ee cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
0009ef e010      	LDI  R17,LOW(0)
                 _0x200001B:
0009f0 ced8      	RJMP _0x2000016
                 _0x2000018:
0009f1 85ac      	LDD  R26,Y+12
0009f2 85bd      	LDD  R27,Y+12+1
0009f3 91ed      	LD   R30,X+
0009f4 91fd      	LD   R31,X+
0009f5 940e 0d3c 	CALL __LOADLOCR6
0009f7 9664      	ADIW R28,20
0009f8 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
0009f9 92ff      	PUSH R15
0009fa 2ef8      	MOV  R15,R24
0009fb 9726      	SBIW R28,6
0009fc 940e 0d37 	CALL __SAVELOCR4
0009fe 01de      	MOVW R26,R28
0009ff 961c      	ADIW R26,12
000a00 940e 0d43 	CALL __ADDW2R15
000a02 940e 0d8b 	CALL __GETW1P
000a04 9730      	SBIW R30,0
000a05 f419      	BRNE _0x2000072
000a06 efef      	LDI  R30,LOW(65535)
000a07 efff      	LDI  R31,HIGH(65535)
000a08 c027      	RJMP _0x20C0004
                 _0x2000072:
000a09 01de      	MOVW R26,R28
000a0a 9616      	ADIW R26,6
000a0b 940e 0d43 	CALL __ADDW2R15
000a0d 018d      	MOVW R16,R26
000a0e 01de      	MOVW R26,R28
000a0f 961c      	ADIW R26,12
000a10 940e 0d43 	CALL __ADDW2R15
000a12 91ed      	LD   R30,X+
000a13 91fd      	LD   R31,X+
000a14 83ee      	STD  Y+6,R30
000a15 83ff      	STD  Y+6+1,R31
000a16 e0e0      	LDI  R30,LOW(0)
000a17 87e8      	STD  Y+8,R30
000a18 87e9      	STD  Y+8+1,R30
000a19 01de      	MOVW R26,R28
000a1a 961a      	ADIW R26,10
000a1b 940e 0d43 	CALL __ADDW2R15
000a1d 91ed      	LD   R30,X+
000a1e 91fd      	LD   R31,X+
000a1f 93fa      	ST   -Y,R31
000a20 93ea      	ST   -Y,R30
000a21 931a      	ST   -Y,R17
000a22 930a      	ST   -Y,R16
000a23 e8e3      	LDI  R30,LOW(_put_buff_G100)
000a24 e0f8      	LDI  R31,HIGH(_put_buff_G100)
000a25 93fa      	ST   -Y,R31
000a26 93ea      	ST   -Y,R30
000a27 01de      	MOVW R26,R28
000a28 961a      	ADIW R26,10
000a29 de93      	RCALL __print_G100
000a2a 019f      	MOVW R18,R30
000a2b 81ae      	LDD  R26,Y+6
000a2c 81bf      	LDD  R27,Y+6+1
000a2d e0e0      	LDI  R30,LOW(0)
000a2e 93ec      	ST   X,R30
000a2f 01f9      	MOVW R30,R18
                 _0x20C0004:
000a30 940e 0d3e 	CALL __LOADLOCR4
000a32 962a      	ADIW R28,10
000a33 90ff      	POP  R15
000a34 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000a35 93ba      	ST   -Y,R27
000a36 93aa      	ST   -Y,R26
000a37 91a9          ld   r26,y+
000a38 91b9          ld   r27,y+
000a39 27ee          clr  r30
000a3a 27ff          clr  r31
                 strlen0:
000a3b 916d          ld   r22,x+
000a3c 2366          tst  r22
000a3d f011          breq strlen1
000a3e 9631          adiw r30,1
000a3f cffb          rjmp strlen0
                 strlen1:
000a40 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000a41 93ba      	ST   -Y,R27
000a42 93aa      	ST   -Y,R26
000a43 27aa          clr  r26
000a44 27bb          clr  r27
000a45 91e9          ld   r30,y+
000a46 91f9          ld   r31,y+
                 strlenf0:
000a47 9005      	lpm  r0,z+
000a48 2000          tst  r0
000a49 f011          breq strlenf1
000a4a 9611          adiw r26,1
000a4b cffb          rjmp strlenf0
                 strlenf1:
000a4c 01fd          movw r30,r26
000a4d 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 _abs:
                 ; .FSTART _abs
000a4e 93ba      	ST   -Y,R27
000a4f 93aa      	ST   -Y,R26
000a50 91e9          ld   r30,y+
000a51 91f9          ld   r31,y+
000a52 9730          sbiw r30,0
000a53 f41a          brpl __abs0
000a54 95e0          com  r30
000a55 95f0          com  r31
000a56 9631          adiw r30,1
                 __abs0:
000a57 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                     .equ __lcd_direction=__lcd_port-1
                     .equ __lcd_pin=__lcd_port-2
                     .equ __lcd_rs=0
                     .equ __lcd_rd=1
                     .equ __lcd_enable=2
                     .equ __lcd_busy_flag=7
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_delay_G103:
                 ; .FSTART __lcd_delay_G103
000a58 e0ff          ldi   r31,15
                 __lcd_delay0:
000a59 95fa          dec   r31
000a5a f7f1          brne  __lcd_delay0
000a5b 9508      	RET
                 ; .FEND
                 __lcd_ready:
                 ; .FSTART __lcd_ready
000a5c b3a7          in    r26,__lcd_direction
000a5d 70af          andi  r26,0xf                 ;set as input
000a5e bba7          out   __lcd_direction,r26
000a5f 9ac1          sbi   __lcd_port,__lcd_rd     ;RD=1
000a60 98c0          cbi   __lcd_port,__lcd_rs     ;RS=0
                 __lcd_busy:
000a61 dff6      	RCALL __lcd_delay_G103
000a62 9ac2          sbi   __lcd_port,__lcd_enable ;EN=1
000a63 dff4      	RCALL __lcd_delay_G103
000a64 b3a6          in    r26,__lcd_pin
000a65 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
000a66 dff1      	RCALL __lcd_delay_G103
000a67 9ac2          sbi   __lcd_port,__lcd_enable ;EN=1
000a68 dfef      	RCALL __lcd_delay_G103
000a69 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
000a6a fda7          sbrc  r26,__lcd_busy_flag
000a6b cff5          rjmp  __lcd_busy
000a6c 9508      	RET
                 ; .FEND
                 __lcd_write_nibble_G103:
                 ; .FSTART __lcd_write_nibble_G103
000a6d 7fa0          andi  r26,0xf0
000a6e 2bab          or    r26,r27
000a6f bba8          out   __lcd_port,r26          ;write
000a70 9ac2          sbi   __lcd_port,__lcd_enable ;EN=1
000a71 940e 0a58 	CALL __lcd_delay_G103
000a73 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
000a74 940e 0a58 	CALL __lcd_delay_G103
000a76 9508      	RET
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000a77 93aa      	ST   -Y,R26
000a78 98c1          cbi  __lcd_port,__lcd_rd 	  ;RD=0
000a79 b3a7          in    r26,__lcd_direction
000a7a 6fa7          ori   r26,0xf0 | (1<<__lcd_rs) | (1<<__lcd_rd) | (1<<__lcd_enable) ;set as output
000a7b bba7          out   __lcd_direction,r26
000a7c b3b8          in    r27,__lcd_port
000a7d 70bf          andi  r27,0xf
000a7e 81a8          ld    r26,y
000a7f dfed      	RCALL __lcd_write_nibble_G103
000a80 81a8          ld    r26,y
000a81 95a2          swap  r26
000a82 dfea      	RCALL __lcd_write_nibble_G103
000a83 9ac1          sbi   __lcd_port,__lcd_rd     ;RD=1
000a84 940c 0b4d 	JMP  _0x20C0001
                 ; .FEND
                 __lcd_read_nibble_G103:
                 ; .FSTART __lcd_read_nibble_G103
000a86 9ac2          sbi   __lcd_port,__lcd_enable ;EN=1
000a87 940e 0a58 	CALL __lcd_delay_G103
000a89 b3e6          in    r30,__lcd_pin           ;read
000a8a 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
000a8b 940e 0a58 	CALL __lcd_delay_G103
000a8d 7fe0          andi  r30,0xf0
000a8e 9508      	RET
                 ; .FEND
                 _lcd_read_byte0_G103:
                 ; .FSTART _lcd_read_byte0_G103
000a8f 940e 0a58 	CALL __lcd_delay_G103
000a91 dff4      	RCALL __lcd_read_nibble_G103
000a92 2fae          mov   r26,r30
000a93 dff2      	RCALL __lcd_read_nibble_G103
000a94 98c1          cbi   __lcd_port,__lcd_rd     ;RD=0
000a95 95e2          swap  r30
000a96 2bea          or    r30,r26
000a97 9508      	RET
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000a98 93aa      	ST   -Y,R26
000a99 940e 0a5c 	CALL __lcd_ready
000a9b 81e8      	LD   R30,Y
000a9c e0f0      	LDI  R31,0
000a9d 54e6      	SUBI R30,LOW(-__base_y_G103)
000a9e 4ffd      	SBCI R31,HIGH(-__base_y_G103)
000a9f 81e0      	LD   R30,Z
000aa0 81a9      	LDD  R26,Y+1
000aa1 0fae      	ADD  R26,R30
000aa2 940e 0a77 	CALL __lcd_write_data
000aa4 81e9      	LDD  R30,Y+1
000aa5 93e0 02be 	STS  __lcd_x,R30
000aa7 81e8      	LD   R30,Y
000aa8 93e0 02bf 	STS  __lcd_y,R30
                 _0x20C0003:
000aaa 9622      	ADIW R28,2
000aab 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000aac 940e 0a5c 	CALL __lcd_ready
000aae e0a2      	LDI  R26,LOW(2)
000aaf 940e 0a77 	CALL __lcd_write_data
000ab1 940e 0a5c 	CALL __lcd_ready
000ab3 e0ac      	LDI  R26,LOW(12)
000ab4 940e 0a77 	CALL __lcd_write_data
000ab6 940e 0a5c 	CALL __lcd_ready
000ab8 e0a1      	LDI  R26,LOW(1)
000ab9 940e 0a77 	CALL __lcd_write_data
000abb e0e0      	LDI  R30,LOW(0)
000abc 93e0 02bf 	STS  __lcd_y,R30
000abe 93e0 02be 	STS  __lcd_x,R30
000ac0 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000ac1 93aa      	ST   -Y,R26
000ac2 93ef          push r30
000ac3 93ff          push r31
000ac4 81a8          ld   r26,y
000ac5 9468          set
000ac6 30aa          cpi  r26,10
000ac7 f039          breq __lcd_putchar1
000ac8 94e8          clt
000ac9 91e0 02c0 	LDS  R30,__lcd_maxx
000acb 91a0 02be 	LDS  R26,__lcd_x
000acd 17ae      	CP   R26,R30
000ace f058      	BRLO _0x2060004
                 	__lcd_putchar1:
000acf 91e0 02bf 	LDS  R30,__lcd_y
000ad1 5fef      	SUBI R30,-LOW(1)
000ad2 93e0 02bf 	STS  __lcd_y,R30
000ad4 e0e0      	LDI  R30,LOW(0)
000ad5 93ea      	ST   -Y,R30
000ad6 91a0 02bf 	LDS  R26,__lcd_y
000ad8 dfbf      	RCALL _lcd_gotoxy
000ad9 f056      	brts __lcd_putchar0
                 _0x2060004:
000ada 91e0 02be 	LDS  R30,__lcd_x
000adc 5fef      	SUBI R30,-LOW(1)
000add 93e0 02be 	STS  __lcd_x,R30
000adf df7c          rcall __lcd_ready
000ae0 9ac0          sbi  __lcd_port,__lcd_rs ;RS=1
000ae1 81a8      	LD   R26,Y
000ae2 940e 0a77 	CALL __lcd_write_data
                 __lcd_putchar0:
000ae4 91ff          pop  r31
000ae5 91ef          pop  r30
000ae6 940c 0b4d 	JMP  _0x20C0001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000ae8 93ba      	ST   -Y,R27
000ae9 93aa      	ST   -Y,R26
000aea 931a      	ST   -Y,R17
                 _0x2060005:
000aeb 81a9      	LDD  R26,Y+1
000aec 81ba      	LDD  R27,Y+1+1
000aed 91ed      	LD   R30,X+
000aee 83a9      	STD  Y+1,R26
000aef 83ba      	STD  Y+1+1,R27
000af0 2f1e      	MOV  R17,R30
000af1 30e0      	CPI  R30,0
000af2 f019      	BREQ _0x2060007
000af3 2fa1      	MOV  R26,R17
000af4 dfcc      	RCALL _lcd_putchar
000af5 cff5      	RJMP _0x2060005
                 _0x2060007:
000af6 c010      	RJMP _0x20C0002
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
000af7 93ba      	ST   -Y,R27
000af8 93aa      	ST   -Y,R26
000af9 931a      	ST   -Y,R17
                 _0x2060008:
000afa 81e9      	LDD  R30,Y+1
000afb 81fa      	LDD  R31,Y+1+1
000afc 9631      	ADIW R30,1
000afd 83e9      	STD  Y+1,R30
000afe 83fa      	STD  Y+1+1,R31
000aff 9731      	SBIW R30,1
000b00 91e4      	LPM  R30,Z
000b01 2f1e      	MOV  R17,R30
000b02 30e0      	CPI  R30,0
000b03 f019      	BREQ _0x206000A
000b04 2fa1      	MOV  R26,R17
000b05 dfbb      	RCALL _lcd_putchar
000b06 cff3      	RJMP _0x2060008
                 _0x206000A:
                 _0x20C0002:
000b07 8118      	LDD  R17,Y+0
000b08 9623      	ADIW R28,3
000b09 9508      	RET
                 ; .FEND
                 __long_delay_G103:
                 ; .FSTART __long_delay_G103
000b0a 27aa          clr   r26
000b0b 27bb          clr   r27
                 __long_delay0:
000b0c 9711          sbiw  r26,1         ;2 cycles
000b0d f7f1          brne  __long_delay0 ;2 cycles
000b0e 9508      	RET
                 ; .FEND
                 __lcd_init_write_G103:
                 ; .FSTART __lcd_init_write_G103
000b0f 93aa      	ST   -Y,R26
000b10 98c1          cbi  __lcd_port,__lcd_rd 	  ;RD=0
000b11 b3a7          in    r26,__lcd_direction
000b12 6fa7          ori   r26,0xf7                ;set as output
000b13 bba7          out   __lcd_direction,r26
000b14 b3b8          in    r27,__lcd_port
000b15 70bf          andi  r27,0xf
000b16 81a8          ld    r26,y
000b17 940e 0a6d 	CALL __lcd_write_nibble_G103
000b19 9ac1          sbi   __lcd_port,__lcd_rd     ;RD=1
000b1a c032      	RJMP _0x20C0001
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000b1b 93aa      	ST   -Y,R26
000b1c 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
000b1d 98c0          cbi   __lcd_port,__lcd_rs     ;RS=0
000b1e 81e8      	LD   R30,Y
000b1f 93e0 02c0 	STS  __lcd_maxx,R30
000b21 58e0      	SUBI R30,-LOW(128)
                +
000b22 93e0 02bc+STS __base_y_G103 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G103,2
000b24 81e8      	LD   R30,Y
000b25 54e0      	SUBI R30,-LOW(192)
                +
000b26 93e0 02bd+STS __base_y_G103 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G103,3
000b28 940e 0d2c 	CALL SUBOPT_0x44
000b2a 940e 0d2c 	CALL SUBOPT_0x44
000b2c 940e 0d2c 	CALL SUBOPT_0x44
000b2e dfdb      	RCALL __long_delay_G103
000b2f e2a0      	LDI  R26,LOW(32)
000b30 dfde      	RCALL __lcd_init_write_G103
000b31 dfd8      	RCALL __long_delay_G103
000b32 e2a8      	LDI  R26,LOW(40)
000b33 940e 0d31 	CALL SUBOPT_0x45
000b35 e0a4      	LDI  R26,LOW(4)
000b36 940e 0d31 	CALL SUBOPT_0x45
000b38 e8a5      	LDI  R26,LOW(133)
000b39 940e 0d31 	CALL SUBOPT_0x45
000b3b b3a7          in    r26,__lcd_direction
000b3c 70af          andi  r26,0xf                 ;set as input
000b3d bba7          out   __lcd_direction,r26
000b3e 9ac1          sbi   __lcd_port,__lcd_rd     ;RD=1
000b3f 940e 0a8f 	CALL _lcd_read_byte0_G103
000b41 30e5      	CPI  R30,LOW(0x5)
000b42 f011      	BREQ _0x206000B
000b43 e0e0      	LDI  R30,LOW(0)
000b44 c008      	RJMP _0x20C0001
                 _0x206000B:
000b45 940e 0a5c 	CALL __lcd_ready
000b47 e0a6      	LDI  R26,LOW(6)
000b48 940e 0a77 	CALL __lcd_write_data
000b4a 940e 0aac 	CALL _lcd_clear
000b4c e0e1      	LDI  R30,LOW(1)
                 _0x20C0001:
000b4d 9621      	ADIW R28,1
000b4e 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _buff:
000260           	.BYTE 0x21
                 _k:
000281           	.BYTE 0x2
                 _pos_servo1:
000283           	.BYTE 0x1
                 _pos_servo2:
000284           	.BYTE 0x1
                 _pos_gulung:
000285           	.BYTE 0x1
                 _a:
000286           	.BYTE 0x1
                 _count_btn:
000287           	.BYTE 0x2
                 _count_child_btn:
000289           	.BYTE 0x2
                 _isChildSelect:
00028b           	.BYTE 0x1
                 _isTestTombol:
00028c           	.BYTE 0x1
                 
                 	.ESEG
                 _garis:
000000           	.BYTE 0xE
                 _back:
00000e           	.BYTE 0xE
                 _tengah:
00001c           	.BYTE 0xE
                 _mapMirror:
00002a           	.BYTE 0x2
                 _positionD:
00002c           	.BYTE 0x2
                 
                 	.DSEG
                 _sen:
00028d           	.BYTE 0x7
                 _sensor:
000294           	.BYTE 0x2
                 _error:
000296           	.BYTE 0x2
                 _lastError:
000298           	.BYTE 0x2
                 _kp:
00029a           	.BYTE 0x2
                 _kd:
00029c           	.BYTE 0x2
                 _SPEED:
00029e           	.BYTE 0x2
                 _MIN_SPEED:
0002a0           	.BYTE 0x2
                 _MAX_SPEED:
0002a2           	.BYTE 0x2
                 _count:
0002a4           	.BYTE 0x2
                 _second:
0002a6           	.BYTE 0x2
                 _maxHijau:
0002a8           	.BYTE 0x2
                 _maxKuning:
0002aa           	.BYTE 0x2
                 _maxMerah:
0002ac           	.BYTE 0x2
                 _minHijau:
0002ae           	.BYTE 0x2
                 _minKuning:
0002b0           	.BYTE 0x2
                 _minMerah:
0002b2           	.BYTE 0x2
                 _isWarna:
0002b4           	.BYTE 0x2
                 __seed_G102:
0002b6           	.BYTE 0x4
                 __base_y_G103:
0002ba           	.BYTE 0x4
                 __lcd_x:
0002be           	.BYTE 0x1
                 __lcd_y:
0002bf           	.BYTE 0x1
                 __lcd_maxx:
0002c0           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
000b4f e0e7      	LDI  R30,LOW(7)
000b50 e0f0      	LDI  R31,HIGH(7)
000b51 16ce      	CP   R12,R30
000b52 06df      	CPC  R13,R31
000b53 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x1:
000b54 2dac      	MOV  R26,R12
000b55 940e 015c 	CALL _read_adc
000b57 2e0e      	MOV  R0,R30
000b58 01f6      	MOVW R30,R12
000b59 e1ac      	LDI  R26,LOW(_tengah)
000b5a e0b0      	LDI  R27,HIGH(_tengah)
000b5b 0fee      	LSL  R30
000b5c 1fff      	ROL  R31
000b5d 0fae      	ADD  R26,R30
000b5e 1fbf      	ADC  R27,R31
000b5f 940e 0d98 	CALL __EEPROMRDW
000b61 2da0      	MOV  R26,R0
000b62 e0b0      	LDI  R27,0
000b63 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2:
000b64 9fea      	MUL  R30,R26
000b65 01f0      	MOVW R30,R0
                +
000b66 0f6e     +ADD R22 , R30
000b67 1f7f     +ADC R23 , R31
                 	__ADDWRR 22,23,30,31
000b68 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 16 TIMES, CODE SIZE REDUCTION:27 WORDS
                 SUBOPT_0x3:
000b69 93ea      	ST   -Y,R30
000b6a e0a0      	LDI  R26,LOW(0)
000b6b 940c 0a98 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x4:
000b6d e6e0      	LDI  R30,LOW(_buff)
000b6e e0f2      	LDI  R31,HIGH(_buff)
000b6f 93fa      	ST   -Y,R31
000b70 93ea      	ST   -Y,R30
000b71 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x5:
000b72 27ff      	CLR  R31
000b73 2766      	CLR  R22
000b74 2777      	CLR  R23
000b75 940e 0d93 	CALL __PUTPARD1
000b77 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6:
000b78 01f6      	MOVW R30,R12
000b79 e0a0      	LDI  R26,LOW(_garis)
000b7a e0b0      	LDI  R27,HIGH(_garis)
000b7b 0fee      	LSL  R30
000b7c 1fff      	ROL  R31
000b7d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
000b7e e0f0      	LDI  R31,0
000b7f 940e 0da8 	CALL __EEPROMWRW
000b81 e0e0      	LDI  R30,LOW(0)
000b82 cfe6      	RJMP SUBOPT_0x3
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x8:
000b83 940e 0af7 	CALL _lcd_putsf
000b85 e0e0      	LDI  R30,LOW(0)
000b86 93ea      	ST   -Y,R30
000b87 e0a1      	LDI  R26,LOW(1)
000b88 940e 0a98 	CALL _lcd_gotoxy
000b8a cfe2      	RJMP SUBOPT_0x4
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x9:
                +
000b8b eae1     +LDI R30 , LOW ( 2 * _0x0 + ( 25 ) )
000b8c e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 25 ) )
                 	__POINTW1FN _0x0,25
000b8d 93fa      	ST   -Y,R31
000b8e 93ea      	ST   -Y,R30
000b8f 01f6      	MOVW R30,R12
000b90 940e 0d53 	CALL __CWD1
000b92 940e 0d93 	CALL __PUTPARD1
000b94 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0xA:
000b95 0fae      	ADD  R26,R30
000b96 1fbf      	ADC  R27,R31
000b97 940e 0d98 	CALL __EEPROMRDW
000b99 940e 0d53 	CALL __CWD1
000b9b 940e 0d93 	CALL __PUTPARD1
000b9d e088      	LDI  R24,8
000b9e 940e 09f9 	CALL _sprintf
000ba0 962c      	ADIW R28,12
000ba1 e6a0      	LDI  R26,LOW(_buff)
000ba2 e0b2      	LDI  R27,HIGH(_buff)
000ba3 940e 0ae8 	CALL _lcd_puts
000ba5 98c3      	CBI  0x18,3
000ba6 e0aa      	LDI  R26,LOW(10)
000ba7 e0b0      	LDI  R27,0
000ba8 940e 0eac 	CALL _delay_ms
000baa 9ac3      	SBI  0x18,3
000bab 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xB:
000bac 01f6      	MOVW R30,R12
000bad e0ae      	LDI  R26,LOW(_back)
000bae e0b0      	LDI  R27,HIGH(_back)
000baf 0fee      	LSL  R30
000bb0 1fff      	ROL  R31
000bb1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xC:
000bb2 0fae      	ADD  R26,R30
000bb3 1fbf      	ADC  R27,R31
000bb4 940e 0d98 	CALL __EEPROMRDW
000bb6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0xD:
000bb7 93aa      	ST   -Y,R26
000bb8 81e8      	LD   R30,Y
000bb9 e0f0      	LDI  R31,0
000bba bdf9      	OUT  0x28+1,R31
000bbb bde8      	OUT  0x28,R30
000bbc 81e9      	LDD  R30,Y+1
000bbd e0f0      	LDI  R31,0
000bbe bdfb      	OUT  0x2A+1,R31
000bbf bdea      	OUT  0x2A,R30
000bc0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
000bc1 81a8      	LD   R26,Y
000bc2 81b9      	LDD  R27,Y+1
000bc3 940e 0dc1 	CALL __CPW02
000bc5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xF:
000bc6 81a8      	LD   R26,Y
000bc7 81b9      	LDD  R27,Y+1
000bc8 940c 0167 	JMP  _delay
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x10:
000bca 81e8      	LD   R30,Y
000bcb 81f9      	LDD  R31,Y+1
000bcc 940e 0d53 	CALL __CWD1
000bce 940e 0e31 	CALL __CDF1
000bd0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x11:
000bd1 940e 0dfa 	CALL __CFD1
000bd3 93ed      	ST   X+,R30
000bd4 93fc      	ST   X,R31
000bd5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x12:
000bd6 91e0 0294 	LDS  R30,_sensor
000bd8 91f0 0295 	LDS  R31,_sensor+1
000bda 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x13:
000bdb 91e0 02a2 	LDS  R30,_MAX_SPEED
000bdd 91f0 02a3 	LDS  R31,_MAX_SPEED+1
000bdf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x14:
000be0 91e0 02a0 	LDS  R30,_MIN_SPEED
000be2 91f0 02a1 	LDS  R31,_MIN_SPEED+1
000be4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x15:
000be5 dff0      	RCALL SUBOPT_0x12
000be6 71ec      	ANDI R30,LOW(0x1C)
000be7 31ec      	CPI  R30,LOW(0x1C)
000be8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x16:
000be9 91ed      	LD   R30,X+
000bea 91fd      	LD   R31,X+
000beb 9631      	ADIW R30,1
000bec 93fe      	ST   -X,R31
000bed 93ee      	ST   -X,R30
000bee 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x17:
000bef 81a8      	LD   R26,Y
000bf0 81b9      	LDD  R27,Y+1
000bf1 940c 02b6 	JMP  _rem
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x18:
000bf3 81ea      	LDD  R30,Y+2
000bf4 93ea      	ST   -Y,R30
000bf5 81ab      	LDD  R26,Y+3
000bf6 940e 0286 	CALL _kiri
000bf8 940c 01b8 	JMP  _cek_sensor
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x19:
000bfa 81ea      	LDD  R30,Y+2
000bfb 93ea      	ST   -Y,R30
000bfc 81ab      	LDD  R26,Y+3
000bfd 940e 027f 	CALL _kanan
000bff 940c 01b8 	JMP  _cek_sensor
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1A:
000c01 93ba      	ST   -Y,R27
000c02 93aa      	ST   -Y,R26
000c03 e2aa      	LDI  R26,LOW(_mapMirror)
000c04 e0b0      	LDI  R27,HIGH(_mapMirror)
000c05 940e 0d98 	CALL __EEPROMRDW
000c07 9730      	SBIW R30,0
000c08 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1B:
000c09 81ea      	LDD  R30,Y+2
000c0a 81fb      	LDD  R31,Y+2+1
000c0b 93fa      	ST   -Y,R31
000c0c 93ea      	ST   -Y,R30
000c0d 81aa      	LDD  R26,Y+2
000c0e 81bb      	LDD  R27,Y+2+1
000c0f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 18 TIMES, CODE SIZE REDUCTION:31 WORDS
                 SUBOPT_0x1C:
000c10 93ea      	ST   -Y,R30
000c11 e0a1      	LDI  R26,LOW(1)
000c12 940c 0a98 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x1D:
000c14 e0e2      	LDI  R30,LOW(2)
000c15 e0f0      	LDI  R31,HIGH(2)
000c16 93fa      	ST   -Y,R31
000c17 93ea      	ST   -Y,R30
000c18 e7a8      	LDI  R26,LOW(120)
000c19 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:37 WORDS
                 SUBOPT_0x1E:
000c1a e0b0      	LDI  R27,0
000c1b 940e 03dc 	CALL _scanX
000c1d e0e1      	LDI  R30,LOW(1)
000c1e e0f0      	LDI  R31,HIGH(1)
000c1f 93fa      	ST   -Y,R31
000c20 93ea      	ST   -Y,R30
000c21 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 17 TIMES, CODE SIZE REDUCTION:29 WORDS
                 SUBOPT_0x1F:
000c22 e5a0      	LDI  R26,LOW(80)
000c23 e0b0      	LDI  R27,0
000c24 940c 03dc 	JMP  _scanX
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:22 WORDS
                 SUBOPT_0x20:
000c26 93fa      	ST   -Y,R31
000c27 93ea      	ST   -Y,R30
000c28 e5e0      	LDI  R30,LOW(80)
000c29 e0f0      	LDI  R31,HIGH(80)
000c2a 93fa      	ST   -Y,R31
000c2b 93ea      	ST   -Y,R30
000c2c e3a2      	LDI  R26,LOW(50)
000c2d e0b0      	LDI  R27,0
000c2e 940e 0400 	CALL _scanTimer
000c30 e1a4      	LDI  R26,LOW(20)
000c31 e0b0      	LDI  R27,0
000c32 940e 0481 	CALL _taruh
000c34 e6e4      	LDI  R30,LOW(100)
000c35 93ea      	ST   -Y,R30
000c36 e6a4      	LDI  R26,LOW(100)
000c37 940e 0278 	CALL _mundur
000c39 e0aa      	LDI  R26,LOW(10)
000c3a e0b0      	LDI  R27,0
000c3b 940e 0167 	CALL _delay
000c3d e6e4      	LDI  R30,LOW(100)
000c3e e0f0      	LDI  R31,HIGH(100)
000c3f 93fa      	ST   -Y,R31
000c40 93ea      	ST   -Y,R30
000c41 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x21:
000c42 e0aa      	LDI  R26,LOW(10)
000c43 e0b0      	LDI  R27,0
000c44 940c 0468 	JMP  _belokKiri
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 14 TIMES, CODE SIZE REDUCTION:23 WORDS
                 SUBOPT_0x22:
000c46 e0e1      	LDI  R30,LOW(1)
000c47 e0f0      	LDI  R31,HIGH(1)
000c48 93fa      	ST   -Y,R31
000c49 93ea      	ST   -Y,R30
000c4a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:27 WORDS
                 SUBOPT_0x23:
000c4b e6a4      	LDI  R26,LOW(100)
000c4c e0b0      	LDI  R27,0
000c4d 940e 03dc 	CALL _scanX
000c4f e6e4      	LDI  R30,LOW(100)
000c50 e0f0      	LDI  R31,HIGH(100)
000c51 93fa      	ST   -Y,R31
000c52 93ea      	ST   -Y,R30
000c53 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 16 TIMES, CODE SIZE REDUCTION:27 WORDS
                 SUBOPT_0x24:
000c54 e6e4      	LDI  R30,LOW(100)
000c55 e0f0      	LDI  R31,HIGH(100)
000c56 93fa      	ST   -Y,R31
000c57 93ea      	ST   -Y,R30
000c58 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x25:
000c59 e0aa      	LDI  R26,LOW(10)
000c5a e0b0      	LDI  R27,0
000c5b 940c 045d 	JMP  _belokKanan
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:35 WORDS
                 SUBOPT_0x26:
000c5d e2e3      	LDI  R30,LOW(35)
000c5e e0f0      	LDI  R31,HIGH(35)
000c5f 93fa      	ST   -Y,R31
000c60 93ea      	ST   -Y,R30
000c61 e5ef      	LDI  R30,LOW(95)
000c62 e0f0      	LDI  R31,HIGH(95)
000c63 93fa      	ST   -Y,R31
000c64 93ea      	ST   -Y,R30
000c65 e3a2      	LDI  R26,LOW(50)
000c66 e0b0      	LDI  R27,0
000c67 940e 0400 	CALL _scanTimer
000c69 e1a4      	LDI  R26,LOW(20)
000c6a e0b0      	LDI  R27,0
000c6b 940e 0481 	CALL _taruh
000c6d e6e4      	LDI  R30,LOW(100)
000c6e 93ea      	ST   -Y,R30
000c6f e6a4      	LDI  R26,LOW(100)
000c70 940c 0278 	JMP  _mundur
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x27:
000c72 e0aa      	LDI  R26,LOW(10)
000c73 e0b0      	LDI  R27,0
000c74 940e 0167 	CALL _delay
000c76 cfdd      	RJMP SUBOPT_0x24
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x28:
000c77 e0a0      	LDI  R26,LOW(0)
000c78 e0b0      	LDI  R27,0
000c79 940e 0468 	CALL _belokKiri
000c7b cfd8      	RJMP SUBOPT_0x24
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x29:
000c7c e0e4      	LDI  R30,LOW(4)
000c7d e0f0      	LDI  R31,HIGH(4)
000c7e 93fa      	ST   -Y,R31
000c7f 93ea      	ST   -Y,R30
000c80 e9a6      	LDI  R26,LOW(150)
000c81 cf98      	RJMP SUBOPT_0x1E
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2A:
000c82 e0a0      	LDI  R26,LOW(0)
000c83 e0b0      	LDI  R27,0
000c84 940e 045d 	CALL _belokKanan
000c86 cfcd      	RJMP SUBOPT_0x24
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x2B:
000c87 e1a4      	LDI  R26,LOW(20)
000c88 e0b0      	LDI  R27,0
000c89 940c 045d 	JMP  _belokKanan
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2C:
000c8b e2ed      	LDI  R30,LOW(45)
000c8c e0f0      	LDI  R31,HIGH(45)
000c8d 93fa      	ST   -Y,R31
000c8e 93ea      	ST   -Y,R30
000c8f e5ef      	LDI  R30,LOW(95)
000c90 e0f0      	LDI  R31,HIGH(95)
000c91 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2D:
000c92 e0e2      	LDI  R30,LOW(2)
000c93 e0f0      	LDI  R31,HIGH(2)
000c94 93fa      	ST   -Y,R31
000c95 93ea      	ST   -Y,R30
000c96 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2E:
000c97 e0e3      	LDI  R30,LOW(3)
000c98 e0f0      	LDI  R31,HIGH(3)
000c99 93fa      	ST   -Y,R31
000c9a 93ea      	ST   -Y,R30
000c9b e9a6      	LDI  R26,LOW(150)
000c9c cf7d      	RJMP SUBOPT_0x1E
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2F:
000c9d 93fa      	ST   -Y,R31
000c9e 93ea      	ST   -Y,R30
000c9f e3a2      	LDI  R26,LOW(50)
000ca0 e0b0      	LDI  R27,0
000ca1 940e 0400 	CALL _scanTimer
000ca3 e1a4      	LDI  R26,LOW(20)
000ca4 e0b0      	LDI  R27,0
000ca5 940c 0481 	JMP  _taruh
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x30:
000ca7 e6e4      	LDI  R30,LOW(100)
000ca8 93ea      	ST   -Y,R30
000ca9 e6a4      	LDI  R26,LOW(100)
000caa 940e 0278 	CALL _mundur
000cac cfc5      	RJMP SUBOPT_0x27
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x31:
000cad e0b0      	LDI  R27,0
000cae 940e 03dc 	CALL _scanX
000cb0 940e 0492 	CALL _bawah_lepas
000cb2 cf93      	RJMP SUBOPT_0x22
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x32:
000cb3 e3a2      	LDI  R26,LOW(50)
000cb4 e0b0      	LDI  R27,0
000cb5 940e 0400 	CALL _scanTimer
000cb7 e1a4      	LDI  R26,LOW(20)
000cb8 e0b0      	LDI  R27,0
000cb9 940c 0474 	JMP  _ambil
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:23 WORDS
                 SUBOPT_0x33:
000cbb e3a2      	LDI  R26,LOW(50)
000cbc e0b0      	LDI  R27,0
000cbd 940e 0167 	CALL _delay
000cbf 940e 04b4 	CALL _checkWarna
000cc1 93e0 02b4 	STS  _isWarna,R30
000cc3 93f0 02b5 	STS  _isWarna+1,R31
000cc5 9730      	SBIW R30,0
000cc6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x34:
000cc7 91a0 02b4 	LDS  R26,_isWarna
000cc9 91b0 02b5 	LDS  R27,_isWarna+1
000ccb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x35:
000ccc 940e 0aac 	CALL _lcd_clear
000cce e0e0      	LDI  R30,LOW(0)
000ccf ce99      	RJMP SUBOPT_0x3
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x36:
                +
000cd0 efa1     +LDI R26 , LOW ( 2 * _0x0 + ( 105 ) )
000cd1 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 105 ) )
                 	__POINTW2FN _0x0,105
000cd2 940c 0af7 	JMP  _lcd_putsf
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x37:
000cd4 e0e0      	LDI  R30,LOW(0)
000cd5 93e0 0289 	STS  _count_child_btn,R30
000cd7 93e0 028a 	STS  _count_child_btn+1,R30
000cd9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x38:
000cda 93fa      	ST   -Y,R31
000cdb 93ea      	ST   -Y,R30
000cdc e0e0      	LDI  R30,LOW(0)
000cdd 93ea      	ST   -Y,R30
000cde e0a0      	LDI  R26,LOW(0)
000cdf e0b0      	LDI  R27,0
000ce0 940c 063a 	JMP  _changeMenu
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x39:
000ce2 940e 0af7 	CALL _lcd_putsf
000ce4 e0e0      	LDI  R30,LOW(0)
000ce5 cf2a      	RJMP SUBOPT_0x1C
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3A:
000ce6 e2aa      	LDI  R26,LOW(_mapMirror)
000ce7 e0b0      	LDI  R27,HIGH(_mapMirror)
000ce8 e0e0      	LDI  R30,LOW(0)
000ce9 e0f0      	LDI  R31,HIGH(0)
000cea 940e 0da8 	CALL __EEPROMWRW
000cec 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3B:
000ced e0e0      	LDI  R30,LOW(0)
000cee 93ea      	ST   -Y,R30
000cef e0a0      	LDI  R26,LOW(0)
000cf0 e0b0      	LDI  R27,0
000cf1 940c 063a 	JMP  _changeMenu
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x3C:
000cf3 940e 0271 	CALL _maju
000cf5 e3a2      	LDI  R26,LOW(50)
000cf6 e0b0      	LDI  R27,0
000cf7 940e 0eac 	CALL _delay_ms
000cf9 e0e0      	LDI  R30,LOW(0)
000cfa cf15      	RJMP SUBOPT_0x1C
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3D:
000cfb 940e 0af7 	CALL _lcd_putsf
000cfd e6a4      	LDI  R26,LOW(100)
000cfe e0b0      	LDI  R27,0
000cff 940c 0eac 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3E:
000d01 91e0 0287 	LDS  R30,_count_btn
000d03 91f0 0288 	LDS  R31,_count_btn+1
000d05 93fa      	ST   -Y,R31
000d06 93ea      	ST   -Y,R30
000d07 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x3F:
000d08 93ea      	ST   -Y,R30
000d09 91a0 0289 	LDS  R26,_count_child_btn
000d0b 91b0 028a 	LDS  R27,_count_child_btn+1
000d0d 940c 063a 	JMP  _changeMenu
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x40:
000d0f 932a      	ST   -Y,R18
000d10 85ad      	LDD  R26,Y+13
000d11 85be      	LDD  R27,Y+13+1
000d12 85ef      	LDD  R30,Y+15
000d13 89f8      	LDD  R31,Y+15+1
000d14 9509      	ICALL
000d15 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x41:
000d16 89e8      	LDD  R30,Y+16
000d17 89f9      	LDD  R31,Y+16+1
000d18 9734      	SBIW R30,4
000d19 8be8      	STD  Y+16,R30
000d1a 8bf9      	STD  Y+16+1,R31
000d1b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x42:
000d1c 85ad      	LDD  R26,Y+13
000d1d 85be      	LDD  R27,Y+13+1
000d1e 85ef      	LDD  R30,Y+15
000d1f 89f8      	LDD  R31,Y+15+1
000d20 9509      	ICALL
000d21 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x43:
000d22 89a8      	LDD  R26,Y+16
000d23 89b9      	LDD  R27,Y+16+1
000d24 9614      	ADIW R26,4
000d25 91ed      	LD   R30,X+
000d26 91fd      	LD   R31,X+
000d27 83ee      	STD  Y+6,R30
000d28 83ff      	STD  Y+6+1,R31
000d29 81ae      	LDD  R26,Y+6
000d2a 81bf      	LDD  R27,Y+6+1
000d2b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x44:
000d2c 940e 0b0a 	CALL __long_delay_G103
000d2e e3a0      	LDI  R26,LOW(48)
000d2f 940c 0b0f 	JMP  __lcd_init_write_G103
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x45:
000d31 940e 0a77 	CALL __lcd_write_data
000d33 940c 0b0a 	JMP  __long_delay_G103
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
000d35 935a      	ST   -Y,R21
                 __SAVELOCR5:
000d36 934a      	ST   -Y,R20
                 __SAVELOCR4:
000d37 933a      	ST   -Y,R19
                 __SAVELOCR3:
000d38 932a      	ST   -Y,R18
                 __SAVELOCR2:
000d39 931a      	ST   -Y,R17
000d3a 930a      	ST   -Y,R16
000d3b 9508      	RET
                 
                 __LOADLOCR6:
000d3c 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000d3d 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000d3e 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000d3f 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000d40 8119      	LDD  R17,Y+1
000d41 8108      	LD   R16,Y
000d42 9508      	RET
                 
                 __ADDW2R15:
000d43 2400      	CLR  R0
000d44 0daf      	ADD  R26,R15
000d45 1db0      	ADC  R27,R0
000d46 9508      	RET
                 
                 __ANEGW1:
000d47 95f1      	NEG  R31
000d48 95e1      	NEG  R30
000d49 40f0      	SBCI R31,0
000d4a 9508      	RET
                 
                 __ANEGD1:
000d4b 95f0      	COM  R31
000d4c 9560      	COM  R22
000d4d 9570      	COM  R23
000d4e 95e1      	NEG  R30
000d4f 4fff      	SBCI R31,-1
000d50 4f6f      	SBCI R22,-1
000d51 4f7f      	SBCI R23,-1
000d52 9508      	RET
                 
                 __CWD1:
000d53 2f6f      	MOV  R22,R31
000d54 0f66      	ADD  R22,R22
000d55 0b66      	SBC  R22,R22
000d56 2f76      	MOV  R23,R22
000d57 9508      	RET
                 
                 __MULW12U:
000d58 9ffa      	MUL  R31,R26
000d59 2df0      	MOV  R31,R0
000d5a 9feb      	MUL  R30,R27
000d5b 0df0      	ADD  R31,R0
000d5c 9fea      	MUL  R30,R26
000d5d 2de0      	MOV  R30,R0
000d5e 0df1      	ADD  R31,R1
000d5f 9508      	RET
                 
                 __MULW12:
000d60 d01c      	RCALL __CHKSIGNW
000d61 dff6      	RCALL __MULW12U
000d62 f40e      	BRTC __MULW121
000d63 dfe3      	RCALL __ANEGW1
                 __MULW121:
000d64 9508      	RET
                 
                 __DIVW21U:
000d65 2400      	CLR  R0
000d66 2411      	CLR  R1
000d67 e190      	LDI  R25,16
                 __DIVW21U1:
000d68 0faa      	LSL  R26
000d69 1fbb      	ROL  R27
000d6a 1c00      	ROL  R0
000d6b 1c11      	ROL  R1
000d6c 1a0e      	SUB  R0,R30
000d6d 0a1f      	SBC  R1,R31
000d6e f418      	BRCC __DIVW21U2
000d6f 0e0e      	ADD  R0,R30
000d70 1e1f      	ADC  R1,R31
000d71 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000d72 60a1      	SBR  R26,1
                 __DIVW21U3:
000d73 959a      	DEC  R25
000d74 f799      	BRNE __DIVW21U1
000d75 01fd      	MOVW R30,R26
000d76 01d0      	MOVW R26,R0
000d77 9508      	RET
                 
                 __DIVW21:
000d78 d004      	RCALL __CHKSIGNW
000d79 dfeb      	RCALL __DIVW21U
000d7a f40e      	BRTC __DIVW211
000d7b dfcb      	RCALL __ANEGW1
                 __DIVW211:
000d7c 9508      	RET
                 
                 __CHKSIGNW:
000d7d 94e8      	CLT
000d7e fff7      	SBRS R31,7
000d7f c002      	RJMP __CHKSW1
000d80 dfc6      	RCALL __ANEGW1
000d81 9468      	SET
                 __CHKSW1:
000d82 ffb7      	SBRS R27,7
000d83 c006      	RJMP __CHKSW2
000d84 95b1      	NEG  R27
000d85 95a1      	NEG  R26
000d86 40b0      	SBCI R27,0
000d87 f800      	BLD  R0,0
000d88 9403      	INC  R0
000d89 fa00      	BST  R0,0
                 __CHKSW2:
000d8a 9508      	RET
                 
                 __GETW1P:
000d8b 91ed      	LD   R30,X+
000d8c 91fc      	LD   R31,X
000d8d 9711      	SBIW R26,1
000d8e 9508      	RET
                 
                 __GETW1PF:
000d8f 9005      	LPM  R0,Z+
000d90 91f4      	LPM  R31,Z
000d91 2de0      	MOV  R30,R0
000d92 9508      	RET
                 
                 __PUTPARD1:
000d93 937a      	ST   -Y,R23
000d94 936a      	ST   -Y,R22
000d95 93fa      	ST   -Y,R31
000d96 93ea      	ST   -Y,R30
000d97 9508      	RET
                 
                 __EEPROMRDW:
000d98 9611      	ADIW R26,1
000d99 d002      	RCALL __EEPROMRDB
000d9a 2ffe      	MOV  R31,R30
000d9b 9711      	SBIW R26,1
                 
                 __EEPROMRDB:
000d9c 99e1      	SBIC EECR,EEWE
000d9d cffe      	RJMP __EEPROMRDB
000d9e 93ff      	PUSH R31
000d9f b7ff      	IN   R31,SREG
000da0 94f8      	CLI
000da1 bbae      	OUT  EEARL,R26
000da2 bbbf      	OUT  EEARH,R27
000da3 9ae0      	SBI  EECR,EERE
000da4 b3ed      	IN   R30,EEDR
000da5 bfff      	OUT  SREG,R31
000da6 91ff      	POP  R31
000da7 9508      	RET
                 
                 __EEPROMWRW:
000da8 d007      	RCALL __EEPROMWRB
000da9 9611      	ADIW R26,1
000daa 93ef      	PUSH R30
000dab 2fef      	MOV  R30,R31
000dac d003      	RCALL __EEPROMWRB
000dad 91ef      	POP  R30
000dae 9711      	SBIW R26,1
000daf 9508      	RET
                 
                 __EEPROMWRB:
000db0 9be1      	SBIS EECR,EEWE
000db1 c002      	RJMP __EEPROMWRB1
000db2 95a8      	WDR
000db3 cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
000db4 b79f      	IN   R25,SREG
000db5 94f8      	CLI
000db6 bbae      	OUT  EEARL,R26
000db7 bbbf      	OUT  EEARH,R27
000db8 9ae0      	SBI  EECR,EERE
000db9 b38d      	IN   R24,EEDR
000dba 17e8      	CP   R30,R24
000dbb f019      	BREQ __EEPROMWRB0
000dbc bbed      	OUT  EEDR,R30
000dbd 9ae2      	SBI  EECR,EEMWE
000dbe 9ae1      	SBI  EECR,EEWE
                 __EEPROMWRB0:
000dbf bf9f      	OUT  SREG,R25
000dc0 9508      	RET
                 
                 __CPW02:
000dc1 2400      	CLR  R0
000dc2 160a      	CP   R0,R26
000dc3 060b      	CPC  R0,R27
000dc4 9508      	RET
                 
                 __ANEGF1:
000dc5 9730      	SBIW R30,0
000dc6 4060      	SBCI R22,0
000dc7 4070      	SBCI R23,0
000dc8 f009      	BREQ __ANEGF10
000dc9 5870      	SUBI R23,0x80
                 __ANEGF10:
000dca 9508      	RET
                 
                 __ROUND_REPACK:
000dcb 2355      	TST  R21
000dcc f442      	BRPL __REPACK
000dcd 3850      	CPI  R21,0x80
000dce f411      	BRNE __ROUND_REPACK0
000dcf ffe0      	SBRS R30,0
000dd0 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000dd1 9631      	ADIW R30,1
000dd2 1f69      	ADC  R22,R25
000dd3 1f79      	ADC  R23,R25
000dd4 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000dd5 e850      	LDI  R21,0x80
000dd6 2757      	EOR  R21,R23
000dd7 f411      	BRNE __REPACK0
000dd8 935f      	PUSH R21
000dd9 c073      	RJMP __ZERORES
                 __REPACK0:
000dda 3f5f      	CPI  R21,0xFF
000ddb f031      	BREQ __REPACK1
000ddc 0f66      	LSL  R22
000ddd 0c00      	LSL  R0
000dde 9557      	ROR  R21
000ddf 9567      	ROR  R22
000de0 2f75      	MOV  R23,R21
000de1 9508      	RET
                 __REPACK1:
000de2 935f      	PUSH R21
000de3 2000      	TST  R0
000de4 f00a      	BRMI __REPACK2
000de5 c072      	RJMP __MAXRES
                 __REPACK2:
000de6 c06b      	RJMP __MINRES
                 
                 __UNPACK:
000de7 e850      	LDI  R21,0x80
000de8 2e19      	MOV  R1,R25
000de9 2215      	AND  R1,R21
000dea 0f88      	LSL  R24
000deb 1f99      	ROL  R25
000dec 2795      	EOR  R25,R21
000ded 0f55      	LSL  R21
000dee 9587      	ROR  R24
                 
                 __UNPACK1:
000def e850      	LDI  R21,0x80
000df0 2e07      	MOV  R0,R23
000df1 2205      	AND  R0,R21
000df2 0f66      	LSL  R22
000df3 1f77      	ROL  R23
000df4 2775      	EOR  R23,R21
000df5 0f55      	LSL  R21
000df6 9567      	ROR  R22
000df7 9508      	RET
                 
                 __CFD1U:
000df8 9468      	SET
000df9 c001      	RJMP __CFD1U0
                 __CFD1:
000dfa 94e8      	CLT
                 __CFD1U0:
000dfb 935f      	PUSH R21
000dfc dff2      	RCALL __UNPACK1
000dfd 3870      	CPI  R23,0x80
000dfe f018      	BRLO __CFD10
000dff 3f7f      	CPI  R23,0xFF
000e00 f408      	BRCC __CFD10
000e01 c04b      	RJMP __ZERORES
                 __CFD10:
000e02 e156      	LDI  R21,22
000e03 1b57      	SUB  R21,R23
000e04 f4aa      	BRPL __CFD11
000e05 9551      	NEG  R21
000e06 3058      	CPI  R21,8
000e07 f40e      	BRTC __CFD19
000e08 3059      	CPI  R21,9
                 __CFD19:
000e09 f030      	BRLO __CFD17
000e0a efef      	SER  R30
000e0b efff      	SER  R31
000e0c ef6f      	SER  R22
000e0d e77f      	LDI  R23,0x7F
000e0e f977      	BLD  R23,7
000e0f c01a      	RJMP __CFD15
                 __CFD17:
000e10 2777      	CLR  R23
000e11 2355      	TST  R21
000e12 f0b9      	BREQ __CFD15
                 __CFD18:
000e13 0fee      	LSL  R30
000e14 1fff      	ROL  R31
000e15 1f66      	ROL  R22
000e16 1f77      	ROL  R23
000e17 955a      	DEC  R21
000e18 f7d1      	BRNE __CFD18
000e19 c010      	RJMP __CFD15
                 __CFD11:
000e1a 2777      	CLR  R23
                 __CFD12:
000e1b 3058      	CPI  R21,8
000e1c f028      	BRLO __CFD13
000e1d 2fef      	MOV  R30,R31
000e1e 2ff6      	MOV  R31,R22
000e1f 2f67      	MOV  R22,R23
000e20 5058      	SUBI R21,8
000e21 cff9      	RJMP __CFD12
                 __CFD13:
000e22 2355      	TST  R21
000e23 f031      	BREQ __CFD15
                 __CFD14:
000e24 9576      	LSR  R23
000e25 9567      	ROR  R22
000e26 95f7      	ROR  R31
000e27 95e7      	ROR  R30
000e28 955a      	DEC  R21
000e29 f7d1      	BRNE __CFD14
                 __CFD15:
000e2a 2000      	TST  R0
000e2b f40a      	BRPL __CFD16
000e2c df1e      	RCALL __ANEGD1
                 __CFD16:
000e2d 915f      	POP  R21
000e2e 9508      	RET
                 
                 __CDF1U:
000e2f 9468      	SET
000e30 c001      	RJMP __CDF1U0
                 __CDF1:
000e31 94e8      	CLT
                 __CDF1U0:
000e32 9730      	SBIW R30,0
000e33 4060      	SBCI R22,0
000e34 4070      	SBCI R23,0
000e35 f0b1      	BREQ __CDF10
000e36 2400      	CLR  R0
000e37 f026      	BRTS __CDF11
000e38 2377      	TST  R23
000e39 f412      	BRPL __CDF11
000e3a 9400      	COM  R0
000e3b df0f      	RCALL __ANEGD1
                 __CDF11:
000e3c 2e17      	MOV  R1,R23
000e3d e17e      	LDI  R23,30
000e3e 2011      	TST  R1
                 __CDF12:
000e3f f032      	BRMI __CDF13
000e40 957a      	DEC  R23
000e41 0fee      	LSL  R30
000e42 1fff      	ROL  R31
000e43 1f66      	ROL  R22
000e44 1c11      	ROL  R1
000e45 cff9      	RJMP __CDF12
                 __CDF13:
000e46 2fef      	MOV  R30,R31
000e47 2ff6      	MOV  R31,R22
000e48 2d61      	MOV  R22,R1
000e49 935f      	PUSH R21
000e4a df8a      	RCALL __REPACK
000e4b 915f      	POP  R21
                 __CDF10:
000e4c 9508      	RET
                 
                 __ZERORES:
000e4d 27ee      	CLR  R30
000e4e 27ff      	CLR  R31
000e4f 01bf      	MOVW R22,R30
000e50 915f      	POP  R21
000e51 9508      	RET
                 
                 __MINRES:
000e52 efef      	SER  R30
000e53 efff      	SER  R31
000e54 e76f      	LDI  R22,0x7F
000e55 ef7f      	SER  R23
000e56 915f      	POP  R21
000e57 9508      	RET
                 
                 __MAXRES:
000e58 efef      	SER  R30
000e59 efff      	SER  R31
000e5a e76f      	LDI  R22,0x7F
000e5b e77f      	LDI  R23,0x7F
000e5c 915f      	POP  R21
000e5d 9508      	RET
                 
                 __MULF12:
000e5e 935f      	PUSH R21
000e5f df87      	RCALL __UNPACK
000e60 3870      	CPI  R23,0x80
000e61 f359      	BREQ __ZERORES
000e62 3890      	CPI  R25,0x80
000e63 f349      	BREQ __ZERORES
000e64 2401      	EOR  R0,R1
000e65 9408      	SEC
000e66 1f79      	ADC  R23,R25
000e67 f423      	BRVC __MULF124
000e68 f324      	BRLT __ZERORES
                 __MULF125:
000e69 2000      	TST  R0
000e6a f33a      	BRMI __MINRES
000e6b cfec      	RJMP __MAXRES
                 __MULF124:
000e6c 920f      	PUSH R0
000e6d 931f      	PUSH R17
000e6e 932f      	PUSH R18
000e6f 933f      	PUSH R19
000e70 934f      	PUSH R20
000e71 2711      	CLR  R17
000e72 2722      	CLR  R18
000e73 2799      	CLR  R25
000e74 9f68      	MUL  R22,R24
000e75 01a0      	MOVW R20,R0
000e76 9f8f      	MUL  R24,R31
000e77 2d30      	MOV  R19,R0
000e78 0d41      	ADD  R20,R1
000e79 1f59      	ADC  R21,R25
000e7a 9f6b      	MUL  R22,R27
000e7b 0d30      	ADD  R19,R0
000e7c 1d41      	ADC  R20,R1
000e7d 1f59      	ADC  R21,R25
000e7e 9f8e      	MUL  R24,R30
000e7f d027      	RCALL __MULF126
000e80 9fbf      	MUL  R27,R31
000e81 d025      	RCALL __MULF126
000e82 9f6a      	MUL  R22,R26
000e83 d023      	RCALL __MULF126
000e84 9fbe      	MUL  R27,R30
000e85 d01d      	RCALL __MULF127
000e86 9faf      	MUL  R26,R31
000e87 d01b      	RCALL __MULF127
000e88 9fae      	MUL  R26,R30
000e89 0d11      	ADD  R17,R1
000e8a 1f29      	ADC  R18,R25
000e8b 1f39      	ADC  R19,R25
000e8c 1f49      	ADC  R20,R25
000e8d 1f59      	ADC  R21,R25
000e8e 2fe3      	MOV  R30,R19
000e8f 2ff4      	MOV  R31,R20
000e90 2f65      	MOV  R22,R21
000e91 2f52      	MOV  R21,R18
000e92 914f      	POP  R20
000e93 913f      	POP  R19
000e94 912f      	POP  R18
000e95 911f      	POP  R17
000e96 900f      	POP  R0
000e97 2366      	TST  R22
000e98 f02a      	BRMI __MULF122
000e99 0f55      	LSL  R21
000e9a 1fee      	ROL  R30
000e9b 1fff      	ROL  R31
000e9c 1f66      	ROL  R22
000e9d c002      	RJMP __MULF123
                 __MULF122:
000e9e 9573      	INC  R23
000e9f f24b      	BRVS __MULF125
                 __MULF123:
000ea0 df2a      	RCALL __ROUND_REPACK
000ea1 915f      	POP  R21
000ea2 9508      	RET
                 
                 __MULF127:
000ea3 0d10      	ADD  R17,R0
000ea4 1d21      	ADC  R18,R1
000ea5 1f39      	ADC  R19,R25
000ea6 c002      	RJMP __MULF128
                 __MULF126:
000ea7 0d20      	ADD  R18,R0
000ea8 1d31      	ADC  R19,R1
                 __MULF128:
000ea9 1f49      	ADC  R20,R25
000eaa 1f59      	ADC  R21,R25
000eab 9508      	RET
                 
                 _delay_ms:
000eac 9610      	adiw r26,0
000ead f039      	breq __delay_ms1
                 __delay_ms0:
000eae 95a8      	wdr
                +
000eaf ec8d     +LDI R24 , LOW ( 0xACD )
000eb0 e09a     +LDI R25 , HIGH ( 0xACD )
                +__DELAY_USW_LOOP :
000eb1 9701     +SBIW R24 , 1
000eb2 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xACD
000eb3 9711      	sbiw r26,1
000eb4 f7c9      	brne __delay_ms0
                 __delay_ms1:
000eb5 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  48 r1 :  18 r2 :   0 r3 :   0 r4 :   4 r5 :   2 r6 :   0 r7 :   0 
r8 :   9 r9 :   8 r10:   0 r11:   0 r12:  25 r13:   7 r14:   0 r15:   4 
r16:  43 r17:  38 r18:  38 r19:  17 r20:  23 r21:  66 r22:  46 r23:  37 
r24:  24 r25:  27 r26: 373 r27: 200 r28:  24 r29:   1 r30: 685 r31: 283 
x  :  32 y  : 371 z  :  16 
Registers used: 28 out of 35 (80.0%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  30 add   :  25 
adiw  :  43 and   :   2 andi  :  14 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :  45 
brge  :  15 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  17 
brlt  :   3 brmi  :   5 brne  :  75 brpl  :   6 brsh  :   5 brtc  :   3 
brts  :   2 brvc  :   1 brvs  :   2 bset  :   0 bst   :   1 call  : 401 
cbi   :  34 cbr   :   0 clc   :   0 clh   :   0 cli   :   3 cln   :   0 
clr   :  37 cls   :   0 clt   :   4 clv   :   0 clz   :   0 com   :   6 
cp    :  24 cpc   :  37 cpi   :  90 cpse  :   0 dec   :   6 des   :   0 
eor   :   4 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :  15 inc   :   2 jmp   :  45 ld    :  55 ldd   : 130 ldi   : 504 
lds   :  95 lpm   :  16 lsl   :  15 lsr   :   1 mov   :  44 movw  :  50 
mul   :  16 muls  :   0 mulsu :   0 neg   :   6 nop   :   0 or    :   2 
ori   :   9 out   :  71 pop   :  20 push  :  19 rcall :  96 ret   : 103 
reti  :   2 rjmp  : 186 rol   :  19 ror   :   7 sbc   :   5 sbci  :  10 
sbi   :  35 sbic  :   7 sbis  :   2 sbiw  :  38 sbr   :   1 sbrc  :   3 
sbrs  :  13 sec   :   1 seh   :   0 sei   :   1 sen   :   0 ser   :   8 
ses   :   0 set   :   4 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    : 177 std   :  44 sts   :  52 sub   :   5 subi  :  21 swap  :   2 
tst   :  13 wdr   :   2 
Instructions used: 78 out of 116 (67.2%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x001d6c   7016    516   7532   32768  23.0%
[.dseg] 0x000060 0x0002c1      0     97     97    2048   4.7%
[.eseg] 0x000000 0x00002e      0     46     46    1024   4.5%

Assembly complete, 0 errors, 23 warnings
