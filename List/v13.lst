
AVRASM ver. 2.1.30  D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm Sun Nov 19 17:12:41 2023

D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1083): warning: Register r4 already defined by the .DEF directive
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1084): warning: Register r5 already defined by the .DEF directive
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1085): warning: Register r6 already defined by the .DEF directive
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1086): warning: Register r7 already defined by the .DEF directive
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1087): warning: Register r8 already defined by the .DEF directive
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1088): warning: Register r9 already defined by the .DEF directive
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1089): warning: Register r10 already defined by the .DEF directive
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1090): warning: Register r11 already defined by the .DEF directive
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1091): warning: Register r12 already defined by the .DEF directive
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1092): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.40 Advanced
                 ;(C) Copyright 1998-2020 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Release
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 11,059200 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Mode 1
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _hitung=R4
                 	.DEF _hitung_msb=R5
                 	.DEF _mulai=R6
                 	.DEF _mulai_msb=R7
                 	.DEF _nadc7=R8
                 	.DEF _nadc7_msb=R9
                 	.DEF _nilai_warna=R10
                 	.DEF _nilai_warna_msb=R11
                 	.DEF _i=R12
                 	.DEF _i_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0113 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 05a4 	JMP  _timer0_comp_isr
000016 940c 0579 	JMP  _timer0_ovf_isr
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000033 0000      	.DW  0x0000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000034 0000
000035 0000      	.DB  0x0,0x0,0x0,0x0
000036 0000
000037 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 _0x6:
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1139): warning: .cseg .db misalignment - padding zero byte
000038 00aa      	.DB  0xAA
                 _0x7:
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1141): warning: .cseg .db misalignment - padding zero byte
000039 0001      	.DB  0x1
                 _0x8:
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1143): warning: .cseg .db misalignment - padding zero byte
00003a 000a      	.DB  0xA
                 _0x9:
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1145): warning: .cseg .db misalignment - padding zero byte
00003b 0064      	.DB  0x64
                 _0xA:
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1147): warning: .cseg .db misalignment - padding zero byte
00003c 00c8      	.DB  0xC8
                 _0xB:
00003d ff60      	.DB  0x60,0xFF
                 _0xC:
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1151): warning: .cseg .db misalignment - padding zero byte
00003e 00c8      	.DB  0xC8
                 _0x0:
00003f 4543
000040 204b
000041 4553
000042 534e      	.DB  0x43,0x45,0x4B,0x20,0x53,0x45,0x4E,0x53
000043 524f
000044 2020
000045 2500
000046 2564      	.DB  0x4F,0x52,0x20,0x20,0x0,0x25,0x64,0x25
000047 2564
000048 2564
000049 2564
00004a 2564      	.DB  0x64,0x25,0x64,0x25,0x64,0x25,0x64,0x25
00004b 2564
00004c 0064
00004d 6142
00004e 6163      	.DB  0x64,0x25,0x64,0x0,0x42,0x61,0x63,0x61
00004f 4c20
000050 6e69
000051 0065
000052 6573      	.DB  0x20,0x4C,0x69,0x6E,0x65,0x0,0x73,0x65
000053 736e
000054 726f
000055 253a
000056 2064      	.DB  0x6E,0x73,0x6F,0x72,0x3A,0x25,0x64,0x20
000057 203d
000058 6425
000059 2020
00005a 4200      	.DB  0x3D,0x20,0x25,0x64,0x20,0x20,0x0,0x42
00005b 6361
00005c 2061
00005d 6142
00005e 6b63      	.DB  0x61,0x63,0x61,0x20,0x42,0x61,0x63,0x6B
00005f 7267
000060 756f
000061 646e
000062 4300      	.DB  0x67,0x72,0x6F,0x75,0x6E,0x64,0x0,0x43
000063 6e65
000064 6574
000065 2072
000066 6f50      	.DB  0x65,0x6E,0x74,0x65,0x72,0x20,0x50,0x6F
000067 6e69
000068 2074
000069 2020
00006a 0020      	.DB  0x69,0x6E,0x74,0x20,0x20,0x20,0x20,0x0
00006b 6573
00006c 736e
00006d 726f
00006e 253a      	.DB  0x73,0x65,0x6E,0x73,0x6F,0x72,0x3A,0x25
00006f 2064
000070 2d2d
000071 203e
000072 6425      	.DB  0x64,0x20,0x2D,0x2D,0x3E,0x20,0x25,0x64
000073 2020
000074 4d00
000075 6e65
000076 0075      	.DB  0x20,0x20,0x0,0x4D,0x65,0x6E,0x75,0x0
000077 614a
000078 616c
000079 6b6e
00007a 6e61      	.DB  0x4A,0x61,0x6C,0x61,0x6E,0x6B,0x61,0x6E
00007b 5220
00007c 626f
00007d 746f
00007e 4b00      	.DB  0x20,0x52,0x6F,0x62,0x6F,0x74,0x0,0x4B
00007f 6c61
000080 6269
000081 6172
000082 6973      	.DB  0x61,0x6C,0x69,0x62,0x72,0x61,0x73,0x69
000083 5320
000084 6e65
000085 6f73
000086 0072      	.DB  0x20,0x53,0x65,0x6E,0x73,0x6F,0x72,0x0
000087 6554
000088 7473
000089 4d20
00008a 746f      	.DB  0x54,0x65,0x73,0x74,0x20,0x4D,0x6F,0x74
00008b 726f
00008c 5400
00008d 7365
00008e 2074      	.DB  0x6F,0x72,0x0,0x54,0x65,0x73,0x74,0x20
00008f 6f54
000090 626d
000091 6c6f
000092 5200      	.DB  0x54,0x6F,0x6D,0x62,0x6F,0x6C,0x0,0x52
000093 6e75
000094 4220
000095 746f
000096 4800      	.DB  0x75,0x6E,0x20,0x42,0x6F,0x74,0x0,0x48
000097 6c6f
000098 2064
000099 2031
00009a 6f74      	.DB  0x6F,0x6C,0x64,0x20,0x31,0x20,0x74,0x6F
00009b 7320
00009c 6174
00009d 7472
00009e 5200      	.DB  0x20,0x73,0x74,0x61,0x72,0x74,0x0,0x52
00009f 6e75
0000a0 696e
0000a1 676e
0000a2 2e2e      	.DB  0x75,0x6E,0x6E,0x69,0x6E,0x67,0x2E,0x2E
0000a3 002e
0000a4 312b
0000a5 3030
0000a6 2b20      	.DB  0x2E,0x0,0x2B,0x31,0x30,0x30,0x20,0x2B
0000a7 3031
0000a8 0030
0000a9 312d
0000aa 3030      	.DB  0x31,0x30,0x30,0x0,0x2D,0x31,0x30,0x30
0000ab 2d20
0000ac 3031
0000ad 0030
0000ae 312b      	.DB  0x20,0x2D,0x31,0x30,0x30,0x0,0x2B,0x31
0000af 3030
0000b0 2d20
0000b1 3031
0000b2 0030      	.DB  0x30,0x30,0x20,0x2D,0x31,0x30,0x30,0x0
0000b3 312d
0000b4 3030
0000b5 2b20
0000b6 3031      	.DB  0x2D,0x31,0x30,0x30,0x20,0x2B,0x31,0x30
0000b7 0030
0000b8 6f48
0000b9 646c
0000ba 3120      	.DB  0x30,0x0,0x48,0x6F,0x6C,0x64,0x20,0x31
0000bb 7420
0000bc 206f
0000bd 7865
0000be 7469      	.DB  0x20,0x74,0x6F,0x20,0x65,0x78,0x69,0x74
0000bf 7400
0000c0 6d6f
0000c1 6f62
0000c2 206c      	.DB  0x0,0x74,0x6F,0x6D,0x62,0x6F,0x6C,0x20
0000c3 203d
0000c4 2031
0000c5 2020
0000c6 2020      	.DB  0x3D,0x20,0x31,0x20,0x20,0x20,0x20,0x20
0000c7 7400
0000c8 6d6f
0000c9 6f62
0000ca 206c      	.DB  0x0,0x74,0x6F,0x6D,0x62,0x6F,0x6C,0x20
0000cb 203d
0000cc 2032
0000cd 2020
0000ce 2020      	.DB  0x3D,0x20,0x32,0x20,0x20,0x20,0x20,0x20
0000cf 7400
0000d0 6d6f
0000d1 6f62
0000d2 206c      	.DB  0x0,0x74,0x6F,0x6D,0x62,0x6F,0x6C,0x20
0000d3 203d
0000d4 2033
0000d5 2020
0000d6 2020      	.DB  0x3D,0x20,0x33,0x20,0x20,0x20,0x20,0x20
0000d7 7400
0000d8 6d6f
0000d9 6f62
0000da 206c      	.DB  0x0,0x74,0x6F,0x6D,0x62,0x6F,0x6C,0x20
0000db 203d
0000dc 2034
0000dd 2020
0000de 2020      	.DB  0x3D,0x20,0x34,0x20,0x20,0x20,0x20,0x20
0000df 2500
0000e0 2064
0000e1 2020
0000e2 4c00      	.DB  0x0,0x25,0x64,0x20,0x20,0x20,0x0,0x4C
0000e3 4745
0000e4 4f49
0000e5 004e
0000e6 414d      	.DB  0x45,0x47,0x49,0x4F,0x4E,0x0,0x4D,0x41
0000e7 204e
0000e8 2034
0000e9 4f4a
0000ea 424d      	.DB  0x4E,0x20,0x34,0x20,0x4A,0x4F,0x4D,0x42
0000eb 4e41
0000ec 0047
0000ed 4554
0000ee 5453      	.DB  0x41,0x4E,0x47,0x0,0x54,0x45,0x53,0x54
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1197): warning: .cseg .db misalignment - padding zero byte
0000ef 0000      	.DB  0x0
                 _0x2040060:
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1199): warning: .cseg .db misalignment - padding zero byte
0000f0 0001      	.DB  0x1
                 _0x2040000:
0000f1 4e2d
0000f2 4e41
0000f3 4900
0000f4 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
D:\Workspace\PROCOMMIT\PROCOMMITv13\List\v13.asm(1202): warning: .cseg .db misalignment - padding zero byte
0000f5 0000      	.DB  0x0
                 _0x2060003:
0000f6 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
0000f7 0001      	.DW  0x01
0000f8 0002      	.DW  0x02
0000f9 0066      	.DW  __REG_BIT_VARS*2
                 
0000fa 0008      	.DW  0x08
0000fb 0004      	.DW  0x04
0000fc 0068      	.DW  __REG_VARS*2
                 
0000fd 0001      	.DW  0x01
0000fe 029d      	.DW  _kp
0000ff 0074      	.DW  _0x8*2
                 
000100 0001      	.DW  0x01
000101 029f      	.DW  _kd
000102 0076      	.DW  _0x9*2
                 
000103 0001      	.DW  0x01
000104 02a1      	.DW  _SPEED
000105 0078      	.DW  _0xA*2
                 
000106 0002      	.DW  0x02
000107 02a3      	.DW  _MIN_SPEED
000108 007a      	.DW  _0xB*2
                 
000109 0001      	.DW  0x01
00010a 02a5      	.DW  _MAX_SPEED
00010b 007c      	.DW  _0xC*2
                 
00010c 0001      	.DW  0x01
00010d 02b0      	.DW  __seed_G102
00010e 01e0      	.DW  _0x2040060*2
                 
00010f 0002      	.DW  0x02
000110 02b4      	.DW  __base_y_G103
000111 01ec      	.DW  _0x2060003*2
                 
                 _0xFFFFFFFF:
000112 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000113 94f8      	CLI
000114 27ee      	CLR  R30
000115 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000116 e0f1      	LDI  R31,1
000117 bffb      	OUT  GICR,R31
000118 bfeb      	OUT  GICR,R30
000119 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
00011a e1f8      	LDI  R31,0x18
00011b bdf1      	OUT  WDTCR,R31
00011c bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
00011d e08d      	LDI  R24,(14-2)+1
00011e e0a2      	LDI  R26,2
00011f 27bb      	CLR  R27
                 __CLEAR_REG:
000120 93ed      	ST   X+,R30
000121 958a      	DEC  R24
000122 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000123 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000124 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000125 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000126 93ed      	ST   X+,R30
000127 9701      	SBIW R24,1
000128 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000129 eeee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00012a e0f1      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00012b 9185      	LPM  R24,Z+
00012c 9195      	LPM  R25,Z+
00012d 9700      	SBIW R24,0
00012e f061      	BREQ __GLOBAL_INI_END
00012f 91a5      	LPM  R26,Z+
000130 91b5      	LPM  R27,Z+
000131 9005      	LPM  R0,Z+
000132 9015      	LPM  R1,Z+
000133 01bf      	MOVW R22,R30
000134 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000135 9005      	LPM  R0,Z+
000136 920d      	ST   X+,R0
000137 9701      	SBIW R24,1
000138 f7e1      	BRNE __GLOBAL_INI_LOOP
000139 01fb      	MOVW R30,R22
00013a cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00013b e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00013c bfed      	OUT  SPL,R30
00013d e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00013e bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00013f e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000140 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000141 940c 05a5 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                    .equ __lcd_port=0x18 ;PORTB
                 ; 0000 002B #endasm
                 ;unsigned char read_adc(unsigned char adc_input)
                 ; 0000 0032 {
                 
                 	.CSEG
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 0033 ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
000143 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
000144 81e8      	LD   R30,Y
000145 66e0      	ORI  R30,LOW(0x60)
000146 b9e7      	OUT  0x7,R30
                 ; 0000 0034 // Start the AD conversion
                 ; 0000 0035 ADCSRA|=0x40;
000147 9a36      	SBI  0x6,6
                 ; 0000 0036 // Wait for the AD conversion to complete
                 ; 0000 0037 while ((ADCSRA & 0x10)==0);
                 _0x3:
000148 9b34      	SBIS 0x6,4
000149 cffe      	RJMP _0x3
                 ; 0000 0038 ADCSRA|=0x10;
00014a 9a34      	SBI  0x6,4
                 ; 0000 0039 return ADCH;
00014b b1e5      	IN   R30,0x5
00014c 9621      	ADIW R28,1
00014d 9508      	RET
                 ; 0000 003A }
                 ; .FEND
                 ;int hitung = 0, mulai = 0;
                 ;unsigned int nadc7 = 0, nilai_warna = 0;
                 ;int buttonhold[4] = {0, 0, 0, 0};
                 ;char buff[33];
                 ;int i, j, k, rka = 0, rki = 0, k_mtr = 170;
                 
                 	.DSEG
                 ;bit x, kondisi;
                 ;unsigned char kecepatanki = 0, kecepatanka = 0;
                 ;unsigned char pos_servo1, pos_servo2, pos_gulung, a, pos_led1, pos_led2;
                 ;char simpan;
                 ;int capit = 0, angkat = 0, _maju = 0, _mundur = 0, mode_kec = 0;
                 ;char arr[16], irr[16];
                 ;int push = 1;
                 ;bool isDelayClick1 = false;
                 ;eeprom int garis[7], back[7], tengah[7], mapMirror[1];
                 ;char sen[7];
                 ;int sensor;
                 ;int error = 0;
                 ;int lastError = 0;
                 ;int kp = 10;
                 ;int kd = 100;
                 ;int SPEED = 200;
                 ;int MIN_SPEED = -160;
                 ;int MAX_SPEED = 200;
                 ;int count = 0;
                 ;int second = 0;
                 ;void delay(int ms)
                 ; 0000 005D {
                 
                 	.CSEG
                 _delay:
                 ; .FSTART _delay
                 ;delay_ms(ms);
00014e 93ba      	ST   -Y,R27
00014f 93aa      	ST   -Y,R26
                 ;	ms -> Y+0
000150 81a8      	LD   R26,Y
000151 81b9      	LDD  R27,Y+1
000152 940e 0be2 	CALL _delay_ms
000154 c15d      	RJMP _0x20C0007
                 ; .FEND
                 ;void lcd_kedip(int ulangi)
                 ;for(i = 0; i < ulangi; i++)
                 ;	ulangi -> Y+0
                 ;lampu=0;
                 ;delay_ms(100);
                 ;lampu=1;
                 ;delay_ms(100);
                 ;void konvert_logic()
                 ; 0000 005E {
                 _konvert_logic:
                 ; .FSTART _konvert_logic
                 ;for(i = 0; i < 7; i++)
000155 24cc      	CLR  R12
000156 24dd      	CLR  R13
                 _0x15:
000157 940e 0930 	CALL SUBOPT_0x0
000159 f4d4      	BRGE _0x16
                 ;if(read_adc(i) > tengah[i]) {
00015a 940e 0935 	CALL SUBOPT_0x1
00015c 17ea      	CP   R30,R26
00015d 07fb      	CPC  R31,R27
00015e f434      	BRGE _0x17
                 ;sen[i]=1;
00015f e9a0      	LDI  R26,LOW(_sen)
000160 e0b2      	LDI  R27,HIGH(_sen)
000161 0dac      	ADD  R26,R12
000162 1dbd      	ADC  R27,R13
000163 e0e1      	LDI  R30,LOW(1)
000164 c00a      	RJMP _0x134
                 ;else if(read_adc(i) < tengah[i]) {
                 _0x17:
000165 940e 0935 	CALL SUBOPT_0x1
000167 17ae      	CP   R26,R30
000168 07bf      	CPC  R27,R31
000169 f434      	BRGE _0x19
                 ;sen[i]=0;
00016a e9a0      	LDI  R26,LOW(_sen)
00016b e0b2      	LDI  R27,HIGH(_sen)
00016c 0dac      	ADD  R26,R12
00016d 1dbd      	ADC  R27,R13
00016e e0e0      	LDI  R30,LOW(0)
                 _0x134:
00016f 93ec      	ST   X,R30
                 _0x19:
000170 01f6      	MOVW R30,R12
000171 9631      	ADIW R30,1
000172 016f      	MOVW R12,R30
000173 cfe3      	RJMP _0x15
                 _0x16:
000174 9508      	RET
                 ; .FEND
                 ;void logika()
                 _logika:
                 ; .FSTART _logika
                 ;sensor = (sen[6] * 64) + (sen[5] * 32) + (sen[4] * 16) + (sen[3] * 8) + (sen[2]  ...
                +
000175 91a0 0296+LDS R26 , _sen + ( 6 )
                 	__GETB2MN _sen,6
000177 e4e0      	LDI  R30,LOW(64)
000178 9fea      	MUL  R30,R26
000179 01b0      	MOVW R22,R0
                +
00017a 91a0 0295+LDS R26 , _sen + ( 5 )
                 	__GETB2MN _sen,5
00017c e2e0      	LDI  R30,LOW(32)
00017d 940e 0945 	CALL SUBOPT_0x2
                +
00017f 91a0 0294+LDS R26 , _sen + ( 4 )
                 	__GETB2MN _sen,4
000181 e1e0      	LDI  R30,LOW(16)
000182 940e 0945 	CALL SUBOPT_0x2
                +
000184 91a0 0293+LDS R26 , _sen + ( 3 )
                 	__GETB2MN _sen,3
000186 e0e8      	LDI  R30,LOW(8)
000187 940e 0945 	CALL SUBOPT_0x2
                +
000189 91a0 0292+LDS R26 , _sen + ( 2 )
                 	__GETB2MN _sen,2
00018b e0e4      	LDI  R30,LOW(4)
00018c 940e 0945 	CALL SUBOPT_0x2
                +
00018e 91a0 0291+LDS R26 , _sen + ( 1 )
                 	__GETB2MN _sen,1
000190 e0e2      	LDI  R30,LOW(2)
000191 940e 0945 	CALL SUBOPT_0x2
000193 91a0 0290 	LDS  R26,_sen
000195 e0e1      	LDI  R30,LOW(1)
000196 9fea      	MUL  R30,R26
000197 01f0      	MOVW R30,R0
000198 0fe6      	ADD  R30,R22
000199 1ff7      	ADC  R31,R23
00019a 93e0 0297 	STS  _sensor,R30
00019c 93f0 0298 	STS  _sensor+1,R31
00019e 9508      	RET
                 ; .FEND
                 ;void cek_sensor()
                 _cek_sensor:
                 ; .FSTART _cek_sensor
                 ;konvert_logic();
00019f dfb5      	RCALL _konvert_logic
                 ;logika();
0001a0 dfd4      	RCALL _logika
0001a1 9508      	RET
                 ; .FEND
                 ;void display_sensor()
                 ;konvert_logic();
                 ;logika();
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("CEK SENSOR  ");
                 ;lcd_gotoxy(0,1);
                 ;sprintf(buff, "%d%d%d%d%d%d%d", sen[0] , sen[1] , sen[2], sen[3], sen[4], sen[5] ...
                 ;lcd_puts(buff);
                 ;void scan_garis()
                 _scan_garis:
                 ; .FSTART _scan_garis
                 ;for (i = 0; i < 7; i++)
0001a2 24cc      	CLR  R12
0001a3 24dd      	CLR  R13
                 _0x1B:
0001a4 940e 0930 	CALL SUBOPT_0x0
0001a6 f4c4      	BRGE _0x1C
                 ;garis[i] = read_adc(i);
0001a7 940e 094a 	CALL SUBOPT_0x3
0001a9 0fea      	ADD  R30,R26
0001aa 1ffb      	ADC  R31,R27
0001ab 93ff      	PUSH R31
0001ac 93ef      	PUSH R30
0001ad 2dac      	MOV  R26,R12
0001ae df94      	RCALL _read_adc
0001af 91af      	POP  R26
0001b0 91bf      	POP  R27
0001b1 940e 0950 	CALL SUBOPT_0x4
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Baca Line");
                +
0001b3 e9aa     +LDI R26 , LOW ( 2 * _0x0 + ( 28 ) )
0001b4 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 28 ) )
                 	__POINTW2FN _0x0,28
0001b5 940e 0958 	CALL SUBOPT_0x5
                 ;lcd_gotoxy(0, 1);
                 ;sprintf(buff, "sensor:%d = %d  ", i, garis[i]);
0001b7 940e 094a 	CALL SUBOPT_0x3
0001b9 940e 096d 	CALL SUBOPT_0x6
                 ;lcd_puts(buff);
                 ;lampu = 0;
                 ;delay_ms(10);
                 ;lampu = 1;
0001bb 01f6      	MOVW R30,R12
0001bc 9631      	ADIW R30,1
0001bd 016f      	MOVW R12,R30
0001be cfe5      	RJMP _0x1B
                 _0x1C:
0001bf 9508      	RET
                 ; .FEND
                 ;void scan_back()
                 _scan_back:
                 ; .FSTART _scan_back
                 ;for (i = 0; i < 7; i++)
0001c0 24cc      	CLR  R12
0001c1 24dd      	CLR  R13
                 _0x22:
0001c2 940e 0930 	CALL SUBOPT_0x0
0001c4 f4c4      	BRGE _0x23
                 ;back[i] = read_adc(i);
0001c5 940e 0984 	CALL SUBOPT_0x7
0001c7 0fea      	ADD  R30,R26
0001c8 1ffb      	ADC  R31,R27
0001c9 93ff      	PUSH R31
0001ca 93ef      	PUSH R30
0001cb 2dac      	MOV  R26,R12
0001cc df76      	RCALL _read_adc
0001cd 91af      	POP  R26
0001ce 91bf      	POP  R27
0001cf 940e 0950 	CALL SUBOPT_0x4
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Baca Background");
                +
0001d1 eba5     +LDI R26 , LOW ( 2 * _0x0 + ( 55 ) )
0001d2 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 55 ) )
                 	__POINTW2FN _0x0,55
0001d3 940e 0958 	CALL SUBOPT_0x5
                 ;lcd_gotoxy(0, 1);
                 ;sprintf(buff, "sensor:%d = %d  ", i, back[i]);
0001d5 940e 0984 	CALL SUBOPT_0x7
0001d7 940e 096d 	CALL SUBOPT_0x6
                 ;lcd_puts(buff);
                 ;lampu = 0;
                 ;delay_ms(10);
                 ;lampu = 1;
0001d9 01f6      	MOVW R30,R12
0001da 9631      	ADIW R30,1
0001db 016f      	MOVW R12,R30
0001dc cfe5      	RJMP _0x22
                 _0x23:
0001dd 9508      	RET
                 ; .FEND
                 ;void hit_tengah()
                 _hit_tengah:
                 ; .FSTART _hit_tengah
                 ;for (i = 0; i < 7; i++)
0001de 24cc      	CLR  R12
0001df 24dd      	CLR  R13
                 _0x29:
0001e0 940e 0930 	CALL SUBOPT_0x0
0001e2 f00c      	BRLT PC+2
0001e3 c047      	RJMP _0x2A
                 ;tengah[i] = (back[i] + garis[i]) / 2;
0001e4 01f6      	MOVW R30,R12
0001e5 e1ac      	LDI  R26,LOW(_tengah)
0001e6 e0b0      	LDI  R27,HIGH(_tengah)
0001e7 0fee      	LSL  R30
0001e8 1fff      	ROL  R31
0001e9 0fea      	ADD  R30,R26
0001ea 1ffb      	ADC  R31,R27
0001eb 01bf      	MOVW R22,R30
0001ec 940e 0984 	CALL SUBOPT_0x7
0001ee 940e 098a 	CALL SUBOPT_0x8
0001f0 010f      	MOVW R0,R30
0001f1 940e 094a 	CALL SUBOPT_0x3
0001f3 940e 098a 	CALL SUBOPT_0x8
0001f5 01d0      	MOVW R26,R0
0001f6 0fae      	ADD  R26,R30
0001f7 1fbf      	ADC  R27,R31
0001f8 e0e2      	LDI  R30,LOW(2)
0001f9 e0f0      	LDI  R31,HIGH(2)
0001fa 940e 0aae 	CALL __DIVW21
0001fc 01db      	MOVW R26,R22
0001fd 940e 0ade 	CALL __EEPROMWRW
                 ;lcd_gotoxy(0, 0);
0001ff 940e 098f 	CALL SUBOPT_0x9
                 ;lcd_putsf("Center Point    ");
                +
000201 eca5     +LDI R26 , LOW ( 2 * _0x0 + ( 71 ) )
000202 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 71 ) )
                 	__POINTW2FN _0x0,71
000203 940e 0994 	CALL SUBOPT_0xA
                 ;lcd_gotoxy(0, 1);
                 ;sprintf(buff, "sensor:%d --> %d  ", i, tengah[i]);
000205 e6e8      	LDI  R30,LOW(_buff)
000206 e0f2      	LDI  R31,HIGH(_buff)
000207 93fa      	ST   -Y,R31
000208 93ea      	ST   -Y,R30
                +
000209 ede6     +LDI R30 , LOW ( 2 * _0x0 + ( 88 ) )
00020a e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 88 ) )
                 	__POINTW1FN _0x0,88
00020b 93fa      	ST   -Y,R31
00020c 93ea      	ST   -Y,R30
00020d 01f6      	MOVW R30,R12
00020e 940e 0a89 	CALL __CWD1
000210 940e 0ac9 	CALL __PUTPARD1
000212 01f6      	MOVW R30,R12
000213 e1ac      	LDI  R26,LOW(_tengah)
000214 e0b0      	LDI  R27,HIGH(_tengah)
000215 0fee      	LSL  R30
000216 1fff      	ROL  R31
000217 940e 098a 	CALL SUBOPT_0x8
000219 940e 0a89 	CALL __CWD1
00021b 940e 0ac9 	CALL __PUTPARD1
00021d e088      	LDI  R24,8
00021e 940e 07da 	CALL _sprintf
000220 962c      	ADIW R28,12
                 ;lcd_puts(buff);
000221 e6a8      	LDI  R26,LOW(_buff)
000222 e0b2      	LDI  R27,HIGH(_buff)
000223 940e 08c9 	CALL _lcd_puts
                 ;lampu = 0;
000225 98c3      	CBI  0x18,3
                 ;lampu = 1;
000226 9ac3      	SBI  0x18,3
000227 01f6      	MOVW R30,R12
000228 9631      	ADIW R30,1
000229 016f      	MOVW R12,R30
00022a cfb5      	RJMP _0x29
                 _0x2A:
00022b 9508      	RET
                 ; .FEND
                 ;void cekdatasensor()
                 ;for (i = 0; i < 7; i++)
                 ;lcd_gotoxy(0, 0);
                 ;sprintf(buff, " %d  ", garis[i]);
                 ;lcd_puts(buff);
                 ;lcd_gotoxy(10, 0);
                 ;sprintf(buff, " %d  ", back[i]);
                 ;lcd_puts(buff);
                 ;lcd_gotoxy(0, 1);
                 ;sprintf(buff, " %d  ", tengah[i]);
                 ;lcd_puts(buff);
                 ;lcd_gotoxy(10, 1);
                 ;sprintf(buff, " %d  ", read_adc(i));
                 ;lcd_puts(buff);
                 ;delay_ms(200);
                 ;void maju(unsigned char ki, unsigned char ka)
                 ; 0000 005F {
                 _maju:
                 ; .FSTART _maju
                 ;pwmka = ka;
00022c 940e 099b 	CALL SUBOPT_0xB
                 ;	ki -> Y+1
                 ;	ka -> Y+0
                 ;pwmki = ki;
                 ;PORTD.2 = 1;
00022e 9a92      	SBI  0x12,2
                 ;PORTD.3 = 0;
00022f 9893      	CBI  0x12,3
                 ;PORTD.6 = 0;
000230 9896      	CBI  0x12,6
                 ;PORTD.7 = 1;
000231 9a97      	SBI  0x12,7
000232 c07f      	RJMP _0x20C0007
                 ; .FEND
                 ;void mundur(unsigned char ki, unsigned char ka)
                 _mundur:
                 ; .FSTART _mundur
                 ;pwmka = ka;
000233 940e 099b 	CALL SUBOPT_0xB
                 ;	ki -> Y+1
                 ;	ka -> Y+0
                 ;pwmki = ki;
                 ;PORTD.2 = 0;
000235 9892      	CBI  0x12,2
                 ;PORTD.3 = 1;
000236 9a93      	SBI  0x12,3
                 ;PORTD.6 = 1;
000237 9a96      	SBI  0x12,6
                 ;PORTD.7 = 0;
000238 9897      	CBI  0x12,7
000239 c078      	RJMP _0x20C0007
                 ; .FEND
                 ;void kanan(unsigned char ki, unsigned char ka)
                 _kanan:
                 ; .FSTART _kanan
                 ;pwmka = ka;
00023a 940e 099b 	CALL SUBOPT_0xB
                 ;	ki -> Y+1
                 ;	ka -> Y+0
                 ;pwmki = ki;
                 ;PORTD.2 = 0;
00023c 9892      	CBI  0x12,2
                 ;PORTD.3 = 1;
00023d 9a93      	SBI  0x12,3
                 ;PORTD.6 = 0;
00023e 9896      	CBI  0x12,6
                 ;PORTD.7 = 1;
00023f 9a97      	SBI  0x12,7
000240 c071      	RJMP _0x20C0007
                 ; .FEND
                 ;void kiri(unsigned char ki, unsigned char ka)
                 _kiri:
                 ; .FSTART _kiri
                 ;pwmka = ka;
000241 940e 099b 	CALL SUBOPT_0xB
                 ;	ki -> Y+1
                 ;	ka -> Y+0
                 ;pwmki = ki;
                 ;PORTD.2 = 1;
000243 9a92      	SBI  0x12,2
                 ;PORTD.3 = 0;
000244 9893      	CBI  0x12,3
                 ;PORTD.6 = 1;
000245 9a96      	SBI  0x12,6
                 ;PORTD.7 = 0;
000246 9897      	CBI  0x12,7
000247 c06a      	RJMP _0x20C0007
                 ; .FEND
                 ;void setMotor(int ki, int ka)
                 _setMotor:
                 ; .FSTART _setMotor
                 ;if (ki > 0)
000248 93ba      	ST   -Y,R27
000249 93aa      	ST   -Y,R26
                 ;	ki -> Y+2
                 ;	ka -> Y+0
00024a 81aa      	LDD  R26,Y+2
00024b 81bb      	LDD  R27,Y+2+1
00024c 940e 0af7 	CALL __CPW02
00024e f41c      	BRGE _0x52
                 ;PORTD.2 = 1;
00024f 9a92      	SBI  0x12,2
                 ;PORTD.3 = 0;
000250 9893      	CBI  0x12,3
                 ;else
000251 c008      	RJMP _0x57
                 _0x52:
                 ;PORTD.2 = 0;
000252 9892      	CBI  0x12,2
                 ;PORTD.3 = 1;
000253 9a93      	SBI  0x12,3
                 ;ki = abs(ki);
000254 81aa      	LDD  R26,Y+2
000255 81bb      	LDD  R27,Y+2+1
000256 940e 082f 	CALL _abs
000258 83ea      	STD  Y+2,R30
000259 83fb      	STD  Y+2+1,R31
                 _0x57:
                 ;pwmki = ki;
00025a 81ea      	LDD  R30,Y+2
00025b 81fb      	LDD  R31,Y+2+1
00025c bdfb      	OUT  0x2A+1,R31
00025d bdea      	OUT  0x2A,R30
                 ;if (ka > 0)
00025e 940e 09a5 	CALL SUBOPT_0xC
000260 f41c      	BRGE _0x5C
                 ;PORTD.7 = 1;
000261 9a97      	SBI  0x12,7
                 ;PORTD.6 = 0;
000262 9896      	CBI  0x12,6
                 ;else
000263 c008      	RJMP _0x61
                 _0x5C:
                 ;PORTD.7 = 0;
000264 9897      	CBI  0x12,7
                 ;PORTD.6 = 1;
000265 9a96      	SBI  0x12,6
                 ;ka = abs(ka);
000266 81a8      	LD   R26,Y
000267 81b9      	LDD  R27,Y+1
000268 940e 082f 	CALL _abs
00026a 83e8      	ST   Y,R30
00026b 83f9      	STD  Y+1,R31
                 _0x61:
                 ;pwmka = ka;
00026c 81e8      	LD   R30,Y
00026d 81f9      	LDD  R31,Y+1
00026e bdf9      	OUT  0x28+1,R31
00026f bde8      	OUT  0x28,R30
000270 c1ae      	RJMP _0x20C0006
                 ; .FEND
                 ;void rem(int nilai_rem)
                 _rem:
                 ; .FSTART _rem
                 ;PORTD .4 = 1;
000271 93ba      	ST   -Y,R27
000272 93aa      	ST   -Y,R26
                 ;	nilai_rem -> Y+0
000273 9a94      	SBI  0x12,4
                 ;PORTD .5 = 1;
000274 9a95      	SBI  0x12,5
                 ;PORTD .2 = 0;
000275 9892      	CBI  0x12,2
                 ;PORTD .3 = 0;
000276 9893      	CBI  0x12,3
                 ;PORTD .6 = 0;
000277 9896      	CBI  0x12,6
                 ;PORTD .7 = 0;
000278 9897      	CBI  0x12,7
                 ;delay_ms(nilai_rem);
000279 81a8      	LD   R26,Y
00027a 81b9      	LDD  R27,Y+1
00027b 940e 0be2 	CALL _delay_ms
00027d c034      	RJMP _0x20C0007
                 ; .FEND
                 ;void maju_delay(int kec, int lama)
                 ;maju(kec, kec);
                 ;	kec -> Y+2
                 ;	lama -> Y+0
                 ;delay(lama);
                 ;void pilihSpeed(int kec)
                 _pilihSpeed:
                 ; .FSTART _pilihSpeed
                 ;kp = kec * 0.15;
00027e 93ba      	ST   -Y,R27
00027f 93aa      	ST   -Y,R26
                 ;	kec -> Y+0
000280 940e 09aa 	CALL SUBOPT_0xD
                +
000282 e9aa     +LDI R26 , LOW ( 0x3E19999A )
000283 e9b9     +LDI R27 , HIGH ( 0x3E19999A )
000284 e189     +LDI R24 , BYTE3 ( 0x3E19999A )
000285 e39e     +LDI R25 , BYTE4 ( 0x3E19999A )
                 	__GETD2N 0x3E19999A
000286 940e 0b94 	CALL __MULF12
000288 e9ad      	LDI  R26,LOW(_kp)
000289 e0b2      	LDI  R27,HIGH(_kp)
00028a 940e 09b1 	CALL SUBOPT_0xE
                 ;kd = kec * 0.6;
00028c 940e 09aa 	CALL SUBOPT_0xD
                +
00028e e9aa     +LDI R26 , LOW ( 0x3F19999A )
00028f e9b9     +LDI R27 , HIGH ( 0x3F19999A )
000290 e189     +LDI R24 , BYTE3 ( 0x3F19999A )
000291 e39f     +LDI R25 , BYTE4 ( 0x3F19999A )
                 	__GETD2N 0x3F19999A
000292 940e 0b94 	CALL __MULF12
000294 e9af      	LDI  R26,LOW(_kd)
000295 e0b2      	LDI  R27,HIGH(_kd)
000296 940e 09b1 	CALL SUBOPT_0xE
                 ;SPEED = kec;
000298 81e8      	LD   R30,Y
000299 81f9      	LDD  R31,Y+1
00029a 93e0 02a1 	STS  _SPEED,R30
00029c 93f0 02a2 	STS  _SPEED+1,R31
                 ;MIN_SPEED = -(kec * 0.75);
00029e 940e 09aa 	CALL SUBOPT_0xD
                +
0002a0 e0a0     +LDI R26 , LOW ( 0x3F400000 )
0002a1 e0b0     +LDI R27 , HIGH ( 0x3F400000 )
0002a2 e480     +LDI R24 , BYTE3 ( 0x3F400000 )
0002a3 e39f     +LDI R25 , BYTE4 ( 0x3F400000 )
                 	__GETD2N 0x3F400000
0002a4 940e 0b94 	CALL __MULF12
0002a6 940e 0afb 	CALL __ANEGF1
0002a8 eaa3      	LDI  R26,LOW(_MIN_SPEED)
0002a9 e0b2      	LDI  R27,HIGH(_MIN_SPEED)
0002aa 940e 09b1 	CALL SUBOPT_0xE
                 ;MAX_SPEED = kec;
0002ac 81e8      	LD   R30,Y
0002ad 81f9      	LDD  R31,Y+1
0002ae 93e0 02a5 	STS  _MAX_SPEED,R30
0002b0 93f0 02a6 	STS  _MAX_SPEED+1,R31
                 _0x20C0007:
0002b2 9622      	ADIW R28,2
0002b3 9508      	RET
                 ; .FEND
                 ;void maju_cari_garis()
                 ;maju(180, 182);
                 ;cek_sensor(); // 0b01000000)!=0b00000000)
                 ;while ((sensor & 0b00000001) != 0b00000000)
                 ;cek_sensor();
                 ;rem(100);
                 ;void parkir()
                 ;lampu = 0;
                 ;while (1)
                 ;rem(100);
                 ;void scan(int kec)
                 _scan:
                 ; .FSTART _scan
                 ;int rateError;
                 ;int moveVal, moveLeft, moveRight;
                 ;pilihSpeed(kec);
0002b4 93ba      	ST   -Y,R27
0002b5 93aa      	ST   -Y,R26
0002b6 9722      	SBIW R28,2
0002b7 940e 0a6b 	CALL __SAVELOCR6
                 ;	kec -> Y+8
                 ;	rateError -> R16,R17
                 ;	moveVal -> R18,R19
                 ;	moveLeft -> R20,R21
                 ;	moveRight -> Y+6
0002b9 85a8      	LDD  R26,Y+8
0002ba 85b9      	LDD  R27,Y+8+1
0002bb dfc2      	RCALL _pilihSpeed
                 ;sensor = sensor & 0b01111111;
0002bc 940e 09b6 	CALL SUBOPT_0xF
0002be 77ef      	ANDI R30,LOW(0x7F)
0002bf 70f0      	ANDI R31,HIGH(0x7F)
0002c0 93e0 0297 	STS  _sensor,R30
0002c2 93f0 0298 	STS  _sensor+1,R31
                 ;switch (sensor) //  1=kiri 8=kanan
0002c4 940e 09b6 	CALL SUBOPT_0xF
                 ;{               //  7......1
                 ;case 0b00000001:
0002c6 30e1      	CPI  R30,LOW(0x1)
0002c7 e0a0      	LDI  R26,HIGH(0x1)
0002c8 07fa      	CPC  R31,R26
0002c9 f419      	BRNE _0x7D
                 ;error = -6;
0002ca efea      	LDI  R30,LOW(65530)
0002cb efff      	LDI  R31,HIGH(65530)
0002cc c056      	RJMP _0x135
                 ;break; // DOMINAN KANAN
                 ;case 0b00000011:
                 _0x7D:
0002cd 30e3      	CPI  R30,LOW(0x3)
0002ce e0a0      	LDI  R26,HIGH(0x3)
0002cf 07fa      	CPC  R31,R26
0002d0 f419      	BRNE _0x7E
                 ;error = -5;
0002d1 efeb      	LDI  R30,LOW(65531)
0002d2 efff      	LDI  R31,HIGH(65531)
0002d3 c04f      	RJMP _0x135
                 ;break;
                 ;case 0b00000010:
                 _0x7E:
0002d4 30e2      	CPI  R30,LOW(0x2)
0002d5 e0a0      	LDI  R26,HIGH(0x2)
0002d6 07fa      	CPC  R31,R26
0002d7 f419      	BRNE _0x7F
                 ;error = -4;
0002d8 efec      	LDI  R30,LOW(65532)
0002d9 efff      	LDI  R31,HIGH(65532)
0002da c048      	RJMP _0x135
                 ;break;
                 ;case 0b00000110:
                 _0x7F:
0002db 30e6      	CPI  R30,LOW(0x6)
0002dc e0a0      	LDI  R26,HIGH(0x6)
0002dd 07fa      	CPC  R31,R26
0002de f419      	BRNE _0x80
                 ;error = -3;
0002df efed      	LDI  R30,LOW(65533)
0002e0 efff      	LDI  R31,HIGH(65533)
0002e1 c041      	RJMP _0x135
                 ;break;
                 ;case 0b00000100:
                 _0x80:
0002e2 30e4      	CPI  R30,LOW(0x4)
0002e3 e0a0      	LDI  R26,HIGH(0x4)
0002e4 07fa      	CPC  R31,R26
0002e5 f419      	BRNE _0x81
                 ;error = -2;
0002e6 efee      	LDI  R30,LOW(65534)
0002e7 efff      	LDI  R31,HIGH(65534)
0002e8 c03a      	RJMP _0x135
                 ;break;
                 ;case 0b00001100:
                 _0x81:
0002e9 30ec      	CPI  R30,LOW(0xC)
0002ea e0a0      	LDI  R26,HIGH(0xC)
0002eb 07fa      	CPC  R31,R26
0002ec f419      	BRNE _0x82
                 ;error = -1;
0002ed efef      	LDI  R30,LOW(65535)
0002ee efff      	LDI  R31,HIGH(65535)
0002ef c033      	RJMP _0x135
                 ;break;
                 ;case 0b00001000:
                 _0x82:
0002f0 30e8      	CPI  R30,LOW(0x8)
0002f1 e0a0      	LDI  R26,HIGH(0x8)
0002f2 07fa      	CPC  R31,R26
0002f3 f431      	BRNE _0x83
                 ;error = 0;
0002f4 e0e0      	LDI  R30,LOW(0)
0002f5 93e0 0299 	STS  _error,R30
0002f7 93e0 029a 	STS  _error+1,R30
                 ;break;
0002f9 c02d      	RJMP _0x7C
                 ;case 0b00011000:
                 _0x83:
0002fa 31e8      	CPI  R30,LOW(0x18)
0002fb e0a0      	LDI  R26,HIGH(0x18)
0002fc 07fa      	CPC  R31,R26
0002fd f419      	BRNE _0x84
                 ;error = 1;
0002fe e0e1      	LDI  R30,LOW(1)
0002ff e0f0      	LDI  R31,HIGH(1)
000300 c022      	RJMP _0x135
                 ;break;
                 ;case 0b00010000:
                 _0x84:
000301 31e0      	CPI  R30,LOW(0x10)
000302 e0a0      	LDI  R26,HIGH(0x10)
000303 07fa      	CPC  R31,R26
000304 f419      	BRNE _0x85
                 ;error = 2;
000305 e0e2      	LDI  R30,LOW(2)
000306 e0f0      	LDI  R31,HIGH(2)
000307 c01b      	RJMP _0x135
                 ;break;
                 ;case 0b00110000:
                 _0x85:
000308 33e0      	CPI  R30,LOW(0x30)
000309 e0a0      	LDI  R26,HIGH(0x30)
00030a 07fa      	CPC  R31,R26
00030b f419      	BRNE _0x86
                 ;error = 3;
00030c e0e3      	LDI  R30,LOW(3)
00030d e0f0      	LDI  R31,HIGH(3)
00030e c014      	RJMP _0x135
                 ;break;
                 ;case 0b00100000:
                 _0x86:
00030f 32e0      	CPI  R30,LOW(0x20)
000310 e0a0      	LDI  R26,HIGH(0x20)
000311 07fa      	CPC  R31,R26
000312 f419      	BRNE _0x87
                 ;error = 4;
000313 e0e4      	LDI  R30,LOW(4)
000314 e0f0      	LDI  R31,HIGH(4)
000315 c00d      	RJMP _0x135
                 ;break;
                 ;case 0b01100000:
                 _0x87:
000316 36e0      	CPI  R30,LOW(0x60)
000317 e0a0      	LDI  R26,HIGH(0x60)
000318 07fa      	CPC  R31,R26
000319 f419      	BRNE _0x88
                 ;error = 5;
00031a e0e5      	LDI  R30,LOW(5)
00031b e0f0      	LDI  R31,HIGH(5)
00031c c006      	RJMP _0x135
                 ;break;
                 ;case 0b01000000:
                 _0x88:
00031d 34e0      	CPI  R30,LOW(0x40)
00031e e0a0      	LDI  R26,HIGH(0x40)
00031f 07fa      	CPC  R31,R26
000320 f431      	BRNE _0x7C
                 ;error = 6;
000321 e0e6      	LDI  R30,LOW(6)
000322 e0f0      	LDI  R31,HIGH(6)
                 _0x135:
000323 93e0 0299 	STS  _error,R30
000325 93f0 029a 	STS  _error+1,R31
                 ;break; // DOMINAN KIRI
                 _0x7C:
                 ;rateError = error - lastError;
000327 91a0 029b 	LDS  R26,_lastError
000329 91b0 029c 	LDS  R27,_lastError+1
00032b 91e0 0299 	LDS  R30,_error
00032d 91f0 029a 	LDS  R31,_error+1
00032f 1bea      	SUB  R30,R26
000330 0bfb      	SBC  R31,R27
000331 018f      	MOVW R16,R30
                 ;lastError = error;
000332 91e0 0299 	LDS  R30,_error
000334 91f0 029a 	LDS  R31,_error+1
000336 93e0 029b 	STS  _lastError,R30
000338 93f0 029c 	STS  _lastError+1,R31
                 ;moveVal = (int)(error * kp) + (rateError * kd);
00033a 91e0 029d 	LDS  R30,_kp
00033c 91f0 029e 	LDS  R31,_kp+1
00033e 91a0 0299 	LDS  R26,_error
000340 91b0 029a 	LDS  R27,_error+1
000342 940e 0a96 	CALL __MULW12
000344 01bf      	MOVW R22,R30
000345 91e0 029f 	LDS  R30,_kd
000347 91f0 02a0 	LDS  R31,_kd+1
000349 01d8      	MOVW R26,R16
00034a 940e 0a96 	CALL __MULW12
00034c 0fe6      	ADD  R30,R22
00034d 1ff7      	ADC  R31,R23
00034e 019f      	MOVW R18,R30
                 ;moveLeft = SPEED + moveVal;
00034f 91a0 02a1 	LDS  R26,_SPEED
000351 91b0 02a2 	LDS  R27,_SPEED+1
000353 0fea      	ADD  R30,R26
000354 1ffb      	ADC  R31,R27
000355 01af      	MOVW R20,R30
                 ;moveRight = SPEED - moveVal;
000356 91e0 02a1 	LDS  R30,_SPEED
000358 91f0 02a2 	LDS  R31,_SPEED+1
00035a 1be2      	SUB  R30,R18
00035b 0bf3      	SBC  R31,R19
00035c 83ee      	STD  Y+6,R30
00035d 83ff      	STD  Y+6+1,R31
                 ;if (moveLeft > MAX_SPEED)
00035e 940e 09bb 	CALL SUBOPT_0x10
000360 17e4      	CP   R30,R20
000361 07f5      	CPC  R31,R21
000362 f424      	BRGE _0x8A
                 ;moveLeft = MAX_SPEED;
                +
000363 9140 02a5+LDS R20 , 0 + ( _MAX_SPEED )
000365 9150 02a6+LDS R21 , 0 + ( _MAX_SPEED ) + 1
                 	__GETWRMN 20,21,0,_MAX_SPEED
                 ;if (moveLeft < MIN_SPEED)
                 _0x8A:
000367 940e 09c0 	CALL SUBOPT_0x11
000369 174e      	CP   R20,R30
00036a 075f      	CPC  R21,R31
00036b f424      	BRGE _0x8B
                 ;moveLeft = MIN_SPEED;
                +
00036c 9140 02a3+LDS R20 , 0 + ( _MIN_SPEED )
00036e 9150 02a4+LDS R21 , 0 + ( _MIN_SPEED ) + 1
                 	__GETWRMN 20,21,0,_MIN_SPEED
                 ;if (moveRight > MAX_SPEED)
                 _0x8B:
000370 940e 09bb 	CALL SUBOPT_0x10
000372 81ae      	LDD  R26,Y+6
000373 81bf      	LDD  R27,Y+6+1
000374 17ea      	CP   R30,R26
000375 07fb      	CPC  R31,R27
000376 f424      	BRGE _0x8C
                 ;moveRight = MAX_SPEED;
000377 940e 09bb 	CALL SUBOPT_0x10
000379 83ee      	STD  Y+6,R30
00037a 83ff      	STD  Y+6+1,R31
                 ;if (moveRight < MIN_SPEED)
                 _0x8C:
00037b 940e 09c0 	CALL SUBOPT_0x11
00037d 81ae      	LDD  R26,Y+6
00037e 81bf      	LDD  R27,Y+6+1
00037f 17ae      	CP   R26,R30
000380 07bf      	CPC  R27,R31
000381 f424      	BRGE _0x8D
                 ;moveRight = MIN_SPEED;
000382 940e 09c0 	CALL SUBOPT_0x11
000384 83ee      	STD  Y+6,R30
000385 83ff      	STD  Y+6+1,R31
                 ;setMotor(moveLeft, moveRight);
                 _0x8D:
000386 935a      	ST   -Y,R21
000387 934a      	ST   -Y,R20
000388 85a8      	LDD  R26,Y+8
000389 85b9      	LDD  R27,Y+8+1
00038a debd      	RCALL _setMotor
00038b 940e 0a72 	CALL __LOADLOCR6
00038d 962a      	ADIW R28,10
00038e 9508      	RET
                 ; .FEND
                 ;void scanX(int brpkali, int kec)
                 _scanX:
                 ; .FSTART _scanX
                 ;while (hitung < brpkali)
00038f 93ba      	ST   -Y,R27
000390 93aa      	ST   -Y,R26
                 ;	brpkali -> Y+2
                 ;	kec -> Y+0
                 _0x8E:
000391 81ea      	LDD  R30,Y+2
000392 81fb      	LDD  R31,Y+2+1
000393 164e      	CP   R4,R30
000394 065f      	CPC  R5,R31
000395 f4d4      	BRGE _0x90
                 ;while ((sensor & 0b00011100) != 0b00011100)
                 _0x91:
000396 940e 09c5 	CALL SUBOPT_0x12
000398 f029      	BREQ _0x93
                 ;cek_sensor();
000399 de05      	RCALL _cek_sensor
                 ;scan(kec);
00039a 81a8      	LD   R26,Y
00039b 81b9      	LDD  R27,Y+1
00039c df17      	RCALL _scan
00039d cff8      	RJMP _0x91
                 _0x93:
                 ;while ((sensor & 0b00011100) == 0b00011100)
                 _0x94:
00039e 940e 09c5 	CALL SUBOPT_0x12
0003a0 f471      	BRNE _0x96
                 ;cek_sensor();
0003a1 ddfd      	RCALL _cek_sensor
                 ;lampu = 0;
0003a2 98c3      	CBI  0x18,3
                 ;scan(kec);
0003a3 81a8      	LD   R26,Y
0003a4 81b9      	LDD  R27,Y+1
0003a5 df0e      	RCALL _scan
                 ;if ((sensor & 0b00011100) != 0b00011100)
0003a6 940e 09c5 	CALL SUBOPT_0x12
0003a8 f029      	BREQ _0x99
                 ;hitung++;
0003a9 01f2      	MOVW R30,R4
0003aa 9631      	ADIW R30,1
0003ab 012f      	MOVW R4,R30
0003ac 9731      	SBIW R30,1
                 ;lampu = 1;
0003ad 9ac3      	SBI  0x18,3
                 ;};
                 _0x99:
0003ae cfef      	RJMP _0x94
                 _0x96:
                 ;};
0003af cfe1      	RJMP _0x8E
                 _0x90:
                 ;hitung = 0;
0003b0 2444      	CLR  R4
0003b1 2455      	CLR  R5
0003b2 c06c      	RJMP _0x20C0006
                 ; .FEND
                 ;void scanTimer(int countGoal, int kec, int lama)
                 _scanTimer:
                 ; .FSTART _scanTimer
                 ;count = 0;
0003b3 93ba      	ST   -Y,R27
0003b4 93aa      	ST   -Y,R26
                 ;	countGoal -> Y+4
                 ;	kec -> Y+2
                 ;	lama -> Y+0
0003b5 e0e0      	LDI  R30,LOW(0)
0003b6 93e0 02a7 	STS  _count,R30
0003b8 93e0 02a8 	STS  _count+1,R30
                 ;while (count < countGoal)
                 _0x9C:
0003ba 81ec      	LDD  R30,Y+4
0003bb 81fd      	LDD  R31,Y+4+1
0003bc 91a0 02a7 	LDS  R26,_count
0003be 91b0 02a8 	LDS  R27,_count+1
0003c0 17ae      	CP   R26,R30
0003c1 07bf      	CPC  R27,R31
0003c2 f44c      	BRGE _0x9E
                 ;cek_sensor();
0003c3 dddb      	RCALL _cek_sensor
                 ;scan(kec);
0003c4 81aa      	LDD  R26,Y+2
0003c5 81bb      	LDD  R27,Y+2+1
0003c6 deed      	RCALL _scan
                 ;count++;
0003c7 eaa7      	LDI  R26,LOW(_count)
0003c8 e0b2      	LDI  R27,HIGH(_count)
0003c9 940e 09c9 	CALL SUBOPT_0x13
0003cb cfee      	RJMP _0x9C
                 _0x9E:
                 ;rem(lama);
0003cc 940e 09cf 	CALL SUBOPT_0x14
0003ce 9626      	ADIW R28,6
0003cf 9508      	RET
                 ; .FEND
                 ;void scanTka(int brpkali)
                 ;while (hitung < brpkali)
                 ;	brpkali -> Y+0
                 ;cek_sensor();
                 ;while ((sensor & 0b01110000) != 0b01110000) // kanan
                 ;cek_sensor();
                 ;scan(170);
                 ;while ((sensor & 0b01110000) == 0b01110000)
                 ;cek_sensor();
                 ;scan(170);
                 ;if ((sensor & 0b01110000) != 0b01110000)
                 ;hitung++;
                 ;lcd_kedip(1);
                 ;};
                 ;};
                 ;hitung = 0;
                 ;void scanTki(int brpkali)
                 ;while (hitung < brpkali)
                 ;	brpkali -> Y+0
                 ;cek_sensor();
                 ;while ((sensor & 0b00000111) != 0b00000111) // kanan
                 ;cek_sensor();
                 ;scan(170);
                 ;while ((sensor & 0b00000111) == 0b00000111)
                 ;cek_sensor();
                 ;scan(170);
                 ;if ((sensor & 0b00000111) != 0b00000111)
                 ;hitung++;
                 ;lcd_kedip(1);
                 ;};
                 ;};
                 ;hitung = 0;
                 ;void scan7ki()
                 ;cek_sensor();
                 ;while ((sensor & 0b01000000) != 0b01000000)
                 ;cek_sensor();
                 ;scan(170);
                 ;void scan7ka()
                 ;cek_sensor();
                 ;while ((sensor & 0b01000000) != 0b00000000)
                 ;cek_sensor();
                 ;scan(170);
                 ;void scan7ki2()
                 ;cek_sensor();
                 ;while (sensor == 0b00000000) // sensor !=0b00111111||0b00000011|| 0b00000001
                 ;cek_sensor();
                 ;scan(170);
                 ;void belki(int kec, int lama)
                 _belki:
                 ; .FSTART _belki
                 ;cek_sensor();
0003d0 93ba      	ST   -Y,R27
0003d1 93aa      	ST   -Y,R26
                 ;	kec -> Y+2
                 ;	lama -> Y+0
0003d2 ddcc      	RCALL _cek_sensor
                 ;while (sen[0] || sen[1])
                 _0xBC:
0003d3 91e0 0290 	LDS  R30,_sen
0003d5 30e0      	CPI  R30,0
0003d6 f421      	BRNE _0xBF
                +
0003d7 91e0 0291+LDS R30 , _sen + ( 1 )
                 	__GETB1MN _sen,1
0003d9 30e0      	CPI  R30,0
0003da f019      	BREQ _0xBE
                 _0xBF:
                 ;kiri(kec, kec);
0003db 940e 09d3 	CALL SUBOPT_0x15
                 ;cek_sensor();
0003dd cff5      	RJMP _0xBC
                 _0xBE:
                 ;while (!sen[0] && !sen[1])
                 _0xC1:
0003de 91e0 0290 	LDS  R30,_sen
0003e0 30e0      	CPI  R30,0
0003e1 f421      	BRNE _0xC4
                +
0003e2 91e0 0291+LDS R30 , _sen + ( 1 )
                 	__GETB1MN _sen,1
0003e4 30e0      	CPI  R30,0
0003e5 f009      	BREQ _0xC5
                 _0xC4:
0003e6 c003      	RJMP _0xC3
                 _0xC5:
                 ;kiri(kec, kec);
0003e7 940e 09d3 	CALL SUBOPT_0x15
                 ;cek_sensor();
0003e9 cff4      	RJMP _0xC1
                 _0xC3:
                 ;if (lama > 0)
0003ea 940e 09a5 	CALL SUBOPT_0xC
0003ec f414      	BRGE _0xC6
                 ;rem(lama);
0003ed 940e 09cf 	CALL SUBOPT_0x14
                 _0xC6:
0003ef c02f      	RJMP _0x20C0006
                 ; .FEND
                 ;void belki2()
                 ;cek_sensor();
                 ;while ((sensor & 0b00000001) != 0b00000000)
                 ;cek_sensor();
                 ;kiri(150, 150);
                 ;void belka(int kec, int lama)
                 _belka:
                 ; .FSTART _belka
                 ;cek_sensor();
0003f0 93ba      	ST   -Y,R27
0003f1 93aa      	ST   -Y,R26
                 ;	kec -> Y+2
                 ;	lama -> Y+0
0003f2 ddac      	RCALL _cek_sensor
                 ;while (sen[5] || sen[6])
                 _0xCA:
                +
0003f3 91e0 0295+LDS R30 , _sen + ( 5 )
                 	__GETB1MN _sen,5
0003f5 30e0      	CPI  R30,0
0003f6 f421      	BRNE _0xCD
                +
0003f7 91e0 0296+LDS R30 , _sen + ( 6 )
                 	__GETB1MN _sen,6
0003f9 30e0      	CPI  R30,0
0003fa f019      	BREQ _0xCC
                 _0xCD:
                 ;kanan(kec, kec);
0003fb 940e 09da 	CALL SUBOPT_0x16
                 ;cek_sensor();
0003fd cff5      	RJMP _0xCA
                 _0xCC:
                 ;while (!sen[5] && !sen[6])
                 _0xCF:
                +
0003fe 91e0 0295+LDS R30 , _sen + ( 5 )
                 	__GETB1MN _sen,5
000400 30e0      	CPI  R30,0
000401 f421      	BRNE _0xD2
                +
000402 91e0 0296+LDS R30 , _sen + ( 6 )
                 	__GETB1MN _sen,6
000404 30e0      	CPI  R30,0
000405 f009      	BREQ _0xD3
                 _0xD2:
000406 c003      	RJMP _0xD1
                 _0xD3:
                 ;kanan(kec, kec);
000407 940e 09da 	CALL SUBOPT_0x16
                 ;cek_sensor();
000409 cff4      	RJMP _0xCF
                 _0xD1:
                 ;if (lama > 0)
00040a 940e 09a5 	CALL SUBOPT_0xC
00040c f414      	BRGE _0xD4
                 ;rem(lama);
00040d 940e 09cf 	CALL SUBOPT_0x14
                 _0xD4:
00040f c00f      	RJMP _0x20C0006
                 ; .FEND
                 ;void belkacenter()
                 ;cek_sensor();
                 ;while ((sensor & 0b00001000) != 0b00001000)
                 ;cek_sensor();
                 ;kanan(180, 180);
                 ;if ((sensor & 0b10000000) == 0b10000000)
                 ;lcd_kedip(1);
                 ;void scan_delay(int ms)
                 ;k = 0;
                 ;	ms -> Y+0
                 ;maju(172, 170);
                 ;while (k < ms / 10)
                 ;delay_ms(10);
                 ;k++;
                 ;cek_sensor();
                 ;scan(180);
                 ;void belokKanan(int kec, int lama_rem) {
                 _belokKanan:
                 ; .FSTART _belokKanan
                 ;if(mapMirror[0] == 0) {
000410 93ba      	ST   -Y,R27
000411 93aa      	ST   -Y,R26
                 ;	kec -> Y+2
                 ;	lama_rem -> Y+0
000412 e2aa      	LDI  R26,LOW(_mapMirror)
000413 e0b0      	LDI  R27,HIGH(_mapMirror)
000414 940e 0ace 	CALL __EEPROMRDW
000416 9730      	SBIW R30,0
000417 f421      	BRNE _0xDC
                 ;belka(kec, lama_rem);
000418 940e 09e1 	CALL SUBOPT_0x17
00041a dfd5      	RCALL _belka
                 ;} else {
00041b c003      	RJMP _0xDD
                 _0xDC:
                 ;belki(kec, lama_rem);
00041c 940e 09e1 	CALL SUBOPT_0x17
00041e dfb1      	RCALL _belki
                 _0xDD:
                 _0x20C0006:
00041f 9624      	ADIW R28,4
000420 9508      	RET
                 ; .FEND
                 ;void belokKiri(int kec, int lama_rem) {
                 ;if(mapMirror[0] == 0) {
                 ;	kec -> Y+2
                 ;	lama_rem -> Y+0
                 ;belki(kec, lama_rem);
                 ;} else {
                 ;belka(kec, lama_rem);
                 ;void griper()
                 ; 0000 0061 {
                 ;capit_lepas;
                 ;lengan_tengah;
                 ;delay_ms(5000);
                 ;lengan_bawah;
                 ;delay_ms(5000);
                 ;capit_ambil;
                 ;delay_ms(7000);
                 ;lengan_atas;
                 ;delay_ms(5000);
                 ;lengan_bawah;
                 ;delay_ms(5000);
                 ;capit_lepas;
                 ;void ambil(int lama)
                 _ambil:
                 ; .FSTART _ambil
                 ;capit_ambil;
000421 93ba      	ST   -Y,R27
000422 93aa      	ST   -Y,R26
                 ;	lama -> Y+0
000423 eeee      	LDI  R30,LOW(238)
000424 940e 09e8 	CALL SUBOPT_0x18
                 ;delay(lama);
                 ;lengan_atas;
                 ;delay(lama);
000426 81a8      	LD   R26,Y
000427 81b9      	LDD  R27,Y+1
000428 dd25      	RCALL _delay
000429 940c 088b 	JMP  _0x20C0003
                 ; .FEND
                 ;void taruh(int lama)
                 _taruh:
                 ; .FSTART _taruh
                 ;lengan_bawah;
00042b 93ba      	ST   -Y,R27
00042c 93aa      	ST   -Y,R26
                 ;	lama -> Y+0
00042d efe0      	LDI  R30,LOW(240)
00042e 93e0 028c 	STS  _pos_servo2,R30
                 ;delay(lama);
000430 81a8      	LD   R26,Y
000431 81b9      	LDD  R27,Y+1
000432 dd1b      	RCALL _delay
                 ;capit_lepas;
000433 eee6      	LDI  R30,LOW(230)
000434 940e 09e8 	CALL SUBOPT_0x18
                 ;delay(lama);
                 ;lengan_atas;
000436 940c 088b 	JMP  _0x20C0003
                 ; .FEND
                 ;void bawah_lepas()
                 _bawah_lepas:
                 ; .FSTART _bawah_lepas
                 ;lengan_bawah;
000438 efe0      	LDI  R30,LOW(240)
000439 93e0 028c 	STS  _pos_servo2,R30
                 ;capit_lepas;
00043b eee6      	LDI  R30,LOW(230)
00043c 93e0 028b 	STS  _pos_servo1,R30
00043e 9508      	RET
                 ; .FEND
                 ;void atas_lepas()
                 ;lengan_atas;
                 ;capit_lepas;
                 ;void fromBtoGreen()
                 ; 0000 0062 {
                 ;scanX(2, 120);
                 ;scanX(1, 80);
                 ;scanTimer(40, 80, 50);
                 ;taruh(20);
                 ;mundur(100, 100); delay(25);
                 ;belokKiri(100, 10);
                 ;scanX(1, 120);
                 ;scanX(1, 100);
                 ;belokKiri(100, 10);
                 ;scanX(2, 120);
                 ;bawah_lepas();
                 ;scanX(1, 80);
                 ;scanTimer(30, 80, 50);
                 ;ambil(20);
                 ;void fromBtoYellow()
                 ;scanX(1, 80);
                 ;belokKanan(100, 10);
                 ;scanX(2, 120);
                 ;scanX(1, 80);
                 ;scanTimer(35, 95, 50);
                 ;taruh(20);
                 ;mundur(100, 100); delay(25);
                 ;belokKiri(100, 0); belokKiri(100, 20);
                 ;scanX(4, 150);
                 ;scanX(1, 80);
                 ;belokKiri(100, 10);
                 ;scanX(1, 80);
                 ;bawah_lepas();
                 ;scanTimer(45, 80, 50);
                 ;ambil(20);
                 ;void fromBtoRed() {
                 ;scanX(1, 80);
                 ;belokKiri(100, 10);
                 ;scanX(2, 120);
                 ;scanX(1, 80);
                 ;scanTimer(35, 95, 50);
                 ;taruh(20);
                 ;mundur(100, 100); delay(25);
                 ;belokKanan(100, 0); belokKanan(100, 20);
                 ;scanX(1, 100);
                 ;belokKanan(100, 10);
                 ;scanX(1, 80);
                 ;bawah_lepas();
                 ;scanTimer(45, 95, 50);
                 ;ambil(20);
                 ;void fromCtoGreen() {
                 ;scanX(1, 80);
                 ;belokKiri(100, 10);
                 ;scanX(4, 150);
                 ;scanX(1, 80);
                 ;scanTimer(35, 95, 50);
                 ;taruh(20);
                 ;mundur(100, 100); delay(25);
                 ;belokKanan(100, 0); belokKanan(100, 20);
                 ;scanX(1, 120);
                 ;scanX(1, 100);
                 ;belokKanan(100, 20);
                 ;scanX(3, 150);
                 ;scanX(1, 80);
                 ;belokKanan(100, 10);
                 ;bawah_lepas();
                 ;scanTimer(30, 80, 50);
                 ;ambil(20);
                 ;void fromCtoYellow() {
                 _fromCtoYellow:
                 ; .FSTART _fromCtoYellow
                 ;scanX(1, 80);
00043f 940e 09f2 	CALL SUBOPT_0x19
                 ;belokKanan(100, 10);
000441 940e 09fa 	CALL SUBOPT_0x1A
000443 e0aa      	LDI  R26,LOW(10)
000444 e0b0      	LDI  R27,0
000445 dfca      	RCALL _belokKanan
                 ;scanX(1, 80);
000446 940e 09f2 	CALL SUBOPT_0x19
                 ;scanTimer(45, 95, 50);
000448 e2ed      	LDI  R30,LOW(45)
000449 e0f0      	LDI  R31,HIGH(45)
00044a 93fa      	ST   -Y,R31
00044b 93ea      	ST   -Y,R30
00044c e5ef      	LDI  R30,LOW(95)
00044d e0f0      	LDI  R31,HIGH(95)
00044e 940e 09ff 	CALL SUBOPT_0x1B
                 ;taruh(20);
000450 dfda      	RCALL _taruh
                 ;mundur(100, 100); delay(25);
000451 e6e4      	LDI  R30,LOW(100)
000452 93ea      	ST   -Y,R30
000453 e6a4      	LDI  R26,LOW(100)
000454 ddde      	RCALL _mundur
000455 e1a9      	LDI  R26,LOW(25)
000456 e0b0      	LDI  R27,0
000457 dcf6      	RCALL _delay
                 ;belokKanan(100, 20);
000458 940e 09fa 	CALL SUBOPT_0x1A
00045a e1a4      	LDI  R26,LOW(20)
00045b e0b0      	LDI  R27,0
00045c dfb3      	RCALL _belokKanan
                 ;scanX(3, 150);
00045d e0e3      	LDI  R30,LOW(3)
00045e e0f0      	LDI  R31,HIGH(3)
00045f 940e 0a08 	CALL SUBOPT_0x1C
                 ;scanX(1, 100);
000461 e0e1      	LDI  R30,LOW(1)
000462 e0f0      	LDI  R31,HIGH(1)
000463 93fa      	ST   -Y,R31
000464 93ea      	ST   -Y,R30
000465 e6a4      	LDI  R26,LOW(100)
000466 e0b0      	LDI  R27,0
000467 df27      	RCALL _scanX
                 ;belokKanan(100, 10);
000468 940e 09fa 	CALL SUBOPT_0x1A
00046a e0aa      	LDI  R26,LOW(10)
00046b e0b0      	LDI  R27,0
00046c dfa3      	RCALL _belokKanan
                 ;scanX(2, 150);
00046d e0e2      	LDI  R30,LOW(2)
00046e e0f0      	LDI  R31,HIGH(2)
00046f 940e 0a08 	CALL SUBOPT_0x1C
                 ;bawah_lepas();
000471 dfc6      	RCALL _bawah_lepas
                 ;scanX(1, 80);
000472 940e 09f2 	CALL SUBOPT_0x19
                 ;scanTimer(30, 80, 50);
000474 e1ee      	LDI  R30,LOW(30)
000475 e0f0      	LDI  R31,HIGH(30)
000476 93fa      	ST   -Y,R31
000477 93ea      	ST   -Y,R30
000478 e5e0      	LDI  R30,LOW(80)
000479 e0f0      	LDI  R31,HIGH(80)
00047a 940e 09ff 	CALL SUBOPT_0x1B
                 ;ambil(20);
00047c dfa4      	RCALL _ambil
00047d 9508      	RET
                 ; .FEND
                 ;void fromCtoRed() {
                 ;mundur(100, 100); delay(25);
                 ;belokKiri(100, 0); belokKiri(100, 20);
                 ;scanX(2, 120);
                 ;scanX(1, 80);
                 ;scanTimer(30, 80, 50);
                 ;taruh(20);
                 ;mundur(100, 100); delay(25);
                 ;belokKanan(100, 20);
                 ;scanX(2, 150);
                 ;bawah_lepas();
                 ;scanX(1, 80);
                 ;scanTimer(30, 80, 50);
                 ;ambil(20);
                 ;void Program_Jalan()
                 _Program_Jalan:
                 ; .FSTART _Program_Jalan
                 ;fromCtoYellow();
00047e dfc0      	RCALL _fromCtoYellow
00047f 9508      	RET
                 ; .FEND
                 ;int menuSelect = 0;
                 ;bool isChildSelect = false;
                 ;bool isSelect = false;
                 ;bool isTestTombol = false;
                 ;void runBot(void);
                 ;void calibration(void);
                 ;void Program_Jalan(void);
                 ;void test_motor(void);
                 ;void test_tombol(void);
                 ;void changeMenu() {
                 ; 0000 0063 void changeMenu() {
                 _changeMenu:
                 ; .FSTART _changeMenu
                 ;lampu = 1;
000480 9ac3      	SBI  0x18,3
                 ;if(!isSelect && !isChildSelect) {
000481 91e0 02ae 	LDS  R30,_isSelect
000483 30e0      	CPI  R30,0
000484 f421      	BRNE _0xE3
000485 91e0 02ad 	LDS  R30,_isChildSelect
000487 30e0      	CPI  R30,0
000488 f009      	BREQ _0xE4
                 _0xE3:
000489 c006      	RJMP _0xE2
                 _0xE4:
                 ;lcd_clear();
00048a 940e 0a0e 	CALL SUBOPT_0x1D
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Menu");
                +
00048c eea9     +LDI R26 , LOW ( 2 * _0x0 + ( 107 ) )
00048d e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 107 ) )
                 	__POINTW2FN _0x0,107
00048e 940e 08d8 	CALL _lcd_putsf
                 ;switch (menuSelect) {
                 _0xE2:
000490 91e0 02ab 	LDS  R30,_menuSelect
000492 91f0 02ac 	LDS  R31,_menuSelect+1
                 ;case 0: // Run bot
000494 9730      	SBIW R30,0
000495 f431      	BRNE _0xE8
                 ;if(isSelect) runBot(); break;
000496 91e0 02ae 	LDS  R30,_isSelect
000498 30e0      	CPI  R30,0
000499 f009      	BREQ _0xE9
00049a d01f      	RCALL _runBot
                 _0xE9:
00049b c01d      	RJMP _0xE7
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("Jalankan Robot");
                 ;break;
                 ;case 1: // Calibration
                 _0xE8:
00049c 30e1      	CPI  R30,LOW(0x1)
00049d e0a0      	LDI  R26,HIGH(0x1)
00049e 07fa      	CPC  R31,R26
00049f f431      	BRNE _0xEA
                 ;if(isSelect) calibration(); break;
0004a0 91e0 02ae 	LDS  R30,_isSelect
0004a2 30e0      	CPI  R30,0
0004a3 f009      	BREQ _0xEB
0004a4 d03d      	RCALL _calibration
                 _0xEB:
0004a5 c013      	RJMP _0xE7
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("Kalibrasi Sensor");
                 ;break;
                 ;case 2: // Test Motor
                 _0xEA:
0004a6 30e2      	CPI  R30,LOW(0x2)
0004a7 e0a0      	LDI  R26,HIGH(0x2)
0004a8 07fa      	CPC  R31,R26
0004a9 f431      	BRNE _0xEC
                 ;if(isSelect) test_motor(); break;
0004aa 91e0 02ae 	LDS  R30,_isSelect
0004ac 30e0      	CPI  R30,0
0004ad f009      	BREQ _0xED
0004ae d044      	RCALL _test_motor
                 _0xED:
0004af c009      	RJMP _0xE7
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("Test Motor");
                 ;break;
                 ;case 3: // Test tombol
                 _0xEC:
0004b0 30e3      	CPI  R30,LOW(0x3)
0004b1 e0a0      	LDI  R26,HIGH(0x3)
0004b2 07fa      	CPC  R31,R26
0004b3 f429      	BRNE _0xF0
                 ;if(isSelect) test_tombol(); break;
0004b4 91e0 02ae 	LDS  R30,_isSelect
0004b6 30e0      	CPI  R30,0
0004b7 f009      	BREQ _0xEF
0004b8 d067      	RCALL _test_tombol
                 _0xEF:
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("Test Tombol");
                 ;break;
                 ;default:
                 _0xF0:
                 ;break;
                 _0xE7:
0004b9 9508      	RET
                 ; .FEND
                 ;void runBot() {
                 _runBot:
                 ; .FSTART _runBot
                 ;if(!isChildSelect) {
0004ba 91e0 02ad 	LDS  R30,_isChildSelect
0004bc 30e0      	CPI  R30,0
0004bd f471      	BRNE _0xF1
                 ;lcd_clear();
0004be 940e 0a0e 	CALL SUBOPT_0x1D
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Run Bot");
                +
0004c0 e2a5     +LDI R26 , LOW ( 2 * _0x0 + ( 167 ) )
0004c1 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 167 ) )
                 	__POINTW2FN _0x0,167
0004c2 940e 0994 	CALL SUBOPT_0xA
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("Hold 1 to start");
                +
0004c4 e2ad     +LDI R26 , LOW ( 2 * _0x0 + ( 175 ) )
0004c5 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 175 ) )
                 	__POINTW2FN _0x0,175
0004c6 940e 08d8 	CALL _lcd_putsf
                 ;isChildSelect = true;
0004c8 e0e1      	LDI  R30,LOW(1)
0004c9 93e0 02ad 	STS  _isChildSelect,R30
                 ;} else if(isChildSelect) {
0004cb c015      	RJMP _0xF2
                 _0xF1:
0004cc 91e0 02ad 	LDS  R30,_isChildSelect
0004ce 30e0      	CPI  R30,0
0004cf f089      	BREQ _0xF3
                 ;lcd_clear();
0004d0 940e 088d 	CALL _lcd_clear
                 ;lcd_gotoxy(0, 1);
0004d2 940e 0a11 	CALL SUBOPT_0x1E
                 ;lcd_putsf("Running...");
                +
0004d4 e3ad     +LDI R26 , LOW ( 2 * _0x0 + ( 191 ) )
0004d5 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 191 ) )
                 	__POINTW2FN _0x0,191
0004d6 940e 08d8 	CALL _lcd_putsf
                 ;Program_Jalan();
0004d8 dfa5      	RCALL _Program_Jalan
                 ;isChildSelect = false; menuSelect = 0;
0004d9 e0e0      	LDI  R30,LOW(0)
0004da 93e0 02ad 	STS  _isChildSelect,R30
0004dc 93e0 02ab 	STS  _menuSelect,R30
0004de 93e0 02ac 	STS  _menuSelect+1,R30
                 ;changeMenu();
0004e0 df9f      	RCALL _changeMenu
                 _0xF3:
                 _0xF2:
0004e1 9508      	RET
                 ; .FEND
                 ;void calibration() {
                 _calibration:
                 ; .FSTART _calibration
                 ;scan_garis();
0004e2 dcbf      	RCALL _scan_garis
                 ;delay(300);
0004e3 e2ac      	LDI  R26,LOW(300)
0004e4 e0b1      	LDI  R27,HIGH(300)
0004e5 dc68      	RCALL _delay
                 ;scan_back();
0004e6 dcd9      	RCALL _scan_back
                 ;delay(100);
0004e7 e6a4      	LDI  R26,LOW(100)
0004e8 e0b0      	LDI  R27,0
0004e9 dc64      	RCALL _delay
                 ;hit_tengah();
0004ea dcf3      	RCALL _hit_tengah
                 ;isChildSelect = false; menuSelect = 1;
0004eb e0e0      	LDI  R30,LOW(0)
0004ec 93e0 02ad 	STS  _isChildSelect,R30
0004ee e0e1      	LDI  R30,LOW(1)
0004ef e0f0      	LDI  R31,HIGH(1)
0004f0 940e 0a16 	CALL SUBOPT_0x1F
                 ;changeMenu();
0004f2 c02b      	RJMP _0x20C0005
                 ; .FEND
                 ;void test_motor()
                 _test_motor:
                 ; .FSTART _test_motor
                 ;lcd_clear();
0004f3 940e 0a0e 	CALL SUBOPT_0x1D
                 ;lcd_gotoxy(0, 0);
                 ;lcd_putsf("Test Motor");
                +
0004f5 e0ae     +LDI R26 , LOW ( 2 * _0x0 + ( 144 ) )
0004f6 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 144 ) )
                 	__POINTW2FN _0x0,144
0004f7 940e 0994 	CALL SUBOPT_0xA
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("+100 +100");
                +
0004f9 e4a8     +LDI R26 , LOW ( 2 * _0x0 + ( 202 ) )
0004fa e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 202 ) )
                 	__POINTW2FN _0x0,202
0004fb 940e 08d8 	CALL _lcd_putsf
                 ;maju(100, 100);
0004fd e6e4      	LDI  R30,LOW(100)
0004fe 93ea      	ST   -Y,R30
0004ff e6a4      	LDI  R26,LOW(100)
000500 940e 0a1b 	CALL SUBOPT_0x20
                 ;delay_ms(50);
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("-100 -100");
                +
000502 e5a2     +LDI R26 , LOW ( 2 * _0x0 + ( 212 ) )
000503 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 212 ) )
                 	__POINTW2FN _0x0,212
000504 940e 08d8 	CALL _lcd_putsf
                 ;maju(-100, -100);
000506 e9ec      	LDI  R30,LOW(156)
000507 93ea      	ST   -Y,R30
000508 e9ac      	LDI  R26,LOW(156)
000509 940e 0a1b 	CALL SUBOPT_0x20
                 ;delay_ms(50);
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("+100 -100");
                +
00050b e5ac     +LDI R26 , LOW ( 2 * _0x0 + ( 222 ) )
00050c e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 222 ) )
                 	__POINTW2FN _0x0,222
00050d 940e 08d8 	CALL _lcd_putsf
                 ;maju(100, -100);
00050f e6e4      	LDI  R30,LOW(100)
000510 93ea      	ST   -Y,R30
000511 e9ac      	LDI  R26,LOW(156)
000512 940e 0a1b 	CALL SUBOPT_0x20
                 ;delay_ms(50);
                 ;lcd_gotoxy(0, 1);
                 ;lcd_putsf("-100 +100");
                +
000514 e6a6     +LDI R26 , LOW ( 2 * _0x0 + ( 232 ) )
000515 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 232 ) )
                 	__POINTW2FN _0x0,232
000516 940e 08d8 	CALL _lcd_putsf
                 ;maju(-100, 100);
000518 e9ec      	LDI  R30,LOW(156)
000519 93ea      	ST   -Y,R30
00051a e6a4      	LDI  R26,LOW(100)
00051b dd10      	RCALL _maju
                 ;lcd_clear();
00051c 940e 0a0e 	CALL SUBOPT_0x1D
                 ;lcd_gotoxy(0, 0);
                 ;changeMenu();
                 _0x20C0005:
00051e df61      	RCALL _changeMenu
00051f 9508      	RET
                 ; .FEND
                 ;void test_tombol()
                 _test_tombol:
                 ; .FSTART _test_tombol
                 ;lcd_gotoxy(0, 1);
000520 940e 0a11 	CALL SUBOPT_0x1E
                 ;lcd_putsf("Hold 1 to exit");
                +
000522 e7a0     +LDI R26 , LOW ( 2 * _0x0 + ( 242 ) )
000523 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 242 ) )
                 	__POINTW2FN _0x0,242
000524 940e 08d8 	CALL _lcd_putsf
                 ;isTestTombol = true;
000526 e0e1      	LDI  R30,LOW(1)
000527 93e0 02af 	STS  _isTestTombol,R30
                 ;while (1)
                 _0xF4:
                 ;if (!isTestTombol) break;
000529 91e0 02af 	LDS  R30,_isTestTombol
00052b 30e0      	CPI  R30,0
00052c f409      	BRNE _0xF7
00052d c04a      	RJMP _0xF6
                 ;if ((t1 == 0) && !isDelayClick1)
                 _0xF7:
00052e 9998      	SBIC 0x13,0
00052f c004      	RJMP _0xF9
000530 91e0 028f 	LDS  R30,_isDelayClick1
000532 30e0      	CPI  R30,0
000533 f009      	BREQ _0xFA
                 _0xF9:
000534 c023      	RJMP _0xF8
                 _0xFA:
                 ;lcd_gotoxy(0, 0);
000535 940e 098f 	CALL SUBOPT_0x9
                 ;lcd_putsf("tombol = 1     ");
                +
000537 e7af     +LDI R26 , LOW ( 2 * _0x0 + ( 257 ) )
000538 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 257 ) )
                 	__POINTW2FN _0x0,257
000539 940e 08d8 	CALL _lcd_putsf
                 ;buttonhold[0] += 1;
00053b 940e 0a22 	CALL SUBOPT_0x21
                 ;while ((t1 == 0) && !isDelayClick1) {
                 _0xFB:
00053d 9998      	SBIC 0x13,0
00053e c004      	RJMP _0xFE
00053f 91e0 028f 	LDS  R30,_isDelayClick1
000541 30e0      	CPI  R30,0
000542 f009      	BREQ _0xFF
                 _0xFE:
000543 c013      	RJMP _0xFD
                 _0xFF:
                 ;isDelayClick1 = true;
000544 940e 0a2c 	CALL SUBOPT_0x22
                 ;delay(3);
                 ;if(buttonhold[0] > 20) {
000546 f064      	BRLT _0x100
                 ;isDelayClick1 = false; menuSelect = 3; isTestTombol = false;
000547 e0e0      	LDI  R30,LOW(0)
000548 93e0 028f 	STS  _isDelayClick1,R30
00054a e0e3      	LDI  R30,LOW(3)
00054b e0f0      	LDI  R31,HIGH(3)
00054c 940e 0a16 	CALL SUBOPT_0x1F
00054e e0e0      	LDI  R30,LOW(0)
00054f 93e0 02af 	STS  _isTestTombol,R30
                 ;changeMenu(); break;
000551 df2e      	RCALL _changeMenu
000552 c004      	RJMP _0xFD
                 ;isDelayClick1 = false;
                 _0x100:
000553 e0e0      	LDI  R30,LOW(0)
000554 93e0 028f 	STS  _isDelayClick1,R30
000556 cfe6      	RJMP _0xFB
                 _0xFD:
                 ;} else if (t1 == 1) {
000557 c007      	RJMP _0x101
                 _0xF8:
000558 9b98      	SBIS 0x13,0
000559 c005      	RJMP _0x102
                 ;buttonhold[0] = 0;
00055a 940e 0a39 	CALL SUBOPT_0x23
                 ;isDelayClick1 = false;
00055c e0e0      	LDI  R30,LOW(0)
00055d 93e0 028f 	STS  _isDelayClick1,R30
                 ;if (t2 == 0)
                 _0x102:
                 _0x101:
00055f 9999      	SBIC 0x13,1
000560 c006      	RJMP _0x103
                 ;lcd_gotoxy(0, 0);
000561 940e 098f 	CALL SUBOPT_0x9
                 ;lcd_putsf("tombol = 2     ");
                +
000563 e8af     +LDI R26 , LOW ( 2 * _0x0 + ( 273 ) )
000564 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 273 ) )
                 	__POINTW2FN _0x0,273
000565 940e 08d8 	CALL _lcd_putsf
                 ;if (t3 == 0)
                 _0x103:
000567 999a      	SBIC 0x13,2
000568 c006      	RJMP _0x104
                 ;lcd_gotoxy(0, 0);
000569 940e 098f 	CALL SUBOPT_0x9
                 ;lcd_putsf("tombol = 3     ");
                +
00056b e9af     +LDI R26 , LOW ( 2 * _0x0 + ( 289 ) )
00056c e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 289 ) )
                 	__POINTW2FN _0x0,289
00056d 940e 08d8 	CALL _lcd_putsf
                 ;if (t4 == 0)
                 _0x104:
00056f 999b      	SBIC 0x13,3
000570 c006      	RJMP _0x105
                 ;lcd_gotoxy(0, 0);
000571 940e 098f 	CALL SUBOPT_0x9
                 ;lcd_putsf("tombol = 4     ");
                +
000573 eaaf     +LDI R26 , LOW ( 2 * _0x0 + ( 305 ) )
000574 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 305 ) )
                 	__POINTW2FN _0x0,305
000575 940e 08d8 	CALL _lcd_putsf
                 _0x105:
000577 cfb1      	RJMP _0xF4
                 _0xF6:
000578 9508      	RET
                 ; .FEND
                 ;void tes_sensor()
                 ;for (i = 0; i < 7; i++)
                 ;lcd_gotoxy(0, 0);
                 ;sprintf(buff, "sensor:%d = %d  ", i, read_adc(i));
                 ;lcd_puts(buff);
                 ;delay_ms(100);
                 ;void tampil_count()
                 ;lcd_gotoxy(0, 0);
                 ;sprintf(buff, " %d  ", second);
                 ;lcd_puts(buff);
                 ;int bacawarna()
                 ;nadc7 = read_adc(7);
                 ;lcd_gotoxy(0, 1);
                 ;sprintf(buff, "%d   ", nadc7);
                 ;lcd_puts(buff);
                 ;delay_ms(100);
                 ;return (nadc7);
                 ;interrupt[TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 0068 {
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
000579 93aa      	ST   -Y,R26
00057a 93ea      	ST   -Y,R30
00057b b7ef      	IN   R30,SREG
00057c 93ea      	ST   -Y,R30
                 ; 0000 0069 TCNT0 = 0x96; // BE
00057d e9e6      	LDI  R30,LOW(150)
00057e bfe2      	OUT  0x32,R30
                 ; 0000 006A a++;
00057f 91e0 028e 	LDS  R30,_a
000581 5fef      	SUBI R30,-LOW(1)
000582 93e0 028e 	STS  _a,R30
                 ; 0000 006B 
                 ; 0000 006C if (a <= pos_servo1)
000584 91e0 028b 	LDS  R30,_pos_servo1
000586 91a0 028e 	LDS  R26,_a
000588 17ea      	CP   R30,R26
000589 f010      	BRLO _0x109
                 ; 0000 006D {
                 ; 0000 006E servo1 = 0;
00058a 98ae      	CBI  0x15,6
                 ; 0000 006F }
                 ; 0000 0070 else
00058b c001      	RJMP _0x10C
                 _0x109:
                 ; 0000 0071 {
                 ; 0000 0072 servo1 = 1;
00058c 9aae      	SBI  0x15,6
                 ; 0000 0073 }
                 _0x10C:
                 ; 0000 0074 if (a <= pos_servo2)
00058d 91e0 028c 	LDS  R30,_pos_servo2
00058f 91a0 028e 	LDS  R26,_a
000591 17ea      	CP   R30,R26
000592 f010      	BRLO _0x10F
                 ; 0000 0075 {
                 ; 0000 0076 servo2 = 0;
000593 98af      	CBI  0x15,7
                 ; 0000 0077 }
                 ; 0000 0078 else
000594 c001      	RJMP _0x112
                 _0x10F:
                 ; 0000 0079 {
                 ; 0000 007A servo2 = 1;
000595 9aaf      	SBI  0x15,7
                 ; 0000 007B }
                 _0x112:
                 ; 0000 007C if (a <= pos_gulung)
000596 91e0 028d 	LDS  R30,_pos_gulung
000598 91a0 028e 	LDS  R26,_a
00059a 17ea      	CP   R30,R26
00059b f010      	BRLO _0x115
                 ; 0000 007D {
                 ; 0000 007E servo_gulung = 0;
00059c 98ad      	CBI  0x15,5
                 ; 0000 007F }
                 ; 0000 0080 else
00059d c001      	RJMP _0x118
                 _0x115:
                 ; 0000 0081 {
                 ; 0000 0082 servo_gulung = 1;
00059e 9aad      	SBI  0x15,5
                 ; 0000 0083 }
                 _0x118:
                 ; 0000 0084 }
00059f 91e9      	LD   R30,Y+
0005a0 bfef      	OUT  SREG,R30
0005a1 91e9      	LD   R30,Y+
0005a2 91a9      	LD   R26,Y+
0005a3 9518      	RETI
                 ; .FEND
                 ;interrupt[TIM0_COMP] void timer0_comp_isr(void)
                 ; 0000 0088 {
                 _timer0_comp_isr:
                 ; .FSTART _timer0_comp_isr
                 ; 0000 0089 // Place your code here
                 ; 0000 008A }
0005a4 9518      	RETI
                 ; .FEND
                 ;void main(void)
                 ; 0000 008E {
                 _main:
                 ; .FSTART _main
                 ; 0000 008F // Declare your local variables here
                 ; 0000 0090 
                 ; 0000 0091 // Input/Output Ports initialization
                 ; 0000 0092 // Port A initialization
                 ; 0000 0093 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0094 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0095 PORTA = 0x00;
0005a5 e0e0      	LDI  R30,LOW(0)
0005a6 bbeb      	OUT  0x1B,R30
                 ; 0000 0096 DDRA = 0x00;
0005a7 bbea      	OUT  0x1A,R30
                 ; 0000 0097 
                 ; 0000 0098 // Port B initialization
                 ; 0000 0099 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 009A // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 009B PORTB = 0x08;
0005a8 e0e8      	LDI  R30,LOW(8)
0005a9 bbe8      	OUT  0x18,R30
                 ; 0000 009C DDRB = 0Xff; // 0x08;
0005aa efef      	LDI  R30,LOW(255)
0005ab bbe7      	OUT  0x17,R30
                 ; 0000 009D 
                 ; 0000 009E // Port C initialization
                 ; 0000 009F // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 00A0 // State7=T State6=T State5=T State4=T State3=P State2=P State1=P State0=P
                 ; 0000 00A1 PORTC = 0xFF;
0005ac bbe5      	OUT  0x15,R30
                 ; 0000 00A2 DDRC = 0xF0; // C0
0005ad efe0      	LDI  R30,LOW(240)
0005ae bbe4      	OUT  0x14,R30
                 ; 0000 00A3 
                 ; 0000 00A4 // Port D initialization
                 ; 0000 00A5 // Func7=In Func6=In Func5=Out Func4=Out Func3=In Func2=In Func1=In Func0=In
                 ; 0000 00A6 // State7=T State6=T State5=0 State4=0 State3=T State2=T State1=T State0=T
                 ; 0000 00A7 PORTD = 0x03;
0005af e0e3      	LDI  R30,LOW(3)
0005b0 bbe2      	OUT  0x12,R30
                 ; 0000 00A8 DDRD = 0xFC; // 3F
0005b1 efec      	LDI  R30,LOW(252)
0005b2 bbe1      	OUT  0x11,R30
                 ; 0000 00A9 
                 ; 0000 00AA // Timer/Counter 0 initialization
                 ; 0000 00AB TCCR0 = 0x4A;
0005b3 e4ea      	LDI  R30,LOW(74)
0005b4 bfe3      	OUT  0x33,R30
                 ; 0000 00AC TCNT0 = 0x96;
0005b5 e9e6      	LDI  R30,LOW(150)
0005b6 bfe2      	OUT  0x32,R30
                 ; 0000 00AD OCR0 = 0x00;
0005b7 e0e0      	LDI  R30,LOW(0)
0005b8 bfec      	OUT  0x3C,R30
                 ; 0000 00AE 
                 ; 0000 00AF // Timer/Counter 1 initialization
                 ; 0000 00B0 TCCR1A = 0xA1;
0005b9 eae1      	LDI  R30,LOW(161)
0005ba bdef      	OUT  0x2F,R30
                 ; 0000 00B1 TCCR1B = 0x09;
0005bb e0e9      	LDI  R30,LOW(9)
0005bc bdee      	OUT  0x2E,R30
                 ; 0000 00B2 TCNT1H = 0x00;
0005bd e0e0      	LDI  R30,LOW(0)
0005be bded      	OUT  0x2D,R30
                 ; 0000 00B3 TCNT1L = 0x00;
0005bf bdec      	OUT  0x2C,R30
                 ; 0000 00B4 ICR1H = 0x00;
0005c0 bde7      	OUT  0x27,R30
                 ; 0000 00B5 ICR1L = 0x00;
0005c1 bde6      	OUT  0x26,R30
                 ; 0000 00B6 OCR1AH = 0x00;
0005c2 bdeb      	OUT  0x2B,R30
                 ; 0000 00B7 OCR1AL = 0x00;
0005c3 bdea      	OUT  0x2A,R30
                 ; 0000 00B8 OCR1BH = 0x00;
0005c4 bde9      	OUT  0x29,R30
                 ; 0000 00B9 OCR1BL = 0x00;
0005c5 bde8      	OUT  0x28,R30
                 ; 0000 00BA 
                 ; 0000 00BB // Timer/Counter 2 initialization
                 ; 0000 00BC // Clock source: System Clock
                 ; 0000 00BD // Clock value: Timer 2 Stopped
                 ; 0000 00BE // Mode: Normal top=FFh
                 ; 0000 00BF // OC2 output: Disconnected
                 ; 0000 00C0 ASSR = 0x00;
0005c6 bde2      	OUT  0x22,R30
                 ; 0000 00C1 TCCR2 = 0x00;
0005c7 bde5      	OUT  0x25,R30
                 ; 0000 00C2 TCNT2 = 0x00;
0005c8 bde4      	OUT  0x24,R30
                 ; 0000 00C3 OCR2 = 0x00;
0005c9 bde3      	OUT  0x23,R30
                 ; 0000 00C4 
                 ; 0000 00C5 // External Interrupt(s) initialization
                 ; 0000 00C6 // INT0: Off
                 ; 0000 00C7 // INT1: Off
                 ; 0000 00C8 // INT2: Off
                 ; 0000 00C9 MCUCR = 0x00;
0005ca bfe5      	OUT  0x35,R30
                 ; 0000 00CA MCUCSR = 0x00;
0005cb bfe4      	OUT  0x34,R30
                 ; 0000 00CB 
                 ; 0000 00CC // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 00CD TIMSK = 0x03;
0005cc e0e3      	LDI  R30,LOW(3)
0005cd bfe9      	OUT  0x39,R30
                 ; 0000 00CE 
                 ; 0000 00CF // Analog Comparator initialization
                 ; 0000 00D0 // Analog Comparator: Off
                 ; 0000 00D1 // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0000 00D2 ACSR = 0x80;
0005ce e8e0      	LDI  R30,LOW(128)
0005cf b9e8      	OUT  0x8,R30
                 ; 0000 00D3 SFIOR = 0x00;
0005d0 e0e0      	LDI  R30,LOW(0)
0005d1 bfe0      	OUT  0x30,R30
                 ; 0000 00D4 
                 ; 0000 00D5 MCUCR = 0x00;
0005d2 bfe5      	OUT  0x35,R30
                 ; 0000 00D6 MCUCSR = 0x00;
0005d3 bfe4      	OUT  0x34,R30
                 ; 0000 00D7 
                 ; 0000 00D8 // USART, UNTUK KOMUNIKASI BLUETOOTH
                 ; 0000 00D9 UCSRA = 0x00;
0005d4 b9eb      	OUT  0xB,R30
                 ; 0000 00DA UCSRB = 0x18;
0005d5 e1e8      	LDI  R30,LOW(24)
0005d6 b9ea      	OUT  0xA,R30
                 ; 0000 00DB UCSRC = 0x86;
0005d7 e8e6      	LDI  R30,LOW(134)
0005d8 bde0      	OUT  0x20,R30
                 ; 0000 00DC UBRRH = 0x00;
0005d9 e0e0      	LDI  R30,LOW(0)
0005da bde0      	OUT  0x20,R30
                 ; 0000 00DD UBRRL = 0x47;
0005db e4e7      	LDI  R30,LOW(71)
0005dc b9e9      	OUT  0x9,R30
                 ; 0000 00DE // ADC initialization
                 ; 0000 00DF // ADC Clock frequency: 691.200 kHz
                 ; 0000 00E0 // ADC Voltage Reference: AVCC pin
                 ; 0000 00E1 // ADC Auto Trigger Source: None
                 ; 0000 00E2 // Only the 8 most significant bits of
                 ; 0000 00E3 // the AD conversion result are used
                 ; 0000 00E4 ADMUX = ADC_VREF_TYPE & 0xff;
0005dd e6e0      	LDI  R30,LOW(96)
0005de b9e7      	OUT  0x7,R30
                 ; 0000 00E5 ADCSRA = 0x84;
0005df e8e4      	LDI  R30,LOW(132)
0005e0 b9e6      	OUT  0x6,R30
                 ; 0000 00E6 // ADCSRA=0xA6;
                 ; 0000 00E7 SFIOR &= 0x1F;
0005e1 b7e0      	IN   R30,0x30
0005e2 71ef      	ANDI R30,LOW(0x1F)
0005e3 bfe0      	OUT  0x30,R30
                 ; 0000 00E8 
                 ; 0000 00E9 // LCD module initialization
                 ; 0000 00EA lcd_init(16); //
0005e4 e1a0      	LDI  R26,LOW(16)
0005e5 940e 08fc 	CALL _lcd_init
                 ; 0000 00EB lcd_clear();  //
0005e7 940e 088d 	CALL _lcd_clear
                 ; 0000 00EC lampu = 0;    //
0005e9 98c3      	CBI  0x18,3
                 ; 0000 00ED // k,b
                 ; 0000 00EE lcd_gotoxy(0, 0);
0005ea 940e 098f 	CALL SUBOPT_0x9
                 ; 0000 00EF lcd_putsf("LEGION");
                +
0005ec eca5     +LDI R26 , LOW ( 2 * _0x0 + ( 327 ) )
0005ed e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 327 ) )
                 	__POINTW2FN _0x0,327
0005ee 940e 0994 	CALL SUBOPT_0xA
                 ; 0000 00F0 lcd_gotoxy(0, 1);
                 ; 0000 00F1 lcd_putsf("MAN 4 JOMBANG");
                +
0005f0 ecac     +LDI R26 , LOW ( 2 * _0x0 + ( 334 ) )
0005f1 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 334 ) )
                 	__POINTW2FN _0x0,334
0005f2 940e 0a3f 	CALL SUBOPT_0x24
                 ; 0000 00F2 delay_ms(100);
                 ; 0000 00F3 lcd_clear();
0005f4 940e 088d 	CALL _lcd_clear
                 ; 0000 00F4 
                 ; 0000 00F5 // PROGRAM UTAMA
                 ; 0000 00F6 // Global enable interrupts
                 ; 0000 00F7 #asm("sei")
0005f6 9478      	SEI
                 ; 0000 00F8 lengan_atas;
0005f7 eeea      	LDI  R30,LOW(234)
0005f8 93e0 028c 	STS  _pos_servo2,R30
                 ; 0000 00F9 capit_lepas;
0005fa eee6      	LDI  R30,LOW(230)
0005fb 93e0 028b 	STS  _pos_servo1,R30
                 ; 0000 00FA gulung_stop;
0005fd efef      	LDI  R30,LOW(255)
0005fe 93e0 028d 	STS  _pos_gulung,R30
                 ; 0000 00FB 
                 ; 0000 00FC lcd_gotoxy(0, 1);
000600 940e 0a11 	CALL SUBOPT_0x1E
                 ; 0000 00FD lcd_putsf("TEST");
                +
000602 edaa     +LDI R26 , LOW ( 2 * _0x0 + ( 348 ) )
000603 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 348 ) )
                 	__POINTW2FN _0x0,348
000604 940e 0a3f 	CALL SUBOPT_0x24
                 ; 0000 00FE delay_ms(100);
                 ; 0000 00FF 
                 ; 0000 0100 /// mapMirror = 0 - map/lintasan bagian biru
                 ; 0000 0101 /// mapMirror = 1 - map/lintasan bagian merah
                 ; 0000 0102 if(mapMirror[0] != 0 && mapMirror[0] != 1) mapMirror[0] = 0;
000606 e2aa      	LDI  R26,LOW(_mapMirror)
000607 e0b0      	LDI  R27,HIGH(_mapMirror)
000608 940e 0ace 	CALL __EEPROMRDW
00060a 9730      	SBIW R30,0
00060b f021      	BREQ _0x11E
00060c 30e1      	CPI  R30,LOW(0x1)
00060d e0a0      	LDI  R26,HIGH(0x1)
00060e 07fa      	CPC  R31,R26
00060f f409      	BRNE _0x11F
                 _0x11E:
000610 c006      	RJMP _0x11D
                 _0x11F:
000611 e2aa      	LDI  R26,LOW(_mapMirror)
000612 e0b0      	LDI  R27,HIGH(_mapMirror)
000613 e0e0      	LDI  R30,LOW(0)
000614 e0f0      	LDI  R31,HIGH(0)
000615 940e 0ade 	CALL __EEPROMWRW
                 ; 0000 0103 
                 ; 0000 0104 while(1) {
                 _0x11D:
                 _0x120:
                 ; 0000 0105 if((t1 == 0) && !isTestTombol) {
000617 9998      	SBIC 0x13,0
000618 c004      	RJMP _0x124
000619 91e0 02af 	LDS  R30,_isTestTombol
00061b 30e0      	CPI  R30,0
00061c f009      	BREQ _0x125
                 _0x124:
00061d c023      	RJMP _0x123
                 _0x125:
                 ; 0000 0106 Program_Jalan();
00061e de5f      	RCALL _Program_Jalan
                 ; 0000 0107 
                 ; 0000 0108 buttonhold[0] += 1;
00061f 940e 0a22 	CALL SUBOPT_0x21
                 ; 0000 0109 while((t1 == 0) && !isTestTombol && !isDelayClick1) {
                 _0x126:
000621 9998      	SBIC 0x13,0
000622 c008      	RJMP _0x129
000623 91e0 02af 	LDS  R30,_isTestTombol
000625 30e0      	CPI  R30,0
000626 f421      	BRNE _0x129
000627 91e0 028f 	LDS  R30,_isDelayClick1
000629 30e0      	CPI  R30,0
00062a f009      	BREQ _0x12A
                 _0x129:
00062b c014      	RJMP _0x128
                 _0x12A:
                 ; 0000 010A isDelayClick1 = true;
00062c 940e 0a2c 	CALL SUBOPT_0x22
                 ; 0000 010B delay(3);
                 ; 0000 010C if(buttonhold[0] > 20) {
00062e f02c      	BRLT _0x12B
                 ; 0000 010D isSelect = true;
00062f e0e1      	LDI  R30,LOW(1)
000630 93e0 02ae 	STS  _isSelect,R30
                 ; 0000 010E changeMenu();
000632 de4d      	RCALL _changeMenu
                 ; 0000 010F } else {
000633 c008      	RJMP _0x12C
                 _0x12B:
                 ; 0000 0110 isSelect = false; isChildSelect = false;
000634 e0e0      	LDI  R30,LOW(0)
000635 93e0 02ae 	STS  _isSelect,R30
000637 93e0 02ad 	STS  _isChildSelect,R30
                 ; 0000 0111 changeMenu();
000639 de46      	RCALL _changeMenu
                 ; 0000 0112 buttonhold[0] = 0;
00063a 940e 0a39 	CALL SUBOPT_0x23
                 ; 0000 0113 }
                 _0x12C:
                 ; 0000 0114 isDelayClick1 = false;
00063c e0e0      	LDI  R30,LOW(0)
00063d 93e0 028f 	STS  _isDelayClick1,R30
                 ; 0000 0115 }
00063f cfe1      	RJMP _0x126
                 _0x128:
                 ; 0000 0116 // lcd_gotoxy(0, 0);
                 ; 0000 0117 // sprintf(buff, "button1 = %d  ", button1click);
                 ; 0000 0118 // lcd_puts(buff);
                 ; 0000 0119 } else if((t1 == 1)) {
000640 c007      	RJMP _0x12D
                 _0x123:
000641 9b98      	SBIS 0x13,0
000642 c005      	RJMP _0x12E
                 ; 0000 011A buttonhold[0] = 0;
000643 940e 0a39 	CALL SUBOPT_0x23
                 ; 0000 011B isDelayClick1 = false;
000645 e0e0      	LDI  R30,LOW(0)
000646 93e0 028f 	STS  _isDelayClick1,R30
                 ; 0000 011C }
                 ; 0000 011D if((t2 == 0) && !isTestTombol) {
                 _0x12E:
                 _0x12D:
000648 9999      	SBIC 0x13,1
000649 c004      	RJMP _0x130
00064a 91e0 02af 	LDS  R30,_isTestTombol
00064c 30e0      	CPI  R30,0
00064d f009      	BREQ _0x131
                 _0x130:
00064e c013      	RJMP _0x12F
                 _0x131:
                 ; 0000 011E menuSelect += 1;
00064f 91e0 02ab 	LDS  R30,_menuSelect
000651 91f0 02ac 	LDS  R31,_menuSelect+1
000653 9631      	ADIW R30,1
000654 940e 0a16 	CALL SUBOPT_0x1F
                 ; 0000 011F if(menuSelect >= 4) menuSelect = 0;
000656 91a0 02ab 	LDS  R26,_menuSelect
000658 91b0 02ac 	LDS  R27,_menuSelect+1
00065a 9714      	SBIW R26,4
00065b f02c      	BRLT _0x132
00065c e0e0      	LDI  R30,LOW(0)
00065d 93e0 02ab 	STS  _menuSelect,R30
00065f 93e0 02ac 	STS  _menuSelect+1,R30
                 ; 0000 0120 changeMenu();
                 _0x132:
000661 de1e      	RCALL _changeMenu
                 ; 0000 0121 // scan_garis();
                 ; 0000 0122 // delay(300);
                 ; 0000 0123 // scan_back();
                 ; 0000 0124 // delay(100);
                 ; 0000 0125 // hit_tengah();
                 ; 0000 0126 
                 ; 0000 0127 // button1click = 0;
                 ; 0000 0128 // lcd_gotoxy(0, 0);
                 ; 0000 0129 // sprintf(buff, "button1 = %d  ", button1click);
                 ; 0000 012A // lcd_puts(buff);
                 ; 0000 012B }
                 ; 0000 012C }
                 _0x12F:
000662 cfb4      	RJMP _0x120
                 ; 0000 012D }
                 _0x133:
000663 cfff      	RJMP _0x133
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
000664 93ba      	ST   -Y,R27
000665 93aa      	ST   -Y,R26
000666 931a      	ST   -Y,R17
000667 930a      	ST   -Y,R16
000668 81aa      	LDD  R26,Y+2
000669 81bb      	LDD  R27,Y+2+1
00066a 9612      	ADIW R26,2
00066b 940e 0ac1 	CALL __GETW1P
00066d 9730      	SBIW R30,0
00066e f129      	BREQ _0x2000010
00066f 81aa      	LDD  R26,Y+2
000670 81bb      	LDD  R27,Y+2+1
000671 9614      	ADIW R26,4
000672 940e 0ac1 	CALL __GETW1P
000674 018f      	MOVW R16,R30
000675 9730      	SBIW R30,0
000676 f061      	BREQ _0x2000012
                +
000677 3002     +CPI R16 , LOW ( 2 )
000678 e0e0     +LDI R30 , HIGH ( 2 )
000679 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
00067a f080      	BRLO _0x2000013
00067b 01f8      	MOVW R30,R16
00067c 9731      	SBIW R30,1
00067d 018f      	MOVW R16,R30
                +
00067e 81aa     +LDD R26 , Y + 2
00067f 81bb     +LDD R27 , Y + 2 + 1
000680 9614     +ADIW R26 , 4
000681 93ed     +ST X + , R30
000682 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
000683 81aa      	LDD  R26,Y+2
000684 81bb      	LDD  R27,Y+2+1
000685 9612      	ADIW R26,2
000686 940e 09c9 	CALL SUBOPT_0x13
000688 9731      	SBIW R30,1
000689 81ac      	LDD  R26,Y+4
00068a 83a0      	STD  Z+0,R26
                 _0x2000013:
00068b 81aa      	LDD  R26,Y+2
00068c 81bb      	LDD  R27,Y+2+1
00068d 940e 0ac1 	CALL __GETW1P
00068f 23ff      	TST  R31
000690 f012      	BRMI _0x2000014
000691 940e 09c9 	CALL SUBOPT_0x13
                 _0x2000014:
000693 c006      	RJMP _0x2000015
                 _0x2000010:
000694 81aa      	LDD  R26,Y+2
000695 81bb      	LDD  R27,Y+2+1
000696 efef      	LDI  R30,LOW(65535)
000697 efff      	LDI  R31,HIGH(65535)
000698 93ed      	ST   X+,R30
000699 93fc      	ST   X,R31
                 _0x2000015:
00069a 8119      	LDD  R17,Y+1
00069b 8108      	LDD  R16,Y+0
00069c 9625      	ADIW R28,5
00069d 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
00069e 93ba      	ST   -Y,R27
00069f 93aa      	ST   -Y,R26
0006a0 9726      	SBIW R28,6
0006a1 940e 0a6b 	CALL __SAVELOCR6
0006a3 e010      	LDI  R17,0
0006a4 85ac      	LDD  R26,Y+12
0006a5 85bd      	LDD  R27,Y+12+1
0006a6 e0e0      	LDI  R30,LOW(0)
0006a7 e0f0      	LDI  R31,HIGH(0)
0006a8 93ed      	ST   X+,R30
0006a9 93fc      	ST   X,R31
                 _0x2000016:
0006aa 89ea      	LDD  R30,Y+18
0006ab 89fb      	LDD  R31,Y+18+1
0006ac 9631      	ADIW R30,1
0006ad 8bea      	STD  Y+18,R30
0006ae 8bfb      	STD  Y+18+1,R31
0006af 9731      	SBIW R30,1
0006b0 91e4      	LPM  R30,Z
0006b1 2f2e      	MOV  R18,R30
0006b2 30e0      	CPI  R30,0
0006b3 f409      	BRNE PC+2
0006b4 c11d      	RJMP _0x2000018
0006b5 2fe1      	MOV  R30,R17
0006b6 30e0      	CPI  R30,0
0006b7 f439      	BRNE _0x200001C
0006b8 3225      	CPI  R18,37
0006b9 f411      	BRNE _0x200001D
0006ba e011      	LDI  R17,LOW(1)
0006bb c002      	RJMP _0x200001E
                 _0x200001D:
0006bc 940e 0a45 	CALL SUBOPT_0x25
                 _0x200001E:
0006be c112      	RJMP _0x200001B
                 _0x200001C:
0006bf 30e1      	CPI  R30,LOW(0x1)
0006c0 f4a9      	BRNE _0x200001F
0006c1 3225      	CPI  R18,37
0006c2 f419      	BRNE _0x2000020
0006c3 940e 0a45 	CALL SUBOPT_0x25
0006c5 c10a      	RJMP _0x20000CC
                 _0x2000020:
0006c6 e012      	LDI  R17,LOW(2)
0006c7 e040      	LDI  R20,LOW(0)
0006c8 e000      	LDI  R16,LOW(0)
0006c9 322d      	CPI  R18,45
0006ca f411      	BRNE _0x2000021
0006cb e001      	LDI  R16,LOW(1)
0006cc c104      	RJMP _0x200001B
                 _0x2000021:
0006cd 322b      	CPI  R18,43
0006ce f411      	BRNE _0x2000022
0006cf e24b      	LDI  R20,LOW(43)
0006d0 c100      	RJMP _0x200001B
                 _0x2000022:
0006d1 3220      	CPI  R18,32
0006d2 f411      	BRNE _0x2000023
0006d3 e240      	LDI  R20,LOW(32)
0006d4 c0fc      	RJMP _0x200001B
                 _0x2000023:
0006d5 c002      	RJMP _0x2000024
                 _0x200001F:
0006d6 30e2      	CPI  R30,LOW(0x2)
0006d7 f439      	BRNE _0x2000025
                 _0x2000024:
0006d8 e050      	LDI  R21,LOW(0)
0006d9 e013      	LDI  R17,LOW(3)
0006da 3320      	CPI  R18,48
0006db f411      	BRNE _0x2000026
0006dc 6800      	ORI  R16,LOW(128)
0006dd c0f3      	RJMP _0x200001B
                 _0x2000026:
0006de c003      	RJMP _0x2000027
                 _0x2000025:
0006df 30e3      	CPI  R30,LOW(0x3)
0006e0 f009      	BREQ PC+2
0006e1 c0ef      	RJMP _0x200001B
                 _0x2000027:
0006e2 3320      	CPI  R18,48
0006e3 f010      	BRLO _0x200002A
0006e4 332a      	CPI  R18,58
0006e5 f008      	BRLO _0x200002B
                 _0x200002A:
0006e6 c007      	RJMP _0x2000029
                 _0x200002B:
0006e7 e0aa      	LDI  R26,LOW(10)
0006e8 9f5a      	MUL  R21,R26
0006e9 2d50      	MOV  R21,R0
0006ea 2fe2      	MOV  R30,R18
0006eb 53e0      	SUBI R30,LOW(48)
0006ec 0f5e      	ADD  R21,R30
0006ed c0e3      	RJMP _0x200001B
                 _0x2000029:
0006ee 2fe2      	MOV  R30,R18
0006ef 36e3      	CPI  R30,LOW(0x63)
0006f0 f449      	BRNE _0x200002F
0006f1 940e 0a4c 	CALL SUBOPT_0x26
0006f3 89e8      	LDD  R30,Y+16
0006f4 89f9      	LDD  R31,Y+16+1
0006f5 81a4      	LDD  R26,Z+4
0006f6 93aa      	ST   -Y,R26
0006f7 940e 0a52 	CALL SUBOPT_0x27
0006f9 c0d6      	RJMP _0x2000030
                 _0x200002F:
0006fa 37e3      	CPI  R30,LOW(0x73)
0006fb f441      	BRNE _0x2000032
0006fc 940e 0a4c 	CALL SUBOPT_0x26
0006fe 940e 0a58 	CALL SUBOPT_0x28
000700 940e 0816 	CALL _strlen
000702 2f1e      	MOV  R17,R30
000703 c00a      	RJMP _0x2000033
                 _0x2000032:
000704 37e0      	CPI  R30,LOW(0x70)
000705 f461      	BRNE _0x2000035
000706 940e 0a4c 	CALL SUBOPT_0x26
000708 940e 0a58 	CALL SUBOPT_0x28
00070a 940e 0822 	CALL _strlenf
00070c 2f1e      	MOV  R17,R30
00070d 6008      	ORI  R16,LOW(8)
                 _0x2000033:
00070e 6002      	ORI  R16,LOW(2)
00070f 770f      	ANDI R16,LOW(127)
000710 e030      	LDI  R19,LOW(0)
000711 c03c      	RJMP _0x2000036
                 _0x2000035:
000712 36e4      	CPI  R30,LOW(0x64)
000713 f011      	BREQ _0x2000039
000714 36e9      	CPI  R30,LOW(0x69)
000715 f411      	BRNE _0x200003A
                 _0x2000039:
000716 6004      	ORI  R16,LOW(4)
000717 c002      	RJMP _0x200003B
                 _0x200003A:
000718 37e5      	CPI  R30,LOW(0x75)
000719 f431      	BRNE _0x200003C
                 _0x200003B:
00071a e5e4      	LDI  R30,LOW(_tbl10_G100*2)
00071b e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
00071c 83ee      	STD  Y+6,R30
00071d 83ff      	STD  Y+6+1,R31
00071e e015      	LDI  R17,LOW(5)
00071f c00c      	RJMP _0x200003D
                 _0x200003C:
000720 35e8      	CPI  R30,LOW(0x58)
000721 f411      	BRNE _0x200003F
000722 6008      	ORI  R16,LOW(8)
000723 c003      	RJMP _0x2000040
                 _0x200003F:
000724 37e8      	CPI  R30,LOW(0x78)
000725 f009      	BREQ PC+2
000726 c0a9      	RJMP _0x2000071
                 _0x2000040:
000727 e5ee      	LDI  R30,LOW(_tbl16_G100*2)
000728 e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
000729 83ee      	STD  Y+6,R30
00072a 83ff      	STD  Y+6+1,R31
00072b e014      	LDI  R17,LOW(4)
                 _0x200003D:
00072c ff02      	SBRS R16,2
00072d c017      	RJMP _0x2000042
00072e 940e 0a4c 	CALL SUBOPT_0x26
000730 89a8      	LDD  R26,Y+16
000731 89b9      	LDD  R27,Y+16+1
000732 9614      	ADIW R26,4
000733 91ed      	LD   R30,X+
000734 91fd      	LD   R31,X+
000735 87ea      	STD  Y+10,R30
000736 87fb      	STD  Y+10+1,R31
000737 85ab      	LDD  R26,Y+11
000738 23aa      	TST  R26
000739 f42a      	BRPL _0x2000043
00073a 940e 0a7d 	CALL __ANEGW1
00073c 87ea      	STD  Y+10,R30
00073d 87fb      	STD  Y+10+1,R31
00073e e24d      	LDI  R20,LOW(45)
                 _0x2000043:
00073f 3040      	CPI  R20,0
000740 f011      	BREQ _0x2000044
000741 5f1f      	SUBI R17,-LOW(1)
000742 c001      	RJMP _0x2000045
                 _0x2000044:
000743 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
000744 c009      	RJMP _0x2000046
                 _0x2000042:
000745 940e 0a4c 	CALL SUBOPT_0x26
000747 89a8      	LDD  R26,Y+16
000748 89b9      	LDD  R27,Y+16+1
000749 9614      	ADIW R26,4
00074a 940e 0ac1 	CALL __GETW1P
00074c 87ea      	STD  Y+10,R30
00074d 87fb      	STD  Y+10+1,R31
                 _0x2000046:
                 _0x2000036:
00074e fd00      	SBRC R16,0
00074f c011      	RJMP _0x2000047
                 _0x2000048:
000750 1715      	CP   R17,R21
000751 f478      	BRSH _0x200004A
000752 ff07      	SBRS R16,7
000753 c008      	RJMP _0x200004B
000754 ff02      	SBRS R16,2
000755 c004      	RJMP _0x200004C
000756 7f0b      	ANDI R16,LOW(251)
000757 2f24      	MOV  R18,R20
000758 5011      	SUBI R17,LOW(1)
000759 c001      	RJMP _0x200004D
                 _0x200004C:
00075a e320      	LDI  R18,LOW(48)
                 _0x200004D:
00075b c001      	RJMP _0x200004E
                 _0x200004B:
00075c e220      	LDI  R18,LOW(32)
                 _0x200004E:
00075d 940e 0a45 	CALL SUBOPT_0x25
00075f 5051      	SUBI R21,LOW(1)
000760 cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
000761 2f31      	MOV  R19,R17
000762 ff01      	SBRS R16,1
000763 c017      	RJMP _0x200004F
                 _0x2000050:
000764 3030      	CPI  R19,0
000765 f0a1      	BREQ _0x2000052
000766 ff03      	SBRS R16,3
000767 c006      	RJMP _0x2000053
000768 81ee      	LDD  R30,Y+6
000769 81ff      	LDD  R31,Y+6+1
00076a 9125      	LPM  R18,Z+
00076b 83ee      	STD  Y+6,R30
00076c 83ff      	STD  Y+6+1,R31
00076d c005      	RJMP _0x2000054
                 _0x2000053:
00076e 81ae      	LDD  R26,Y+6
00076f 81bf      	LDD  R27,Y+6+1
000770 912d      	LD   R18,X+
000771 83ae      	STD  Y+6,R26
000772 83bf      	STD  Y+6+1,R27
                 _0x2000054:
000773 940e 0a45 	CALL SUBOPT_0x25
000775 3050      	CPI  R21,0
000776 f009      	BREQ _0x2000055
000777 5051      	SUBI R21,LOW(1)
                 _0x2000055:
000778 5031      	SUBI R19,LOW(1)
000779 cfea      	RJMP _0x2000050
                 _0x2000052:
00077a c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
00077b e320      	LDI  R18,LOW(48)
00077c 81ee      	LDD  R30,Y+6
00077d 81ff      	LDD  R31,Y+6+1
00077e 940e 0ac5 	CALL __GETW1PF
000780 87e8      	STD  Y+8,R30
000781 87f9      	STD  Y+8+1,R31
000782 81ee      	LDD  R30,Y+6
000783 81ff      	LDD  R31,Y+6+1
000784 9632      	ADIW R30,2
000785 83ee      	STD  Y+6,R30
000786 83ff      	STD  Y+6+1,R31
                 _0x200005A:
000787 85e8      	LDD  R30,Y+8
000788 85f9      	LDD  R31,Y+8+1
000789 85aa      	LDD  R26,Y+10
00078a 85bb      	LDD  R27,Y+10+1
00078b 17ae      	CP   R26,R30
00078c 07bf      	CPC  R27,R31
00078d f050      	BRLO _0x200005C
00078e 5f2f      	SUBI R18,-LOW(1)
00078f 85a8      	LDD  R26,Y+8
000790 85b9      	LDD  R27,Y+8+1
000791 85ea      	LDD  R30,Y+10
000792 85fb      	LDD  R31,Y+10+1
000793 1bea      	SUB  R30,R26
000794 0bfb      	SBC  R31,R27
000795 87ea      	STD  Y+10,R30
000796 87fb      	STD  Y+10+1,R31
000797 cfef      	RJMP _0x200005A
                 _0x200005C:
000798 332a      	CPI  R18,58
000799 f028      	BRLO _0x200005D
00079a ff03      	SBRS R16,3
00079b c002      	RJMP _0x200005E
00079c 5f29      	SUBI R18,-LOW(7)
00079d c001      	RJMP _0x200005F
                 _0x200005E:
00079e 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
00079f fd04      	SBRC R16,4
0007a0 c01a      	RJMP _0x2000061
0007a1 3321      	CPI  R18,49
0007a2 f420      	BRSH _0x2000063
0007a3 85a8      	LDD  R26,Y+8
0007a4 85b9      	LDD  R27,Y+8+1
0007a5 9711      	SBIW R26,1
0007a6 f409      	BRNE _0x2000062
                 _0x2000063:
0007a7 c009      	RJMP _0x20000CD
                 _0x2000062:
0007a8 1753      	CP   R21,R19
0007a9 f010      	BRLO _0x2000067
0007aa ff00      	SBRS R16,0
0007ab c001      	RJMP _0x2000068
                 _0x2000067:
0007ac c013      	RJMP _0x2000066
                 _0x2000068:
0007ad e220      	LDI  R18,LOW(32)
0007ae ff07      	SBRS R16,7
0007af c00b      	RJMP _0x2000069
0007b0 e320      	LDI  R18,LOW(48)
                 _0x20000CD:
0007b1 6100      	ORI  R16,LOW(16)
0007b2 ff02      	SBRS R16,2
0007b3 c007      	RJMP _0x200006A
0007b4 7f0b      	ANDI R16,LOW(251)
0007b5 934a      	ST   -Y,R20
0007b6 940e 0a52 	CALL SUBOPT_0x27
0007b8 3050      	CPI  R21,0
0007b9 f009      	BREQ _0x200006B
0007ba 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
0007bb 940e 0a45 	CALL SUBOPT_0x25
0007bd 3050      	CPI  R21,0
0007be f009      	BREQ _0x200006C
0007bf 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
0007c0 5031      	SUBI R19,LOW(1)
0007c1 85a8      	LDD  R26,Y+8
0007c2 85b9      	LDD  R27,Y+8+1
0007c3 9712      	SBIW R26,2
0007c4 f008      	BRLO _0x2000059
0007c5 cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
0007c6 ff00      	SBRS R16,0
0007c7 c008      	RJMP _0x200006D
                 _0x200006E:
0007c8 3050      	CPI  R21,0
0007c9 f031      	BREQ _0x2000070
0007ca 5051      	SUBI R21,LOW(1)
0007cb e2e0      	LDI  R30,LOW(32)
0007cc 93ea      	ST   -Y,R30
0007cd 940e 0a52 	CALL SUBOPT_0x27
0007cf cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
0007d0 e010      	LDI  R17,LOW(0)
                 _0x200001B:
0007d1 ced8      	RJMP _0x2000016
                 _0x2000018:
0007d2 85ac      	LDD  R26,Y+12
0007d3 85bd      	LDD  R27,Y+12+1
0007d4 91ed      	LD   R30,X+
0007d5 91fd      	LD   R31,X+
0007d6 940e 0a72 	CALL __LOADLOCR6
0007d8 9664      	ADIW R28,20
0007d9 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
0007da 92ff      	PUSH R15
0007db 2ef8      	MOV  R15,R24
0007dc 9726      	SBIW R28,6
0007dd 940e 0a6d 	CALL __SAVELOCR4
0007df 01de      	MOVW R26,R28
0007e0 961c      	ADIW R26,12
0007e1 940e 0a79 	CALL __ADDW2R15
0007e3 940e 0ac1 	CALL __GETW1P
0007e5 9730      	SBIW R30,0
0007e6 f419      	BRNE _0x2000072
0007e7 efef      	LDI  R30,LOW(65535)
0007e8 efff      	LDI  R31,HIGH(65535)
0007e9 c027      	RJMP _0x20C0004
                 _0x2000072:
0007ea 01de      	MOVW R26,R28
0007eb 9616      	ADIW R26,6
0007ec 940e 0a79 	CALL __ADDW2R15
0007ee 018d      	MOVW R16,R26
0007ef 01de      	MOVW R26,R28
0007f0 961c      	ADIW R26,12
0007f1 940e 0a79 	CALL __ADDW2R15
0007f3 91ed      	LD   R30,X+
0007f4 91fd      	LD   R31,X+
0007f5 83ee      	STD  Y+6,R30
0007f6 83ff      	STD  Y+6+1,R31
0007f7 e0e0      	LDI  R30,LOW(0)
0007f8 87e8      	STD  Y+8,R30
0007f9 87e9      	STD  Y+8+1,R30
0007fa 01de      	MOVW R26,R28
0007fb 961a      	ADIW R26,10
0007fc 940e 0a79 	CALL __ADDW2R15
0007fe 91ed      	LD   R30,X+
0007ff 91fd      	LD   R31,X+
000800 93fa      	ST   -Y,R31
000801 93ea      	ST   -Y,R30
000802 931a      	ST   -Y,R17
000803 930a      	ST   -Y,R16
000804 e6e4      	LDI  R30,LOW(_put_buff_G100)
000805 e0f6      	LDI  R31,HIGH(_put_buff_G100)
000806 93fa      	ST   -Y,R31
000807 93ea      	ST   -Y,R30
000808 01de      	MOVW R26,R28
000809 961a      	ADIW R26,10
00080a de93      	RCALL __print_G100
00080b 019f      	MOVW R18,R30
00080c 81ae      	LDD  R26,Y+6
00080d 81bf      	LDD  R27,Y+6+1
00080e e0e0      	LDI  R30,LOW(0)
00080f 93ec      	ST   X,R30
000810 01f9      	MOVW R30,R18
                 _0x20C0004:
000811 940e 0a74 	CALL __LOADLOCR4
000813 962a      	ADIW R28,10
000814 90ff      	POP  R15
000815 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000816 93ba      	ST   -Y,R27
000817 93aa      	ST   -Y,R26
000818 91a9          ld   r26,y+
000819 91b9          ld   r27,y+
00081a 27ee          clr  r30
00081b 27ff          clr  r31
                 strlen0:
00081c 916d          ld   r22,x+
00081d 2366          tst  r22
00081e f011          breq strlen1
00081f 9631          adiw r30,1
000820 cffb          rjmp strlen0
                 strlen1:
000821 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000822 93ba      	ST   -Y,R27
000823 93aa      	ST   -Y,R26
000824 27aa          clr  r26
000825 27bb          clr  r27
000826 91e9          ld   r30,y+
000827 91f9          ld   r31,y+
                 strlenf0:
000828 9005      	lpm  r0,z+
000829 2000          tst  r0
00082a f011          breq strlenf1
00082b 9611          adiw r26,1
00082c cffb          rjmp strlenf0
                 strlenf1:
00082d 01fd          movw r30,r26
00082e 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 _abs:
                 ; .FSTART _abs
00082f 93ba      	ST   -Y,R27
000830 93aa      	ST   -Y,R26
000831 91e9          ld   r30,y+
000832 91f9          ld   r31,y+
000833 9730          sbiw r30,0
000834 f41a          brpl __abs0
000835 95e0          com  r30
000836 95f0          com  r31
000837 9631          adiw r30,1
                 __abs0:
000838 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                     .equ __lcd_direction=__lcd_port-1
                     .equ __lcd_pin=__lcd_port-2
                     .equ __lcd_rs=0
                     .equ __lcd_rd=1
                     .equ __lcd_enable=2
                     .equ __lcd_busy_flag=7
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_delay_G103:
                 ; .FSTART __lcd_delay_G103
000839 e0ff          ldi   r31,15
                 __lcd_delay0:
00083a 95fa          dec   r31
00083b f7f1          brne  __lcd_delay0
00083c 9508      	RET
                 ; .FEND
                 __lcd_ready:
                 ; .FSTART __lcd_ready
00083d b3a7          in    r26,__lcd_direction
00083e 70af          andi  r26,0xf                 ;set as input
00083f bba7          out   __lcd_direction,r26
000840 9ac1          sbi   __lcd_port,__lcd_rd     ;RD=1
000841 98c0          cbi   __lcd_port,__lcd_rs     ;RS=0
                 __lcd_busy:
000842 dff6      	RCALL __lcd_delay_G103
000843 9ac2          sbi   __lcd_port,__lcd_enable ;EN=1
000844 dff4      	RCALL __lcd_delay_G103
000845 b3a6          in    r26,__lcd_pin
000846 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
000847 dff1      	RCALL __lcd_delay_G103
000848 9ac2          sbi   __lcd_port,__lcd_enable ;EN=1
000849 dfef      	RCALL __lcd_delay_G103
00084a 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
00084b fda7          sbrc  r26,__lcd_busy_flag
00084c cff5          rjmp  __lcd_busy
00084d 9508      	RET
                 ; .FEND
                 __lcd_write_nibble_G103:
                 ; .FSTART __lcd_write_nibble_G103
00084e 7fa0          andi  r26,0xf0
00084f 2bab          or    r26,r27
000850 bba8          out   __lcd_port,r26          ;write
000851 9ac2          sbi   __lcd_port,__lcd_enable ;EN=1
000852 940e 0839 	CALL __lcd_delay_G103
000854 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
000855 940e 0839 	CALL __lcd_delay_G103
000857 9508      	RET
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000858 93aa      	ST   -Y,R26
000859 98c1          cbi  __lcd_port,__lcd_rd 	  ;RD=0
00085a b3a7          in    r26,__lcd_direction
00085b 6fa7          ori   r26,0xf0 | (1<<__lcd_rs) | (1<<__lcd_rd) | (1<<__lcd_enable) ;set as output
00085c bba7          out   __lcd_direction,r26
00085d b3b8          in    r27,__lcd_port
00085e 70bf          andi  r27,0xf
00085f 81a8          ld    r26,y
000860 dfed      	RCALL __lcd_write_nibble_G103
000861 81a8          ld    r26,y
000862 95a2          swap  r26
000863 dfea      	RCALL __lcd_write_nibble_G103
000864 9ac1          sbi   __lcd_port,__lcd_rd     ;RD=1
000865 940c 092e 	JMP  _0x20C0001
                 ; .FEND
                 __lcd_read_nibble_G103:
                 ; .FSTART __lcd_read_nibble_G103
000867 9ac2          sbi   __lcd_port,__lcd_enable ;EN=1
000868 940e 0839 	CALL __lcd_delay_G103
00086a b3e6          in    r30,__lcd_pin           ;read
00086b 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
00086c 940e 0839 	CALL __lcd_delay_G103
00086e 7fe0          andi  r30,0xf0
00086f 9508      	RET
                 ; .FEND
                 _lcd_read_byte0_G103:
                 ; .FSTART _lcd_read_byte0_G103
000870 940e 0839 	CALL __lcd_delay_G103
000872 dff4      	RCALL __lcd_read_nibble_G103
000873 2fae          mov   r26,r30
000874 dff2      	RCALL __lcd_read_nibble_G103
000875 98c1          cbi   __lcd_port,__lcd_rd     ;RD=0
000876 95e2          swap  r30
000877 2bea          or    r30,r26
000878 9508      	RET
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000879 93aa      	ST   -Y,R26
00087a 940e 083d 	CALL __lcd_ready
00087c 81e8      	LD   R30,Y
00087d e0f0      	LDI  R31,0
00087e 54ec      	SUBI R30,LOW(-__base_y_G103)
00087f 4ffd      	SBCI R31,HIGH(-__base_y_G103)
000880 81e0      	LD   R30,Z
000881 81a9      	LDD  R26,Y+1
000882 0fae      	ADD  R26,R30
000883 940e 0858 	CALL __lcd_write_data
000885 81e9      	LDD  R30,Y+1
000886 93e0 02b8 	STS  __lcd_x,R30
000888 81e8      	LD   R30,Y
000889 93e0 02b9 	STS  __lcd_y,R30
                 _0x20C0003:
00088b 9622      	ADIW R28,2
00088c 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
00088d 940e 083d 	CALL __lcd_ready
00088f e0a2      	LDI  R26,LOW(2)
000890 940e 0858 	CALL __lcd_write_data
000892 940e 083d 	CALL __lcd_ready
000894 e0ac      	LDI  R26,LOW(12)
000895 940e 0858 	CALL __lcd_write_data
000897 940e 083d 	CALL __lcd_ready
000899 e0a1      	LDI  R26,LOW(1)
00089a 940e 0858 	CALL __lcd_write_data
00089c e0e0      	LDI  R30,LOW(0)
00089d 93e0 02b9 	STS  __lcd_y,R30
00089f 93e0 02b8 	STS  __lcd_x,R30
0008a1 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0008a2 93aa      	ST   -Y,R26
0008a3 93ef          push r30
0008a4 93ff          push r31
0008a5 81a8          ld   r26,y
0008a6 9468          set
0008a7 30aa          cpi  r26,10
0008a8 f039          breq __lcd_putchar1
0008a9 94e8          clt
0008aa 91e0 02ba 	LDS  R30,__lcd_maxx
0008ac 91a0 02b8 	LDS  R26,__lcd_x
0008ae 17ae      	CP   R26,R30
0008af f058      	BRLO _0x2060004
                 	__lcd_putchar1:
0008b0 91e0 02b9 	LDS  R30,__lcd_y
0008b2 5fef      	SUBI R30,-LOW(1)
0008b3 93e0 02b9 	STS  __lcd_y,R30
0008b5 e0e0      	LDI  R30,LOW(0)
0008b6 93ea      	ST   -Y,R30
0008b7 91a0 02b9 	LDS  R26,__lcd_y
0008b9 dfbf      	RCALL _lcd_gotoxy
0008ba f056      	brts __lcd_putchar0
                 _0x2060004:
0008bb 91e0 02b8 	LDS  R30,__lcd_x
0008bd 5fef      	SUBI R30,-LOW(1)
0008be 93e0 02b8 	STS  __lcd_x,R30
0008c0 df7c          rcall __lcd_ready
0008c1 9ac0          sbi  __lcd_port,__lcd_rs ;RS=1
0008c2 81a8      	LD   R26,Y
0008c3 940e 0858 	CALL __lcd_write_data
                 __lcd_putchar0:
0008c5 91ff          pop  r31
0008c6 91ef          pop  r30
0008c7 940c 092e 	JMP  _0x20C0001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0008c9 93ba      	ST   -Y,R27
0008ca 93aa      	ST   -Y,R26
0008cb 931a      	ST   -Y,R17
                 _0x2060005:
0008cc 81a9      	LDD  R26,Y+1
0008cd 81ba      	LDD  R27,Y+1+1
0008ce 91ed      	LD   R30,X+
0008cf 83a9      	STD  Y+1,R26
0008d0 83ba      	STD  Y+1+1,R27
0008d1 2f1e      	MOV  R17,R30
0008d2 30e0      	CPI  R30,0
0008d3 f019      	BREQ _0x2060007
0008d4 2fa1      	MOV  R26,R17
0008d5 dfcc      	RCALL _lcd_putchar
0008d6 cff5      	RJMP _0x2060005
                 _0x2060007:
0008d7 c010      	RJMP _0x20C0002
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
0008d8 93ba      	ST   -Y,R27
0008d9 93aa      	ST   -Y,R26
0008da 931a      	ST   -Y,R17
                 _0x2060008:
0008db 81e9      	LDD  R30,Y+1
0008dc 81fa      	LDD  R31,Y+1+1
0008dd 9631      	ADIW R30,1
0008de 83e9      	STD  Y+1,R30
0008df 83fa      	STD  Y+1+1,R31
0008e0 9731      	SBIW R30,1
0008e1 91e4      	LPM  R30,Z
0008e2 2f1e      	MOV  R17,R30
0008e3 30e0      	CPI  R30,0
0008e4 f019      	BREQ _0x206000A
0008e5 2fa1      	MOV  R26,R17
0008e6 dfbb      	RCALL _lcd_putchar
0008e7 cff3      	RJMP _0x2060008
                 _0x206000A:
                 _0x20C0002:
0008e8 8118      	LDD  R17,Y+0
0008e9 9623      	ADIW R28,3
0008ea 9508      	RET
                 ; .FEND
                 __long_delay_G103:
                 ; .FSTART __long_delay_G103
0008eb 27aa          clr   r26
0008ec 27bb          clr   r27
                 __long_delay0:
0008ed 9711          sbiw  r26,1         ;2 cycles
0008ee f7f1          brne  __long_delay0 ;2 cycles
0008ef 9508      	RET
                 ; .FEND
                 __lcd_init_write_G103:
                 ; .FSTART __lcd_init_write_G103
0008f0 93aa      	ST   -Y,R26
0008f1 98c1          cbi  __lcd_port,__lcd_rd 	  ;RD=0
0008f2 b3a7          in    r26,__lcd_direction
0008f3 6fa7          ori   r26,0xf7                ;set as output
0008f4 bba7          out   __lcd_direction,r26
0008f5 b3b8          in    r27,__lcd_port
0008f6 70bf          andi  r27,0xf
0008f7 81a8          ld    r26,y
0008f8 940e 084e 	CALL __lcd_write_nibble_G103
0008fa 9ac1          sbi   __lcd_port,__lcd_rd     ;RD=1
0008fb c032      	RJMP _0x20C0001
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0008fc 93aa      	ST   -Y,R26
0008fd 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
0008fe 98c0          cbi   __lcd_port,__lcd_rs     ;RS=0
0008ff 81e8      	LD   R30,Y
000900 93e0 02ba 	STS  __lcd_maxx,R30
000902 58e0      	SUBI R30,-LOW(128)
                +
000903 93e0 02b6+STS __base_y_G103 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G103,2
000905 81e8      	LD   R30,Y
000906 54e0      	SUBI R30,-LOW(192)
                +
000907 93e0 02b7+STS __base_y_G103 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G103,3
000909 940e 0a62 	CALL SUBOPT_0x29
00090b 940e 0a62 	CALL SUBOPT_0x29
00090d 940e 0a62 	CALL SUBOPT_0x29
00090f dfdb      	RCALL __long_delay_G103
000910 e2a0      	LDI  R26,LOW(32)
000911 dfde      	RCALL __lcd_init_write_G103
000912 dfd8      	RCALL __long_delay_G103
000913 e2a8      	LDI  R26,LOW(40)
000914 940e 0a67 	CALL SUBOPT_0x2A
000916 e0a4      	LDI  R26,LOW(4)
000917 940e 0a67 	CALL SUBOPT_0x2A
000919 e8a5      	LDI  R26,LOW(133)
00091a 940e 0a67 	CALL SUBOPT_0x2A
00091c b3a7          in    r26,__lcd_direction
00091d 70af          andi  r26,0xf                 ;set as input
00091e bba7          out   __lcd_direction,r26
00091f 9ac1          sbi   __lcd_port,__lcd_rd     ;RD=1
000920 940e 0870 	CALL _lcd_read_byte0_G103
000922 30e5      	CPI  R30,LOW(0x5)
000923 f011      	BREQ _0x206000B
000924 e0e0      	LDI  R30,LOW(0)
000925 c008      	RJMP _0x20C0001
                 _0x206000B:
000926 940e 083d 	CALL __lcd_ready
000928 e0a6      	LDI  R26,LOW(6)
000929 940e 0858 	CALL __lcd_write_data
00092b 940e 088d 	CALL _lcd_clear
00092d e0e1      	LDI  R30,LOW(1)
                 _0x20C0001:
00092e 9621      	ADIW R28,1
00092f 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _buttonhold:
000260           	.BYTE 0x8
                 _buff:
000268           	.BYTE 0x21
                 _k:
000289           	.BYTE 0x2
                 _pos_servo1:
00028b           	.BYTE 0x1
                 _pos_servo2:
00028c           	.BYTE 0x1
                 _pos_gulung:
00028d           	.BYTE 0x1
                 _a:
00028e           	.BYTE 0x1
                 _isDelayClick1:
00028f           	.BYTE 0x1
                 
                 	.ESEG
                 _garis:
000000           	.BYTE 0xE
                 _back:
00000e           	.BYTE 0xE
                 _tengah:
00001c           	.BYTE 0xE
                 _mapMirror:
00002a           	.BYTE 0x2
                 
                 	.DSEG
                 _sen:
000290           	.BYTE 0x7
                 _sensor:
000297           	.BYTE 0x2
                 _error:
000299           	.BYTE 0x2
                 _lastError:
00029b           	.BYTE 0x2
                 _kp:
00029d           	.BYTE 0x2
                 _kd:
00029f           	.BYTE 0x2
                 _SPEED:
0002a1           	.BYTE 0x2
                 _MIN_SPEED:
0002a3           	.BYTE 0x2
                 _MAX_SPEED:
0002a5           	.BYTE 0x2
                 _count:
0002a7           	.BYTE 0x2
                 _second:
0002a9           	.BYTE 0x2
                 _menuSelect:
0002ab           	.BYTE 0x2
                 _isChildSelect:
0002ad           	.BYTE 0x1
                 _isSelect:
0002ae           	.BYTE 0x1
                 _isTestTombol:
0002af           	.BYTE 0x1
                 __seed_G102:
0002b0           	.BYTE 0x4
                 __base_y_G103:
0002b4           	.BYTE 0x4
                 __lcd_x:
0002b8           	.BYTE 0x1
                 __lcd_y:
0002b9           	.BYTE 0x1
                 __lcd_maxx:
0002ba           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
000930 e0e7      	LDI  R30,LOW(7)
000931 e0f0      	LDI  R31,HIGH(7)
000932 16ce      	CP   R12,R30
000933 06df      	CPC  R13,R31
000934 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x1:
000935 2dac      	MOV  R26,R12
000936 940e 0143 	CALL _read_adc
000938 2e0e      	MOV  R0,R30
000939 01f6      	MOVW R30,R12
00093a e1ac      	LDI  R26,LOW(_tengah)
00093b e0b0      	LDI  R27,HIGH(_tengah)
00093c 0fee      	LSL  R30
00093d 1fff      	ROL  R31
00093e 0fae      	ADD  R26,R30
00093f 1fbf      	ADC  R27,R31
000940 940e 0ace 	CALL __EEPROMRDW
000942 2da0      	MOV  R26,R0
000943 e0b0      	LDI  R27,0
000944 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2:
000945 9fea      	MUL  R30,R26
000946 01f0      	MOVW R30,R0
                +
000947 0f6e     +ADD R22 , R30
000948 1f7f     +ADC R23 , R31
                 	__ADDWRR 22,23,30,31
000949 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
00094a 01f6      	MOVW R30,R12
00094b e0a0      	LDI  R26,LOW(_garis)
00094c e0b0      	LDI  R27,HIGH(_garis)
00094d 0fee      	LSL  R30
00094e 1fff      	ROL  R31
00094f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4:
000950 e0f0      	LDI  R31,0
000951 940e 0ade 	CALL __EEPROMWRW
000953 e0e0      	LDI  R30,LOW(0)
000954 93ea      	ST   -Y,R30
000955 e0a0      	LDI  R26,LOW(0)
000956 940c 0879 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x5:
000958 940e 08d8 	CALL _lcd_putsf
00095a e0e0      	LDI  R30,LOW(0)
00095b 93ea      	ST   -Y,R30
00095c e0a1      	LDI  R26,LOW(1)
00095d 940e 0879 	CALL _lcd_gotoxy
00095f e6e8      	LDI  R30,LOW(_buff)
000960 e0f2      	LDI  R31,HIGH(_buff)
000961 93fa      	ST   -Y,R31
000962 93ea      	ST   -Y,R30
                +
000963 eae4     +LDI R30 , LOW ( 2 * _0x0 + ( 38 ) )
000964 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 38 ) )
                 	__POINTW1FN _0x0,38
000965 93fa      	ST   -Y,R31
000966 93ea      	ST   -Y,R30
000967 01f6      	MOVW R30,R12
000968 940e 0a89 	CALL __CWD1
00096a 940e 0ac9 	CALL __PUTPARD1
00096c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x6:
00096d 0fae      	ADD  R26,R30
00096e 1fbf      	ADC  R27,R31
00096f 940e 0ace 	CALL __EEPROMRDW
000971 940e 0a89 	CALL __CWD1
000973 940e 0ac9 	CALL __PUTPARD1
000975 e088      	LDI  R24,8
000976 940e 07da 	CALL _sprintf
000978 962c      	ADIW R28,12
000979 e6a8      	LDI  R26,LOW(_buff)
00097a e0b2      	LDI  R27,HIGH(_buff)
00097b 940e 08c9 	CALL _lcd_puts
00097d 98c3      	CBI  0x18,3
00097e e0aa      	LDI  R26,LOW(10)
00097f e0b0      	LDI  R27,0
000980 940e 0be2 	CALL _delay_ms
000982 9ac3      	SBI  0x18,3
000983 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x7:
000984 01f6      	MOVW R30,R12
000985 e0ae      	LDI  R26,LOW(_back)
000986 e0b0      	LDI  R27,HIGH(_back)
000987 0fee      	LSL  R30
000988 1fff      	ROL  R31
000989 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
00098a 0fae      	ADD  R26,R30
00098b 1fbf      	ADC  R27,R31
00098c 940e 0ace 	CALL __EEPROMRDW
00098e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:24 WORDS
                 SUBOPT_0x9:
00098f e0e0      	LDI  R30,LOW(0)
000990 93ea      	ST   -Y,R30
000991 e0a0      	LDI  R26,LOW(0)
000992 940c 0879 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0xA:
000994 940e 08d8 	CALL _lcd_putsf
000996 e0e0      	LDI  R30,LOW(0)
000997 93ea      	ST   -Y,R30
000998 e0a1      	LDI  R26,LOW(1)
000999 940c 0879 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0xB:
00099b 93aa      	ST   -Y,R26
00099c 81e8      	LD   R30,Y
00099d e0f0      	LDI  R31,0
00099e bdf9      	OUT  0x28+1,R31
00099f bde8      	OUT  0x28,R30
0009a0 81e9      	LDD  R30,Y+1
0009a1 e0f0      	LDI  R31,0
0009a2 bdfb      	OUT  0x2A+1,R31
0009a3 bdea      	OUT  0x2A,R30
0009a4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xC:
0009a5 81a8      	LD   R26,Y
0009a6 81b9      	LDD  R27,Y+1
0009a7 940e 0af7 	CALL __CPW02
0009a9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xD:
0009aa 81e8      	LD   R30,Y
0009ab 81f9      	LDD  R31,Y+1
0009ac 940e 0a89 	CALL __CWD1
0009ae 940e 0b67 	CALL __CDF1
0009b0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
0009b1 940e 0b30 	CALL __CFD1
0009b3 93ed      	ST   X+,R30
0009b4 93fc      	ST   X,R31
0009b5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xF:
0009b6 91e0 0297 	LDS  R30,_sensor
0009b8 91f0 0298 	LDS  R31,_sensor+1
0009ba 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x10:
0009bb 91e0 02a5 	LDS  R30,_MAX_SPEED
0009bd 91f0 02a6 	LDS  R31,_MAX_SPEED+1
0009bf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x11:
0009c0 91e0 02a3 	LDS  R30,_MIN_SPEED
0009c2 91f0 02a4 	LDS  R31,_MIN_SPEED+1
0009c4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x12:
0009c5 dff0      	RCALL SUBOPT_0xF
0009c6 71ec      	ANDI R30,LOW(0x1C)
0009c7 31ec      	CPI  R30,LOW(0x1C)
0009c8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x13:
0009c9 91ed      	LD   R30,X+
0009ca 91fd      	LD   R31,X+
0009cb 9631      	ADIW R30,1
0009cc 93fe      	ST   -X,R31
0009cd 93ee      	ST   -X,R30
0009ce 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x14:
0009cf 81a8      	LD   R26,Y
0009d0 81b9      	LDD  R27,Y+1
0009d1 940c 0271 	JMP  _rem
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x15:
0009d3 81ea      	LDD  R30,Y+2
0009d4 93ea      	ST   -Y,R30
0009d5 81ab      	LDD  R26,Y+3
0009d6 940e 0241 	CALL _kiri
0009d8 940c 019f 	JMP  _cek_sensor
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x16:
0009da 81ea      	LDD  R30,Y+2
0009db 93ea      	ST   -Y,R30
0009dc 81ab      	LDD  R26,Y+3
0009dd 940e 023a 	CALL _kanan
0009df 940c 019f 	JMP  _cek_sensor
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x17:
0009e1 81ea      	LDD  R30,Y+2
0009e2 81fb      	LDD  R31,Y+2+1
0009e3 93fa      	ST   -Y,R31
0009e4 93ea      	ST   -Y,R30
0009e5 81aa      	LDD  R26,Y+2
0009e6 81bb      	LDD  R27,Y+2+1
0009e7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x18:
0009e8 93e0 028b 	STS  _pos_servo1,R30
0009ea 81a8      	LD   R26,Y
0009eb 81b9      	LDD  R27,Y+1
0009ec 940e 014e 	CALL _delay
0009ee eeea      	LDI  R30,LOW(234)
0009ef 93e0 028c 	STS  _pos_servo2,R30
0009f1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x19:
0009f2 e0e1      	LDI  R30,LOW(1)
0009f3 e0f0      	LDI  R31,HIGH(1)
0009f4 93fa      	ST   -Y,R31
0009f5 93ea      	ST   -Y,R30
0009f6 e5a0      	LDI  R26,LOW(80)
0009f7 e0b0      	LDI  R27,0
0009f8 940c 038f 	JMP  _scanX
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1A:
0009fa e6e4      	LDI  R30,LOW(100)
0009fb e0f0      	LDI  R31,HIGH(100)
0009fc 93fa      	ST   -Y,R31
0009fd 93ea      	ST   -Y,R30
0009fe 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1B:
0009ff 93fa      	ST   -Y,R31
000a00 93ea      	ST   -Y,R30
000a01 e3a2      	LDI  R26,LOW(50)
000a02 e0b0      	LDI  R27,0
000a03 940e 03b3 	CALL _scanTimer
000a05 e1a4      	LDI  R26,LOW(20)
000a06 e0b0      	LDI  R27,0
000a07 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1C:
000a08 93fa      	ST   -Y,R31
000a09 93ea      	ST   -Y,R30
000a0a e9a6      	LDI  R26,LOW(150)
000a0b e0b0      	LDI  R27,0
000a0c 940c 038f 	JMP  _scanX
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1D:
000a0e 940e 088d 	CALL _lcd_clear
000a10 cf7e      	RJMP SUBOPT_0x9
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x1E:
000a11 e0e0      	LDI  R30,LOW(0)
000a12 93ea      	ST   -Y,R30
000a13 e0a1      	LDI  R26,LOW(1)
000a14 940c 0879 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1F:
000a16 93e0 02ab 	STS  _menuSelect,R30
000a18 93f0 02ac 	STS  _menuSelect+1,R31
000a1a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x20:
000a1b 940e 022c 	CALL _maju
000a1d e3a2      	LDI  R26,LOW(50)
000a1e e0b0      	LDI  R27,0
000a1f 940e 0be2 	CALL _delay_ms
000a21 cfef      	RJMP SUBOPT_0x1E
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x21:
000a22 91e0 0260 	LDS  R30,_buttonhold
000a24 91f0 0261 	LDS  R31,_buttonhold+1
000a26 9631      	ADIW R30,1
000a27 93e0 0260 	STS  _buttonhold,R30
000a29 93f0 0261 	STS  _buttonhold+1,R31
000a2b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x22:
000a2c e0e1      	LDI  R30,LOW(1)
000a2d 93e0 028f 	STS  _isDelayClick1,R30
000a2f e0a3      	LDI  R26,LOW(3)
000a30 e0b0      	LDI  R27,0
000a31 940e 014e 	CALL _delay
000a33 91a0 0260 	LDS  R26,_buttonhold
000a35 91b0 0261 	LDS  R27,_buttonhold+1
000a37 9755      	SBIW R26,21
000a38 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x23:
000a39 e0e0      	LDI  R30,LOW(0)
000a3a 93e0 0260 	STS  _buttonhold,R30
000a3c 93e0 0261 	STS  _buttonhold+1,R30
000a3e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x24:
000a3f 940e 08d8 	CALL _lcd_putsf
000a41 e6a4      	LDI  R26,LOW(100)
000a42 e0b0      	LDI  R27,0
000a43 940c 0be2 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x25:
000a45 932a      	ST   -Y,R18
000a46 85ad      	LDD  R26,Y+13
000a47 85be      	LDD  R27,Y+13+1
000a48 85ef      	LDD  R30,Y+15
000a49 89f8      	LDD  R31,Y+15+1
000a4a 9509      	ICALL
000a4b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x26:
000a4c 89e8      	LDD  R30,Y+16
000a4d 89f9      	LDD  R31,Y+16+1
000a4e 9734      	SBIW R30,4
000a4f 8be8      	STD  Y+16,R30
000a50 8bf9      	STD  Y+16+1,R31
000a51 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x27:
000a52 85ad      	LDD  R26,Y+13
000a53 85be      	LDD  R27,Y+13+1
000a54 85ef      	LDD  R30,Y+15
000a55 89f8      	LDD  R31,Y+15+1
000a56 9509      	ICALL
000a57 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x28:
000a58 89a8      	LDD  R26,Y+16
000a59 89b9      	LDD  R27,Y+16+1
000a5a 9614      	ADIW R26,4
000a5b 91ed      	LD   R30,X+
000a5c 91fd      	LD   R31,X+
000a5d 83ee      	STD  Y+6,R30
000a5e 83ff      	STD  Y+6+1,R31
000a5f 81ae      	LDD  R26,Y+6
000a60 81bf      	LDD  R27,Y+6+1
000a61 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x29:
000a62 940e 08eb 	CALL __long_delay_G103
000a64 e3a0      	LDI  R26,LOW(48)
000a65 940c 08f0 	JMP  __lcd_init_write_G103
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2A:
000a67 940e 0858 	CALL __lcd_write_data
000a69 940c 08eb 	JMP  __long_delay_G103
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
000a6b 935a      	ST   -Y,R21
                 __SAVELOCR5:
000a6c 934a      	ST   -Y,R20
                 __SAVELOCR4:
000a6d 933a      	ST   -Y,R19
                 __SAVELOCR3:
000a6e 932a      	ST   -Y,R18
                 __SAVELOCR2:
000a6f 931a      	ST   -Y,R17
000a70 930a      	ST   -Y,R16
000a71 9508      	RET
                 
                 __LOADLOCR6:
000a72 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000a73 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000a74 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000a75 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000a76 8119      	LDD  R17,Y+1
000a77 8108      	LD   R16,Y
000a78 9508      	RET
                 
                 __ADDW2R15:
000a79 2400      	CLR  R0
000a7a 0daf      	ADD  R26,R15
000a7b 1db0      	ADC  R27,R0
000a7c 9508      	RET
                 
                 __ANEGW1:
000a7d 95f1      	NEG  R31
000a7e 95e1      	NEG  R30
000a7f 40f0      	SBCI R31,0
000a80 9508      	RET
                 
                 __ANEGD1:
000a81 95f0      	COM  R31
000a82 9560      	COM  R22
000a83 9570      	COM  R23
000a84 95e1      	NEG  R30
000a85 4fff      	SBCI R31,-1
000a86 4f6f      	SBCI R22,-1
000a87 4f7f      	SBCI R23,-1
000a88 9508      	RET
                 
                 __CWD1:
000a89 2f6f      	MOV  R22,R31
000a8a 0f66      	ADD  R22,R22
000a8b 0b66      	SBC  R22,R22
000a8c 2f76      	MOV  R23,R22
000a8d 9508      	RET
                 
                 __MULW12U:
000a8e 9ffa      	MUL  R31,R26
000a8f 2df0      	MOV  R31,R0
000a90 9feb      	MUL  R30,R27
000a91 0df0      	ADD  R31,R0
000a92 9fea      	MUL  R30,R26
000a93 2de0      	MOV  R30,R0
000a94 0df1      	ADD  R31,R1
000a95 9508      	RET
                 
                 __MULW12:
000a96 d01c      	RCALL __CHKSIGNW
000a97 dff6      	RCALL __MULW12U
000a98 f40e      	BRTC __MULW121
000a99 dfe3      	RCALL __ANEGW1
                 __MULW121:
000a9a 9508      	RET
                 
                 __DIVW21U:
000a9b 2400      	CLR  R0
000a9c 2411      	CLR  R1
000a9d e190      	LDI  R25,16
                 __DIVW21U1:
000a9e 0faa      	LSL  R26
000a9f 1fbb      	ROL  R27
000aa0 1c00      	ROL  R0
000aa1 1c11      	ROL  R1
000aa2 1a0e      	SUB  R0,R30
000aa3 0a1f      	SBC  R1,R31
000aa4 f418      	BRCC __DIVW21U2
000aa5 0e0e      	ADD  R0,R30
000aa6 1e1f      	ADC  R1,R31
000aa7 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000aa8 60a1      	SBR  R26,1
                 __DIVW21U3:
000aa9 959a      	DEC  R25
000aaa f799      	BRNE __DIVW21U1
000aab 01fd      	MOVW R30,R26
000aac 01d0      	MOVW R26,R0
000aad 9508      	RET
                 
                 __DIVW21:
000aae d004      	RCALL __CHKSIGNW
000aaf dfeb      	RCALL __DIVW21U
000ab0 f40e      	BRTC __DIVW211
000ab1 dfcb      	RCALL __ANEGW1
                 __DIVW211:
000ab2 9508      	RET
                 
                 __CHKSIGNW:
000ab3 94e8      	CLT
000ab4 fff7      	SBRS R31,7
000ab5 c002      	RJMP __CHKSW1
000ab6 dfc6      	RCALL __ANEGW1
000ab7 9468      	SET
                 __CHKSW1:
000ab8 ffb7      	SBRS R27,7
000ab9 c006      	RJMP __CHKSW2
000aba 95b1      	NEG  R27
000abb 95a1      	NEG  R26
000abc 40b0      	SBCI R27,0
000abd f800      	BLD  R0,0
000abe 9403      	INC  R0
000abf fa00      	BST  R0,0
                 __CHKSW2:
000ac0 9508      	RET
                 
                 __GETW1P:
000ac1 91ed      	LD   R30,X+
000ac2 91fc      	LD   R31,X
000ac3 9711      	SBIW R26,1
000ac4 9508      	RET
                 
                 __GETW1PF:
000ac5 9005      	LPM  R0,Z+
000ac6 91f4      	LPM  R31,Z
000ac7 2de0      	MOV  R30,R0
000ac8 9508      	RET
                 
                 __PUTPARD1:
000ac9 937a      	ST   -Y,R23
000aca 936a      	ST   -Y,R22
000acb 93fa      	ST   -Y,R31
000acc 93ea      	ST   -Y,R30
000acd 9508      	RET
                 
                 __EEPROMRDW:
000ace 9611      	ADIW R26,1
000acf d002      	RCALL __EEPROMRDB
000ad0 2ffe      	MOV  R31,R30
000ad1 9711      	SBIW R26,1
                 
                 __EEPROMRDB:
000ad2 99e1      	SBIC EECR,EEWE
000ad3 cffe      	RJMP __EEPROMRDB
000ad4 93ff      	PUSH R31
000ad5 b7ff      	IN   R31,SREG
000ad6 94f8      	CLI
000ad7 bbae      	OUT  EEARL,R26
000ad8 bbbf      	OUT  EEARH,R27
000ad9 9ae0      	SBI  EECR,EERE
000ada b3ed      	IN   R30,EEDR
000adb bfff      	OUT  SREG,R31
000adc 91ff      	POP  R31
000add 9508      	RET
                 
                 __EEPROMWRW:
000ade d007      	RCALL __EEPROMWRB
000adf 9611      	ADIW R26,1
000ae0 93ef      	PUSH R30
000ae1 2fef      	MOV  R30,R31
000ae2 d003      	RCALL __EEPROMWRB
000ae3 91ef      	POP  R30
000ae4 9711      	SBIW R26,1
000ae5 9508      	RET
                 
                 __EEPROMWRB:
000ae6 9be1      	SBIS EECR,EEWE
000ae7 c002      	RJMP __EEPROMWRB1
000ae8 95a8      	WDR
000ae9 cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
000aea b79f      	IN   R25,SREG
000aeb 94f8      	CLI
000aec bbae      	OUT  EEARL,R26
000aed bbbf      	OUT  EEARH,R27
000aee 9ae0      	SBI  EECR,EERE
000aef b38d      	IN   R24,EEDR
000af0 17e8      	CP   R30,R24
000af1 f019      	BREQ __EEPROMWRB0
000af2 bbed      	OUT  EEDR,R30
000af3 9ae2      	SBI  EECR,EEMWE
000af4 9ae1      	SBI  EECR,EEWE
                 __EEPROMWRB0:
000af5 bf9f      	OUT  SREG,R25
000af6 9508      	RET
                 
                 __CPW02:
000af7 2400      	CLR  R0
000af8 160a      	CP   R0,R26
000af9 060b      	CPC  R0,R27
000afa 9508      	RET
                 
                 __ANEGF1:
000afb 9730      	SBIW R30,0
000afc 4060      	SBCI R22,0
000afd 4070      	SBCI R23,0
000afe f009      	BREQ __ANEGF10
000aff 5870      	SUBI R23,0x80
                 __ANEGF10:
000b00 9508      	RET
                 
                 __ROUND_REPACK:
000b01 2355      	TST  R21
000b02 f442      	BRPL __REPACK
000b03 3850      	CPI  R21,0x80
000b04 f411      	BRNE __ROUND_REPACK0
000b05 ffe0      	SBRS R30,0
000b06 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000b07 9631      	ADIW R30,1
000b08 1f69      	ADC  R22,R25
000b09 1f79      	ADC  R23,R25
000b0a f06b      	BRVS __REPACK1
                 
                 __REPACK:
000b0b e850      	LDI  R21,0x80
000b0c 2757      	EOR  R21,R23
000b0d f411      	BRNE __REPACK0
000b0e 935f      	PUSH R21
000b0f c073      	RJMP __ZERORES
                 __REPACK0:
000b10 3f5f      	CPI  R21,0xFF
000b11 f031      	BREQ __REPACK1
000b12 0f66      	LSL  R22
000b13 0c00      	LSL  R0
000b14 9557      	ROR  R21
000b15 9567      	ROR  R22
000b16 2f75      	MOV  R23,R21
000b17 9508      	RET
                 __REPACK1:
000b18 935f      	PUSH R21
000b19 2000      	TST  R0
000b1a f00a      	BRMI __REPACK2
000b1b c072      	RJMP __MAXRES
                 __REPACK2:
000b1c c06b      	RJMP __MINRES
                 
                 __UNPACK:
000b1d e850      	LDI  R21,0x80
000b1e 2e19      	MOV  R1,R25
000b1f 2215      	AND  R1,R21
000b20 0f88      	LSL  R24
000b21 1f99      	ROL  R25
000b22 2795      	EOR  R25,R21
000b23 0f55      	LSL  R21
000b24 9587      	ROR  R24
                 
                 __UNPACK1:
000b25 e850      	LDI  R21,0x80
000b26 2e07      	MOV  R0,R23
000b27 2205      	AND  R0,R21
000b28 0f66      	LSL  R22
000b29 1f77      	ROL  R23
000b2a 2775      	EOR  R23,R21
000b2b 0f55      	LSL  R21
000b2c 9567      	ROR  R22
000b2d 9508      	RET
                 
                 __CFD1U:
000b2e 9468      	SET
000b2f c001      	RJMP __CFD1U0
                 __CFD1:
000b30 94e8      	CLT
                 __CFD1U0:
000b31 935f      	PUSH R21
000b32 dff2      	RCALL __UNPACK1
000b33 3870      	CPI  R23,0x80
000b34 f018      	BRLO __CFD10
000b35 3f7f      	CPI  R23,0xFF
000b36 f408      	BRCC __CFD10
000b37 c04b      	RJMP __ZERORES
                 __CFD10:
000b38 e156      	LDI  R21,22
000b39 1b57      	SUB  R21,R23
000b3a f4aa      	BRPL __CFD11
000b3b 9551      	NEG  R21
000b3c 3058      	CPI  R21,8
000b3d f40e      	BRTC __CFD19
000b3e 3059      	CPI  R21,9
                 __CFD19:
000b3f f030      	BRLO __CFD17
000b40 efef      	SER  R30
000b41 efff      	SER  R31
000b42 ef6f      	SER  R22
000b43 e77f      	LDI  R23,0x7F
000b44 f977      	BLD  R23,7
000b45 c01a      	RJMP __CFD15
                 __CFD17:
000b46 2777      	CLR  R23
000b47 2355      	TST  R21
000b48 f0b9      	BREQ __CFD15
                 __CFD18:
000b49 0fee      	LSL  R30
000b4a 1fff      	ROL  R31
000b4b 1f66      	ROL  R22
000b4c 1f77      	ROL  R23
000b4d 955a      	DEC  R21
000b4e f7d1      	BRNE __CFD18
000b4f c010      	RJMP __CFD15
                 __CFD11:
000b50 2777      	CLR  R23
                 __CFD12:
000b51 3058      	CPI  R21,8
000b52 f028      	BRLO __CFD13
000b53 2fef      	MOV  R30,R31
000b54 2ff6      	MOV  R31,R22
000b55 2f67      	MOV  R22,R23
000b56 5058      	SUBI R21,8
000b57 cff9      	RJMP __CFD12
                 __CFD13:
000b58 2355      	TST  R21
000b59 f031      	BREQ __CFD15
                 __CFD14:
000b5a 9576      	LSR  R23
000b5b 9567      	ROR  R22
000b5c 95f7      	ROR  R31
000b5d 95e7      	ROR  R30
000b5e 955a      	DEC  R21
000b5f f7d1      	BRNE __CFD14
                 __CFD15:
000b60 2000      	TST  R0
000b61 f40a      	BRPL __CFD16
000b62 df1e      	RCALL __ANEGD1
                 __CFD16:
000b63 915f      	POP  R21
000b64 9508      	RET
                 
                 __CDF1U:
000b65 9468      	SET
000b66 c001      	RJMP __CDF1U0
                 __CDF1:
000b67 94e8      	CLT
                 __CDF1U0:
000b68 9730      	SBIW R30,0
000b69 4060      	SBCI R22,0
000b6a 4070      	SBCI R23,0
000b6b f0b1      	BREQ __CDF10
000b6c 2400      	CLR  R0
000b6d f026      	BRTS __CDF11
000b6e 2377      	TST  R23
000b6f f412      	BRPL __CDF11
000b70 9400      	COM  R0
000b71 df0f      	RCALL __ANEGD1
                 __CDF11:
000b72 2e17      	MOV  R1,R23
000b73 e17e      	LDI  R23,30
000b74 2011      	TST  R1
                 __CDF12:
000b75 f032      	BRMI __CDF13
000b76 957a      	DEC  R23
000b77 0fee      	LSL  R30
000b78 1fff      	ROL  R31
000b79 1f66      	ROL  R22
000b7a 1c11      	ROL  R1
000b7b cff9      	RJMP __CDF12
                 __CDF13:
000b7c 2fef      	MOV  R30,R31
000b7d 2ff6      	MOV  R31,R22
000b7e 2d61      	MOV  R22,R1
000b7f 935f      	PUSH R21
000b80 df8a      	RCALL __REPACK
000b81 915f      	POP  R21
                 __CDF10:
000b82 9508      	RET
                 
                 __ZERORES:
000b83 27ee      	CLR  R30
000b84 27ff      	CLR  R31
000b85 01bf      	MOVW R22,R30
000b86 915f      	POP  R21
000b87 9508      	RET
                 
                 __MINRES:
000b88 efef      	SER  R30
000b89 efff      	SER  R31
000b8a e76f      	LDI  R22,0x7F
000b8b ef7f      	SER  R23
000b8c 915f      	POP  R21
000b8d 9508      	RET
                 
                 __MAXRES:
000b8e efef      	SER  R30
000b8f efff      	SER  R31
000b90 e76f      	LDI  R22,0x7F
000b91 e77f      	LDI  R23,0x7F
000b92 915f      	POP  R21
000b93 9508      	RET
                 
                 __MULF12:
000b94 935f      	PUSH R21
000b95 df87      	RCALL __UNPACK
000b96 3870      	CPI  R23,0x80
000b97 f359      	BREQ __ZERORES
000b98 3890      	CPI  R25,0x80
000b99 f349      	BREQ __ZERORES
000b9a 2401      	EOR  R0,R1
000b9b 9408      	SEC
000b9c 1f79      	ADC  R23,R25
000b9d f423      	BRVC __MULF124
000b9e f324      	BRLT __ZERORES
                 __MULF125:
000b9f 2000      	TST  R0
000ba0 f33a      	BRMI __MINRES
000ba1 cfec      	RJMP __MAXRES
                 __MULF124:
000ba2 920f      	PUSH R0
000ba3 931f      	PUSH R17
000ba4 932f      	PUSH R18
000ba5 933f      	PUSH R19
000ba6 934f      	PUSH R20
000ba7 2711      	CLR  R17
000ba8 2722      	CLR  R18
000ba9 2799      	CLR  R25
000baa 9f68      	MUL  R22,R24
000bab 01a0      	MOVW R20,R0
000bac 9f8f      	MUL  R24,R31
000bad 2d30      	MOV  R19,R0
000bae 0d41      	ADD  R20,R1
000baf 1f59      	ADC  R21,R25
000bb0 9f6b      	MUL  R22,R27
000bb1 0d30      	ADD  R19,R0
000bb2 1d41      	ADC  R20,R1
000bb3 1f59      	ADC  R21,R25
000bb4 9f8e      	MUL  R24,R30
000bb5 d027      	RCALL __MULF126
000bb6 9fbf      	MUL  R27,R31
000bb7 d025      	RCALL __MULF126
000bb8 9f6a      	MUL  R22,R26
000bb9 d023      	RCALL __MULF126
000bba 9fbe      	MUL  R27,R30
000bbb d01d      	RCALL __MULF127
000bbc 9faf      	MUL  R26,R31
000bbd d01b      	RCALL __MULF127
000bbe 9fae      	MUL  R26,R30
000bbf 0d11      	ADD  R17,R1
000bc0 1f29      	ADC  R18,R25
000bc1 1f39      	ADC  R19,R25
000bc2 1f49      	ADC  R20,R25
000bc3 1f59      	ADC  R21,R25
000bc4 2fe3      	MOV  R30,R19
000bc5 2ff4      	MOV  R31,R20
000bc6 2f65      	MOV  R22,R21
000bc7 2f52      	MOV  R21,R18
000bc8 914f      	POP  R20
000bc9 913f      	POP  R19
000bca 912f      	POP  R18
000bcb 911f      	POP  R17
000bcc 900f      	POP  R0
000bcd 2366      	TST  R22
000bce f02a      	BRMI __MULF122
000bcf 0f55      	LSL  R21
000bd0 1fee      	ROL  R30
000bd1 1fff      	ROL  R31
000bd2 1f66      	ROL  R22
000bd3 c002      	RJMP __MULF123
                 __MULF122:
000bd4 9573      	INC  R23
000bd5 f24b      	BRVS __MULF125
                 __MULF123:
000bd6 df2a      	RCALL __ROUND_REPACK
000bd7 915f      	POP  R21
000bd8 9508      	RET
                 
                 __MULF127:
000bd9 0d10      	ADD  R17,R0
000bda 1d21      	ADC  R18,R1
000bdb 1f39      	ADC  R19,R25
000bdc c002      	RJMP __MULF128
                 __MULF126:
000bdd 0d20      	ADD  R18,R0
000bde 1d31      	ADC  R19,R1
                 __MULF128:
000bdf 1f49      	ADC  R20,R25
000be0 1f59      	ADC  R21,R25
000be1 9508      	RET
                 
                 _delay_ms:
000be2 9610      	adiw r26,0
000be3 f039      	breq __delay_ms1
                 __delay_ms0:
000be4 95a8      	wdr
                +
000be5 ec8d     +LDI R24 , LOW ( 0xACD )
000be6 e09a     +LDI R25 , HIGH ( 0xACD )
                +__DELAY_USW_LOOP :
000be7 9701     +SBIW R24 , 1
000be8 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xACD
000be9 9711      	sbiw r26,1
000bea f7c9      	brne __delay_ms0
                 __delay_ms1:
000beb 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  48 r1 :  18 r2 :   0 r3 :   0 r4 :   4 r5 :   2 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:  25 r13:   7 r14:   0 r15:   4 
r16:  36 r17:  32 r18:  38 r19:  17 r20:  23 r21:  66 r22:  44 r23:  35 
r24:  22 r25:  27 r26: 321 r27: 163 r28:  22 r29:   1 r30: 589 r31: 227 
x  :  32 y  : 309 z  :  16 
Registers used: 26 out of 35 (74.3%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  30 add   :  25 
adiw  :  43 and   :   2 andi  :  14 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :  45 
brge  :  15 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  14 
brlt  :   5 brmi  :   5 brne  :  58 brpl  :   6 brsh  :   2 brtc  :   3 
brts  :   2 brvc  :   1 brvs  :   2 bset  :   0 bst   :   1 call  : 233 
cbi   :  33 cbr   :   0 clc   :   0 clh   :   0 cli   :   3 cln   :   0 
clr   :  30 cls   :   0 clt   :   4 clv   :   0 clz   :   0 com   :   6 
cp    :  18 cpc   :  29 cpi   :  84 cpse  :   0 dec   :   6 des   :   0 
eor   :   4 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :  15 inc   :   2 jmp   :  38 ld    :  53 ldd   : 120 ldi   : 352 
lds   :  80 lpm   :  16 lsl   :  15 lsr   :   1 mov   :  42 movw  :  48 
mul   :  16 muls  :   0 mulsu :   0 neg   :   6 nop   :   0 or    :   2 
ori   :   9 out   :  71 pop   :  20 push  :  19 rcall :  84 ret   :  92 
reti  :   2 rjmp  : 157 rol   :  19 ror   :   7 sbc   :   5 sbci  :  10 
sbi   :  36 sbic  :   9 sbis  :   4 sbiw  :  31 sbr   :   1 sbrc  :   3 
sbrs  :  13 sec   :   1 seh   :   0 sei   :   1 sen   :   0 ser   :   8 
ses   :   0 set   :   4 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    : 127 std   :  44 sts   :  58 sub   :   5 subi  :  21 swap  :   2 
tst   :  13 wdr   :   2 
Instructions used: 78 out of 116 (67.2%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0017d8   5638    466   6104   32768  18.6%
[.dseg] 0x000060 0x0002bb      0     91     91    2048   4.4%
[.eseg] 0x000000 0x00002c      0     44     44    1024   4.3%

Assembly complete, 0 errors, 19 warnings
